/* tslint:disable */
/* eslint-disable */
/**
 * Imidapril-BE
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AlertDto
 */
export interface AlertDto {
    /**
     * 
     * @type {number}
     * @memberof AlertDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AlertDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof AlertDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AlertDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AlertDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AlertDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AlertDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AlertDto
     */
    'solution'?: string | null;
    /**
     * 
     * @type {AlertLevel}
     * @memberof AlertDto
     */
    'level'?: AlertLevel;
    /**
     * 
     * @type {number}
     * @memberof AlertDto
     */
    'cultureBatchId'?: number | null;
    /**
     * 
     * @type {CultureBatchDto}
     * @memberof AlertDto
     */
    'cultureBatch'?: CultureBatchDto;
    /**
     * 
     * @type {number}
     * @memberof AlertDto
     */
    'creatorId'?: number | null;
    /**
     * 
     * @type {UserDto}
     * @memberof AlertDto
     */
    'user'?: UserDto;
    /**
     * 
     * @type {number}
     * @memberof AlertDto
     */
    'pondId'?: number | null;
    /**
     * 
     * @type {PondDto}
     * @memberof AlertDto
     */
    'pond'?: PondDto;
}
/**
 * 
 * @export
 * @interface AlertDtoSearchResponseDto
 */
export interface AlertDtoSearchResponseDto {
    /**
     * 
     * @type {Array<AlertDto>}
     * @memberof AlertDtoSearchResponseDto
     */
    'list'?: Array<AlertDto> | null;
    /**
     * 
     * @type {number}
     * @memberof AlertDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AlertLevel = {
    提示: '提示',
    警报: '警报',
    严重: '严重'
} as const;

export type AlertLevel = typeof AlertLevel[keyof typeof AlertLevel];


/**
 * 
 * @export
 * @interface AlertSaveParams
 */
export interface AlertSaveParams {
    /**
     * 
     * @type {string}
     * @memberof AlertSaveParams
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof AlertSaveParams
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof AlertSaveParams
     */
    'solution': string;
    /**
     * 
     * @type {AlertLevel}
     * @memberof AlertSaveParams
     */
    'level': AlertLevel;
    /**
     * 
     * @type {number}
     * @memberof AlertSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof AlertSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AlertSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ApiExceptionCode = {
    NUMBER_400: 400,
    NUMBER_401: 401,
    NUMBER_403: 403,
    NUMBER_404: 404,
    NUMBER_500: 500
} as const;

export type ApiExceptionCode = typeof ApiExceptionCode[keyof typeof ApiExceptionCode];


/**
 * 
 * @export
 * @interface AuthorizeHeartbeatDto
 */
export interface AuthorizeHeartbeatDto {
    /**
     * 
     * @type {UserDto}
     * @memberof AuthorizeHeartbeatDto
     */
    'user'?: UserDto;
}
/**
 * 
 * @export
 * @interface AuthorizeLoginParams
 */
export interface AuthorizeLoginParams {
    /**
     * 
     * @type {string}
     * @memberof AuthorizeLoginParams
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizeLoginParams
     */
    'password': string;
    /**
     * 
     * @type {AuthorizeLoginPlatform}
     * @memberof AuthorizeLoginParams
     */
    'platform'?: AuthorizeLoginPlatform;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AuthorizeLoginPlatform = {
    Web: 'Web',
    DeviceControlApp: 'DeviceControlApp'
} as const;

export type AuthorizeLoginPlatform = typeof AuthorizeLoginPlatform[keyof typeof AuthorizeLoginPlatform];


/**
 * 
 * @export
 * @interface Breed
 */
export interface Breed {
    /**
     * 
     * @type {string}
     * @memberof Breed
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Breed
     */
    'description'?: string | null;
    /**
     * 
     * @type {BreedType}
     * @memberof Breed
     */
    'type'?: BreedType;
    /**
     * 
     * @type {number}
     * @memberof Breed
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Breed
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Breed
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Breed
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Breed
     */
    'isDelete'?: boolean;
}
/**
 * 
 * @export
 * @interface BreedDto
 */
export interface BreedDto {
    /**
     * 
     * @type {number}
     * @memberof BreedDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BreedDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof BreedDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BreedDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof BreedDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BreedDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BreedDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {BreedType}
     * @memberof BreedDto
     */
    'type'?: BreedType;
}
/**
 * 
 * @export
 * @interface BreedDtoSearchResponseDto
 */
export interface BreedDtoSearchResponseDto {
    /**
     * 
     * @type {Array<BreedDto>}
     * @memberof BreedDtoSearchResponseDto
     */
    'list'?: Array<BreedDto> | null;
    /**
     * 
     * @type {number}
     * @memberof BreedDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface BreedSaveParams
 */
export interface BreedSaveParams {
    /**
     * 
     * @type {string}
     * @memberof BreedSaveParams
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BreedSaveParams
     */
    'description': string;
    /**
     * 
     * @type {BreedType}
     * @memberof BreedSaveParams
     */
    'type': BreedType;
    /**
     * 
     * @type {number}
     * @memberof BreedSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof BreedSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BreedSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const BreedType = {
    动物: '动物',
    植物: '植物'
} as const;

export type BreedType = typeof BreedType[keyof typeof BreedType];


/**
 * 
 * @export
 * @interface BriefCountCultureResponseDto
 */
export interface BriefCountCultureResponseDto {
    /**
     * 
     * @type {Array<BriefCountCultureResponseItemDto>}
     * @memberof BriefCountCultureResponseDto
     */
    'list'?: Array<BriefCountCultureResponseItemDto> | null;
}
/**
 * 
 * @export
 * @interface BriefCountCultureResponseItemDto
 */
export interface BriefCountCultureResponseItemDto {
    /**
     * 
     * @type {number}
     * @memberof BriefCountCultureResponseItemDto
     */
    'cultureBatchId'?: number;
    /**
     * 
     * @type {number}
     * @memberof BriefCountCultureResponseItemDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface BriefCountPondResponseDto
 */
export interface BriefCountPondResponseDto {
    /**
     * 
     * @type {number}
     * @memberof BriefCountPondResponseDto
     */
    'culturing'?: number;
    /**
     * 
     * @type {number}
     * @memberof BriefCountPondResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface BriefCountTodayWorkloadResponseDto
 */
export interface BriefCountTodayWorkloadResponseDto {
    /**
     * 
     * @type {number}
     * @memberof BriefCountTodayWorkloadResponseDto
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof BriefCountTodayWorkloadResponseDto
     */
    'finished'?: number;
}
/**
 * 
 * @export
 * @interface BriefListUserWorkloadResponseItemDto
 */
export interface BriefListUserWorkloadResponseItemDto {
    /**
     * 
     * @type {string}
     * @memberof BriefListUserWorkloadResponseItemDto
     */
    'workerName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof BriefListUserWorkloadResponseItemDto
     */
    'workerId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof BriefListUserWorkloadResponseItemDto
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ControlDeviceType = {
    水流控制阀: '水流控制阀',
    灯: '灯',
    液氧阀: '液氧阀',
    投饵机: '投饵机'
} as const;

export type ControlDeviceType = typeof ControlDeviceType[keyof typeof ControlDeviceType];


/**
 * 
 * @export
 * @enum {string}
 */

export const ControlMethod = {
    脉冲: '脉冲',
    开关: '开关',
    模拟: '模拟'
} as const;

export type ControlMethod = typeof ControlMethod[keyof typeof ControlMethod];


/**
 * 
 * @export
 * @enum {string}
 */

export const ControlType = {
    打开: '打开',
    关闭: '关闭',
    设定: '设定'
} as const;

export type ControlType = typeof ControlType[keyof typeof ControlType];


/**
 * 
 * @export
 * @interface CultureBatch
 */
export interface CultureBatch {
    /**
     * 
     * @type {string}
     * @memberof CultureBatch
     */
    'code'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CultureBatch
     */
    'count'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureBatch
     */
    'deathCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureBatch
     */
    'creatorId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureBatch
     */
    'startedTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureBatch
     */
    'fryTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureBatch
     */
    'isDone'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CultureBatch
     */
    'finishedTime'?: string | null;
    /**
     * 
     * @type {CultureBatchStatus}
     * @memberof CultureBatch
     */
    'status'?: CultureBatchStatus;
    /**
     * 
     * @type {CultureBatchType}
     * @memberof CultureBatch
     */
    'type'?: CultureBatchType;
    /**
     * 
     * @type {number}
     * @memberof CultureBatch
     */
    'averageLength'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CultureBatch
     */
    'averageWeight'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CultureBatch
     */
    'breedId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureBatch
     */
    'pondGroupId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CultureBatch
     */
    'cultureRuleId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureBatch
     */
    'userGroupId'?: number | null;
    /**
     * 
     * @type {CultureRule}
     * @memberof CultureBatch
     */
    'cultureRule'?: CultureRule;
    /**
     * 
     * @type {Breed}
     * @memberof CultureBatch
     */
    'breed'?: Breed;
    /**
     * 
     * @type {PondGroup}
     * @memberof CultureBatch
     */
    'pondGroup'?: PondGroup;
    /**
     * 
     * @type {Array<CultureBatchPeriod>}
     * @memberof CultureBatch
     */
    'cultureBatchPeriods'?: Array<CultureBatchPeriod> | null;
    /**
     * 
     * @type {Array<CultureBatchToPond>}
     * @memberof CultureBatch
     */
    'cultureBatchToPonds'?: Array<CultureBatchToPond> | null;
    /**
     * 
     * @type {number}
     * @memberof CultureBatch
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureBatch
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureBatch
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureBatch
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureBatch
     */
    'isDelete'?: boolean;
}
/**
 * 
 * @export
 * @interface CultureBatchAddPondParams
 */
export interface CultureBatchAddPondParams {
    /**
     * 
     * @type {number}
     * @memberof CultureBatchAddPondParams
     */
    'pondId': number;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchAddPondParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface CultureBatchConfigurePeriodParams
 */
export interface CultureBatchConfigurePeriodParams {
    /**
     * 
     * @type {number}
     * @memberof CultureBatchConfigurePeriodParams
     */
    'cultureRulePeriodId': number;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchConfigurePeriodParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface CultureBatchDto
 */
export interface CultureBatchDto {
    /**
     * 
     * @type {number}
     * @memberof CultureBatchDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureBatchDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchDto
     */
    'count'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchDto
     */
    'deathCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchDto
     */
    'code'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchDto
     */
    'creatorId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchDto
     */
    'startedTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchDto
     */
    'fryTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchDto
     */
    'finishedTime'?: string | null;
    /**
     * 
     * @type {CultureBatchStatus}
     * @memberof CultureBatchDto
     */
    'status'?: CultureBatchStatus;
    /**
     * 
     * @type {CultureBatchType}
     * @memberof CultureBatchDto
     */
    'type'?: CultureBatchType;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchDto
     */
    'averageLength'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchDto
     */
    'averageWeight'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureBatchDto
     */
    'isDone'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchDto
     */
    'breedId'?: number;
    /**
     * 
     * @type {BreedDto}
     * @memberof CultureBatchDto
     */
    'breed'?: BreedDto;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchDto
     */
    'cultureRuleId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchDto
     */
    'userGroupId'?: number | null;
    /**
     * 
     * @type {CultureRuleDto}
     * @memberof CultureBatchDto
     */
    'cultureRule'?: CultureRuleDto;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchDto
     */
    'pondGroupId'?: number | null;
    /**
     * 
     * @type {PondGroupDto}
     * @memberof CultureBatchDto
     */
    'pondGroup'?: PondGroupDto;
    /**
     * 
     * @type {Array<CultureBatchToPondDto>}
     * @memberof CultureBatchDto
     */
    'cultureBatchToPonds'?: Array<CultureBatchToPondDto> | null;
}
/**
 * 
 * @export
 * @interface CultureBatchDtoSearchResponseDto
 */
export interface CultureBatchDtoSearchResponseDto {
    /**
     * 
     * @type {Array<CultureBatchDto>}
     * @memberof CultureBatchDtoSearchResponseDto
     */
    'list'?: Array<CultureBatchDto> | null;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface CultureBatchFinishParams
 */
export interface CultureBatchFinishParams {
    /**
     * 
     * @type {number}
     * @memberof CultureBatchFinishParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface CultureBatchGrowRecordDto
 */
export interface CultureBatchGrowRecordDto {
    /**
     * 
     * @type {number}
     * @memberof CultureBatchGrowRecordDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchGrowRecordDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchGrowRecordDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchGrowRecordDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureBatchGrowRecordDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchGrowRecordDto
     */
    'cultureBatchId'?: number;
    /**
     * 
     * @type {CultureBatchDto}
     * @memberof CultureBatchGrowRecordDto
     */
    'cultureBatch'?: CultureBatchDto;
    /**
     * 
     * @type {CultureInfo}
     * @memberof CultureBatchGrowRecordDto
     */
    'cultureInfo'?: CultureInfo;
}
/**
 * 
 * @export
 * @interface CultureBatchGrowRecordDtoSearchResponseDto
 */
export interface CultureBatchGrowRecordDtoSearchResponseDto {
    /**
     * 
     * @type {Array<CultureBatchGrowRecordDto>}
     * @memberof CultureBatchGrowRecordDtoSearchResponseDto
     */
    'list'?: Array<CultureBatchGrowRecordDto> | null;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchGrowRecordDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface CultureBatchIsLastCulturePeriodResponseDto
 */
export interface CultureBatchIsLastCulturePeriodResponseDto {
    /**
     * 
     * @type {boolean}
     * @memberof CultureBatchIsLastCulturePeriodResponseDto
     */
    'isLastCulturePeriod'?: boolean;
}
/**
 * 
 * @export
 * @interface CultureBatchListWorkShopParams
 */
export interface CultureBatchListWorkShopParams {
    /**
     * 
     * @type {number}
     * @memberof CultureBatchListWorkShopParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface CultureBatchPeriod
 */
export interface CultureBatchPeriod {
    /**
     * 
     * @type {number}
     * @memberof CultureBatchPeriod
     */
    'cultureBatchId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchPeriod
     */
    'cultureRulePeriodId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchPeriod
     */
    'startTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchPeriod
     */
    'endTime'?: string | null;
    /**
     * 
     * @type {CultureRulePeriod}
     * @memberof CultureBatchPeriod
     */
    'cultureRulePeriod'?: CultureRulePeriod;
    /**
     * 
     * @type {CultureBatch}
     * @memberof CultureBatchPeriod
     */
    'cultureBatch'?: CultureBatch;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchPeriod
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchPeriod
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchPeriod
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchPeriod
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureBatchPeriod
     */
    'isDelete'?: boolean;
}
/**
 * 
 * @export
 * @interface CultureBatchPeriodDto
 */
export interface CultureBatchPeriodDto {
    /**
     * 
     * @type {number}
     * @memberof CultureBatchPeriodDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchPeriodDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchPeriodDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchPeriodDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureBatchPeriodDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchPeriodDto
     */
    'cultureBatchId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchPeriodDto
     */
    'cultureRulePeriodId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchPeriodDto
     */
    'startTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchPeriodDto
     */
    'endTime'?: string | null;
    /**
     * 
     * @type {CultureBatchDto}
     * @memberof CultureBatchPeriodDto
     */
    'cultureBatch'?: CultureBatchDto;
    /**
     * 
     * @type {CultureRulePeriodDto}
     * @memberof CultureBatchPeriodDto
     */
    'cultureRulePeriod'?: CultureRulePeriodDto;
}
/**
 * 
 * @export
 * @interface CultureBatchRemovePondParams
 */
export interface CultureBatchRemovePondParams {
    /**
     * 
     * @type {number}
     * @memberof CultureBatchRemovePondParams
     */
    'pondId': number;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchRemovePondParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface CultureBatchSaveParams
 */
export interface CultureBatchSaveParams {
    /**
     * 
     * @type {CultureBatchType}
     * @memberof CultureBatchSaveParams
     */
    'type': CultureBatchType;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchSaveParams
     */
    'timePeriod'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchSaveParams
     */
    'code'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchSaveParams
     */
    'breedId': number;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchSaveParams
     */
    'cultureRuleId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof CultureBatchSaveParams
     */
    'pondIdList': Array<number>;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureBatchSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CultureBatchSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const CultureBatchStatus = {
    养殖前准备: '养殖前准备',
    养殖中: '养殖中',
    已结束: '已结束'
} as const;

export type CultureBatchStatus = typeof CultureBatchStatus[keyof typeof CultureBatchStatus];


/**
 * 
 * @export
 * @interface CultureBatchToPond
 */
export interface CultureBatchToPond {
    /**
     * 
     * @type {number}
     * @memberof CultureBatchToPond
     */
    'cultureBatchId'?: number;
    /**
     * 
     * @type {CultureBatch}
     * @memberof CultureBatchToPond
     */
    'cultureBatch'?: CultureBatch;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchToPond
     */
    'pondId'?: number;
    /**
     * 
     * @type {Pond}
     * @memberof CultureBatchToPond
     */
    'pond'?: Pond;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchToPond
     */
    'count'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchToPond
     */
    'averageWeight'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchToPond
     */
    'averageLength'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchToPond
     */
    'deathRate'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchToPond
     */
    'fryTime'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchToPond
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchToPond
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchToPond
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchToPond
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureBatchToPond
     */
    'isDelete'?: boolean;
}
/**
 * 
 * @export
 * @interface CultureBatchToPondDto
 */
export interface CultureBatchToPondDto {
    /**
     * 
     * @type {number}
     * @memberof CultureBatchToPondDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchToPondDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchToPondDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchToPondDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureBatchToPondDto
     */
    'fryTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureBatchToPondDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchToPondDto
     */
    'cultureBatchId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchToPondDto
     */
    'pondId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureBatchToPondDto
     */
    'count'?: number;
    /**
     * 
     * @type {CultureBatchDto}
     * @memberof CultureBatchToPondDto
     */
    'cultureBatch'?: CultureBatchDto;
    /**
     * 
     * @type {PondDto}
     * @memberof CultureBatchToPondDto
     */
    'pond'?: PondDto;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const CultureBatchType = {
    成鱼养殖: '成鱼养殖',
    仔鱼养殖: '仔鱼养殖',
    亲本养殖: '亲本养殖',
    温室培育: '温室培育'
} as const;

export type CultureBatchType = typeof CultureBatchType[keyof typeof CultureBatchType];


/**
 * 
 * @export
 * @interface CultureBriefDto
 */
export interface CultureBriefDto {
    /**
     * 
     * @type {number}
     * @memberof CultureBriefDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureBriefDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureBriefDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureBriefDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureBriefDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CultureBriefDto
     */
    'percent'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureBriefDto
     */
    'fryCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureBriefDto
     */
    'remainCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureBriefDto
     */
    'areaSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureBriefDto
     */
    'averageLength'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureBriefDto
     */
    'averageWeight'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CultureBriefDto
     */
    'cultureDays'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureBriefDto
     */
    'currentPeriod'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CultureBriefDto
     */
    'pondCount'?: number;
}
/**
 * 
 * @export
 * @interface CultureBriefDtoSearchResponseDto
 */
export interface CultureBriefDtoSearchResponseDto {
    /**
     * 
     * @type {Array<CultureBriefDto>}
     * @memberof CultureBriefDtoSearchResponseDto
     */
    'list'?: Array<CultureBriefDto> | null;
    /**
     * 
     * @type {number}
     * @memberof CultureBriefDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface CultureBriefSaveParams
 */
export interface CultureBriefSaveParams {
    /**
     * 
     * @type {number}
     * @memberof CultureBriefSaveParams
     */
    'percent': number;
    /**
     * 
     * @type {number}
     * @memberof CultureBriefSaveParams
     */
    'fryCount': number;
    /**
     * 
     * @type {number}
     * @memberof CultureBriefSaveParams
     */
    'remainCount': number;
    /**
     * 
     * @type {number}
     * @memberof CultureBriefSaveParams
     */
    'areaSize': number;
    /**
     * 
     * @type {string}
     * @memberof CultureBriefSaveParams
     */
    'averageLength': string;
    /**
     * 
     * @type {string}
     * @memberof CultureBriefSaveParams
     */
    'averageWeight': string;
    /**
     * 
     * @type {number}
     * @memberof CultureBriefSaveParams
     */
    'cultureDays': number;
    /**
     * 
     * @type {string}
     * @memberof CultureBriefSaveParams
     */
    'currentPeriod': string;
    /**
     * 
     * @type {number}
     * @memberof CultureBriefSaveParams
     */
    'pondCount': number;
}
/**
 * 
 * @export
 * @interface CultureInfo
 */
export interface CultureInfo {
    /**
     * 
     * @type {string}
     * @memberof CultureInfo
     */
    'variety'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureInfo
     */
    'timePeriod'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureInfo
     */
    'beginTime'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CultureInfo
     */
    'count'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureInfo
     */
    'deathRate'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CultureInfo
     */
    'deathCount'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CultureInfo
     */
    'averageLength'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CultureInfo
     */
    'averageWeight'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CultureInfo
     */
    'averageHeight'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CultureInfo
     */
    'collectCount'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CultureInfo
     */
    'collectWeight'?: number | null;
}
/**
 * 
 * @export
 * @interface CultureProductionDto
 */
export interface CultureProductionDto {
    /**
     * 
     * @type {number}
     * @memberof CultureProductionDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureProductionDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureProductionDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureProductionDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureProductionDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CultureProductionDto
     */
    'pondGroupName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CultureProductionDto
     */
    'percent'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureProductionDto
     */
    'yearOnYearBasis'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureProductionDto
     */
    'monthOnMonthBasis'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureProductionDto
     */
    'platform'?: string | null;
}
/**
 * 
 * @export
 * @interface CultureProductionDtoSearchResponseDto
 */
export interface CultureProductionDtoSearchResponseDto {
    /**
     * 
     * @type {Array<CultureProductionDto>}
     * @memberof CultureProductionDtoSearchResponseDto
     */
    'list'?: Array<CultureProductionDto> | null;
    /**
     * 
     * @type {number}
     * @memberof CultureProductionDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface CultureProductionSaveParams
 */
export interface CultureProductionSaveParams {
    /**
     * 
     * @type {string}
     * @memberof CultureProductionSaveParams
     */
    'pondGroupName': string;
    /**
     * 
     * @type {number}
     * @memberof CultureProductionSaveParams
     */
    'percent': number;
    /**
     * 
     * @type {number}
     * @memberof CultureProductionSaveParams
     */
    'yearOnYearBasis': number;
    /**
     * 
     * @type {number}
     * @memberof CultureProductionSaveParams
     */
    'monthOnMonthBasis': number;
    /**
     * 
     * @type {number}
     * @memberof CultureProductionSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureProductionSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CultureProductionSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @interface CultureRule
 */
export interface CultureRule {
    /**
     * 
     * @type {string}
     * @memberof CultureRule
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureRule
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureRule
     */
    'remark'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CultureRule
     */
    'breedId'?: number;
    /**
     * 
     * @type {Breed}
     * @memberof CultureRule
     */
    'breed'?: Breed;
    /**
     * 
     * @type {Array<number>}
     * @memberof CultureRule
     */
    'cultureRulePeriodIdSort'?: Array<number> | null;
    /**
     * 
     * @type {Array<CultureRulePeriod>}
     * @memberof CultureRule
     */
    'cultureRulePeriods'?: Array<CultureRulePeriod> | null;
    /**
     * 
     * @type {number}
     * @memberof CultureRule
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureRule
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureRule
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureRule
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureRule
     */
    'isDelete'?: boolean;
}
/**
 * 
 * @export
 * @interface CultureRuleDetailDto
 */
export interface CultureRuleDetailDto {
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureRuleDetailDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureRuleDetailDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureRuleDetailDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureRuleDetailDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CultureRuleDetailDto
     */
    'isGlobalRule'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailDto
     */
    'daysFromStart'?: number;
    /**
     * 
     * @type {WorkType}
     * @memberof CultureRuleDetailDto
     */
    'type'?: WorkType;
    /**
     * 
     * @type {RepeatType}
     * @memberof CultureRuleDetailDto
     */
    'repeatType'?: RepeatType;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailDto
     */
    'repeatInterval'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailDto
     */
    'cultureRuleId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailDto
     */
    'timeSpan'?: number;
    /**
     * 
     * @type {PeriodUnitType}
     * @memberof CultureRuleDetailDto
     */
    'timeSpanUnit'?: PeriodUnitType;
    /**
     * 
     * @type {boolean}
     * @memberof CultureRuleDetailDto
     */
    'isFullDay'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailDto
     */
    'preferHour'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailDto
     */
    'preferTime'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailDto
     */
    'cultureRulePeriodId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CultureRuleDetailDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {CultureRulePeriodDto}
     * @memberof CultureRuleDetailDto
     */
    'cultureRulePeriod'?: CultureRulePeriodDto;
    /**
     * 
     * @type {CultureRuleDto}
     * @memberof CultureRuleDetailDto
     */
    'cultureRule'?: CultureRuleDto;
}
/**
 * 
 * @export
 * @interface CultureRuleDetailDtoSearchResponseDto
 */
export interface CultureRuleDetailDtoSearchResponseDto {
    /**
     * 
     * @type {Array<CultureRuleDetailDto>}
     * @memberof CultureRuleDetailDtoSearchResponseDto
     */
    'list'?: Array<CultureRuleDetailDto> | null;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface CultureRuleDetailRemoveParams
 */
export interface CultureRuleDetailRemoveParams {
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailRemoveParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface CultureRuleDetailSaveParams
 */
export interface CultureRuleDetailSaveParams {
    /**
     * 
     * @type {boolean}
     * @memberof CultureRuleDetailSaveParams
     */
    'isGlobalRule': boolean;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailSaveParams
     */
    'daysFromStart': number;
    /**
     * 
     * @type {WorkType}
     * @memberof CultureRuleDetailSaveParams
     */
    'type': WorkType;
    /**
     * 
     * @type {RepeatType}
     * @memberof CultureRuleDetailSaveParams
     */
    'repeatType': RepeatType;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailSaveParams
     */
    'repeatInterval'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailSaveParams
     */
    'cultureRuleId': number;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailSaveParams
     */
    'cultureRulePeriodId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailSaveParams
     */
    'timeSpan': number;
    /**
     * 
     * @type {PeriodUnitType}
     * @memberof CultureRuleDetailSaveParams
     */
    'timeSpanUnit': PeriodUnitType;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailSaveParams
     */
    'preferHour'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailSaveParams
     */
    'preferTime'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CultureRuleDetailSaveParams
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureRuleDetailSaveParams
     */
    'isFullDay': boolean;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureRuleDetailSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CultureRuleDetailSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @interface CultureRuleDto
 */
export interface CultureRuleDto {
    /**
     * 
     * @type {Array<number>}
     * @memberof CultureRuleDto
     */
    'cultureRulePeriodIdSort'?: Array<number> | null;
    /**
     * 
     * @type {Array<CultureRulePeriodDto>}
     * @memberof CultureRuleDto
     */
    'cultureRulePeriods'?: Array<CultureRulePeriodDto> | null;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureRuleDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureRuleDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureRuleDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureRuleDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CultureRuleDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureRuleDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureRuleDto
     */
    'remark'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDto
     */
    'breedId'?: number;
    /**
     * 
     * @type {BreedDto}
     * @memberof CultureRuleDto
     */
    'breed'?: BreedDto;
}
/**
 * 
 * @export
 * @interface CultureRuleDtoSearchResponseDto
 */
export interface CultureRuleDtoSearchResponseDto {
    /**
     * 
     * @type {Array<CultureRuleDto>}
     * @memberof CultureRuleDtoSearchResponseDto
     */
    'list'?: Array<CultureRuleDto> | null;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface CultureRulePeriod
 */
export interface CultureRulePeriod {
    /**
     * 
     * @type {number}
     * @memberof CultureRulePeriod
     */
    'cultureRuleId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureRulePeriod
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureRulePeriod
     */
    'description'?: string | null;
    /**
     * 
     * @type {CultureRule}
     * @memberof CultureRulePeriod
     */
    'cultureRule'?: CultureRule;
    /**
     * 
     * @type {number}
     * @memberof CultureRulePeriod
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureRulePeriod
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureRulePeriod
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureRulePeriod
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureRulePeriod
     */
    'isDelete'?: boolean;
}
/**
 * 
 * @export
 * @interface CultureRulePeriodDto
 */
export interface CultureRulePeriodDto {
    /**
     * 
     * @type {number}
     * @memberof CultureRulePeriodDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureRulePeriodDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureRulePeriodDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureRulePeriodDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureRulePeriodDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CultureRulePeriodDto
     */
    'cultureRuleId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureRulePeriodDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureRulePeriodDto
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface CultureRulePeriodDtoSearchResponseDto
 */
export interface CultureRulePeriodDtoSearchResponseDto {
    /**
     * 
     * @type {Array<CultureRulePeriodDto>}
     * @memberof CultureRulePeriodDtoSearchResponseDto
     */
    'list'?: Array<CultureRulePeriodDto> | null;
    /**
     * 
     * @type {number}
     * @memberof CultureRulePeriodDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface CultureRulePeriodRemoveParams
 */
export interface CultureRulePeriodRemoveParams {
    /**
     * 
     * @type {number}
     * @memberof CultureRulePeriodRemoveParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface CultureRulePeriodSaveParams
 */
export interface CultureRulePeriodSaveParams {
    /**
     * 
     * @type {string}
     * @memberof CultureRulePeriodSaveParams
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CultureRulePeriodSaveParams
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CultureRulePeriodSaveParams
     */
    'cultureRuleId': number;
    /**
     * 
     * @type {number}
     * @memberof CultureRulePeriodSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureRulePeriodSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CultureRulePeriodSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @interface CultureRuleSaveParams
 */
export interface CultureRuleSaveParams {
    /**
     * 
     * @type {string}
     * @memberof CultureRuleSaveParams
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CultureRuleSaveParams
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureRuleSaveParams
     */
    'remark'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleSaveParams
     */
    'breedId': number;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureRuleSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CultureRuleSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @interface CultureRuleSensorRangeDto
 */
export interface CultureRuleSensorRangeDto {
    /**
     * 
     * @type {number}
     * @memberof CultureRuleSensorRangeDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CultureRuleSensorRangeDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CultureRuleSensorRangeDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CultureRuleSensorRangeDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureRuleSensorRangeDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleSensorRangeDto
     */
    'cultureRuleId'?: number;
    /**
     * 
     * @type {CultureRuleDto}
     * @memberof CultureRuleSensorRangeDto
     */
    'cultureRule'?: CultureRuleDto;
    /**
     * 
     * @type {WaterQualityType}
     * @memberof CultureRuleSensorRangeDto
     */
    'type'?: WaterQualityType;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleSensorRangeDto
     */
    'warningMin'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleSensorRangeDto
     */
    'warningMax'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleSensorRangeDto
     */
    'dangerMin'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleSensorRangeDto
     */
    'dangerMax'?: number;
}
/**
 * 
 * @export
 * @interface CultureRuleSensorRangeDtoSearchResponseDto
 */
export interface CultureRuleSensorRangeDtoSearchResponseDto {
    /**
     * 
     * @type {Array<CultureRuleSensorRangeDto>}
     * @memberof CultureRuleSensorRangeDtoSearchResponseDto
     */
    'list'?: Array<CultureRuleSensorRangeDto> | null;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleSensorRangeDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface CultureRuleSensorRangeSaveParams
 */
export interface CultureRuleSensorRangeSaveParams {
    /**
     * 
     * @type {number}
     * @memberof CultureRuleSensorRangeSaveParams
     */
    'cultureRuleId': number;
    /**
     * 
     * @type {WaterQualityType}
     * @memberof CultureRuleSensorRangeSaveParams
     */
    'type'?: WaterQualityType;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleSensorRangeSaveParams
     */
    'warningMin'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleSensorRangeSaveParams
     */
    'warningMax'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleSensorRangeSaveParams
     */
    'dangerMin'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleSensorRangeSaveParams
     */
    'dangerMax'?: number;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleSensorRangeSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof CultureRuleSensorRangeSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CultureRuleSensorRangeSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @interface CultureRuleUpdatePeriodSortParams
 */
export interface CultureRuleUpdatePeriodSortParams {
    /**
     * 
     * @type {Array<number>}
     * @memberof CultureRuleUpdatePeriodSortParams
     */
    'cultureRulePeriodIdSort': Array<number>;
    /**
     * 
     * @type {number}
     * @memberof CultureRuleUpdatePeriodSortParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface DataCenterFeedAnalyseResponse
 */
export interface DataCenterFeedAnalyseResponse {
    /**
     * 
     * @type {Array<DataCenterFeedAnalyseResponseItem>}
     * @memberof DataCenterFeedAnalyseResponse
     */
    'list'?: Array<DataCenterFeedAnalyseResponseItem> | null;
}
/**
 * 
 * @export
 * @interface DataCenterFeedAnalyseResponseItem
 */
export interface DataCenterFeedAnalyseResponseItem {
    /**
     * 
     * @type {string}
     * @memberof DataCenterFeedAnalyseResponseItem
     */
    'date'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof DataCenterFeedAnalyseResponseItem
     */
    'value'?: number;
    /**
     * 
     * @type {Array<WorkScheduleFinishFeedItem>}
     * @memberof DataCenterFeedAnalyseResponseItem
     */
    'list'?: Array<WorkScheduleFinishFeedItem> | null;
}
/**
 * 
 * @export
 * @interface Device
 */
export interface Device {
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'sn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'remark'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'alias'?: string | null;
    /**
     * 
     * @type {ControlMethod}
     * @memberof Device
     */
    'controlMethod'?: ControlMethod;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'sensorFpId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Device
     */
    'rawValue'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'sensorUnit'?: string | null;
    /**
     * 
     * @type {WaterQualityType}
     * @memberof Device
     */
    'sensorType'?: WaterQualityType;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'turnOnAbilityName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'turnOffAbilityName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'readAbilityName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'groupName'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Device
     */
    'controlable'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof Device
     */
    'userGroupId'?: number | null;
    /**
     * 
     * @type {UserGroup}
     * @memberof Device
     */
    'userGroup'?: UserGroup;
    /**
     * 
     * @type {number}
     * @memberof Device
     */
    'yunPlcDeviceId'?: number | null;
    /**
     * 
     * @type {YunPlcDevice}
     * @memberof Device
     */
    'yunPlcDevice'?: YunPlcDevice;
    /**
     * 
     * @type {DeviceType}
     * @memberof Device
     */
    'type'?: DeviceType;
    /**
     * 
     * @type {ControlDeviceType}
     * @memberof Device
     */
    'controlDeviceType'?: ControlDeviceType;
    /**
     * 
     * @type {SensorDeviceType}
     * @memberof Device
     */
    'sensorDeviceType'?: SensorDeviceType;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'fetchedTime'?: string | null;
    /**
     * 
     * @type {Array<DeviceBindRelation>}
     * @memberof Device
     */
    'deviceBindRelations'?: Array<DeviceBindRelation> | null;
    /**
     * 
     * @type {boolean}
     * @memberof Device
     */
    'isControlDeviceWorking'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof Device
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Device
     */
    'isDelete'?: boolean;
}
/**
 * 
 * @export
 * @interface DeviceAutoControlEventDto
 */
export interface DeviceAutoControlEventDto {
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlEventDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DeviceAutoControlEventDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceAutoControlEventDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceAutoControlEventDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceAutoControlEventDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlEventDto
     */
    'deviceId'?: number;
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlEventDto
     */
    'triggerId'?: number;
    /**
     * 
     * @type {DeviceDto}
     * @memberof DeviceAutoControlEventDto
     */
    'device'?: DeviceDto;
    /**
     * 
     * @type {ControlType}
     * @memberof DeviceAutoControlEventDto
     */
    'controlType'?: ControlType;
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlEventDto
     */
    'valueToWrite'?: number;
}
/**
 * 
 * @export
 * @interface DeviceAutoControlEventDtoSearchResponseDto
 */
export interface DeviceAutoControlEventDtoSearchResponseDto {
    /**
     * 
     * @type {Array<DeviceAutoControlEventDto>}
     * @memberof DeviceAutoControlEventDtoSearchResponseDto
     */
    'list'?: Array<DeviceAutoControlEventDto> | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlEventDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface DeviceAutoControlEventRemoveParams
 */
export interface DeviceAutoControlEventRemoveParams {
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlEventRemoveParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface DeviceAutoControlEventSaveParams
 */
export interface DeviceAutoControlEventSaveParams {
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlEventSaveParams
     */
    'deviceId': number;
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlEventSaveParams
     */
    'triggerId': number;
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlEventSaveParams
     */
    'valueToWrite'?: number | null;
    /**
     * 
     * @type {ControlType}
     * @memberof DeviceAutoControlEventSaveParams
     */
    'controlType': ControlType;
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlEventSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceAutoControlEventSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceAutoControlEventSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @interface DeviceAutoControlTriggerDto
 */
export interface DeviceAutoControlTriggerDto {
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlTriggerDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DeviceAutoControlTriggerDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceAutoControlTriggerDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceAutoControlTriggerDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceAutoControlTriggerDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlTriggerDto
     */
    'deviceId'?: number;
    /**
     * 
     * @type {DeviceDto}
     * @memberof DeviceAutoControlTriggerDto
     */
    'device'?: DeviceDto;
    /**
     * 
     * @type {DeviceAutoControlTriggerType}
     * @memberof DeviceAutoControlTriggerDto
     */
    'type'?: DeviceAutoControlTriggerType;
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlTriggerDto
     */
    'moreThan'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlTriggerDto
     */
    'lessThan'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlTriggerDto
     */
    'hour'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlTriggerDto
     */
    'time'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceAutoControlTriggerDto
     */
    'isEnable'?: boolean;
    /**
     * 
     * @type {Array<DeviceAutoControlEventDto>}
     * @memberof DeviceAutoControlTriggerDto
     */
    'deviceAutoControlEvents'?: Array<DeviceAutoControlEventDto> | null;
}
/**
 * 
 * @export
 * @interface DeviceAutoControlTriggerDtoSearchResponseDto
 */
export interface DeviceAutoControlTriggerDtoSearchResponseDto {
    /**
     * 
     * @type {Array<DeviceAutoControlTriggerDto>}
     * @memberof DeviceAutoControlTriggerDtoSearchResponseDto
     */
    'list'?: Array<DeviceAutoControlTriggerDto> | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlTriggerDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface DeviceAutoControlTriggerRemoveParams
 */
export interface DeviceAutoControlTriggerRemoveParams {
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlTriggerRemoveParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface DeviceAutoControlTriggerSaveParams
 */
export interface DeviceAutoControlTriggerSaveParams {
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlTriggerSaveParams
     */
    'deviceId'?: number;
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlTriggerSaveParams
     */
    'moreThan'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlTriggerSaveParams
     */
    'lessThan'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlTriggerSaveParams
     */
    'hour'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlTriggerSaveParams
     */
    'time'?: number | null;
    /**
     * 
     * @type {DeviceAutoControlTriggerType}
     * @memberof DeviceAutoControlTriggerSaveParams
     */
    'type': DeviceAutoControlTriggerType;
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlTriggerSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceAutoControlTriggerSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceAutoControlTriggerSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const DeviceAutoControlTriggerType = {
    时间触发: '时间触发',
    条件触发: '条件触发'
} as const;

export type DeviceAutoControlTriggerType = typeof DeviceAutoControlTriggerType[keyof typeof DeviceAutoControlTriggerType];


/**
 * 
 * @export
 * @interface DeviceAutoControlTriggerUpdateEnableParams
 */
export interface DeviceAutoControlTriggerUpdateEnableParams {
    /**
     * 
     * @type {boolean}
     * @memberof DeviceAutoControlTriggerUpdateEnableParams
     */
    'isEnable': boolean;
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlTriggerUpdateEnableParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface DeviceBindRelation
 */
export interface DeviceBindRelation {
    /**
     * 
     * @type {number}
     * @memberof DeviceBindRelation
     */
    'pondId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceBindRelation
     */
    'deviceId'?: number;
    /**
     * 
     * @type {Pond}
     * @memberof DeviceBindRelation
     */
    'pond'?: Pond;
    /**
     * 
     * @type {Device}
     * @memberof DeviceBindRelation
     */
    'device'?: Device;
    /**
     * 
     * @type {number}
     * @memberof DeviceBindRelation
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DeviceBindRelation
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceBindRelation
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceBindRelation
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceBindRelation
     */
    'isDelete'?: boolean;
}
/**
 * 
 * @export
 * @interface DeviceBindRelationDto
 */
export interface DeviceBindRelationDto {
    /**
     * 
     * @type {number}
     * @memberof DeviceBindRelationDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DeviceBindRelationDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceBindRelationDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceBindRelationDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceBindRelationDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof DeviceBindRelationDto
     */
    'pondId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceBindRelationDto
     */
    'deviceId'?: number;
    /**
     * 
     * @type {PondDto}
     * @memberof DeviceBindRelationDto
     */
    'pond'?: PondDto;
    /**
     * 
     * @type {DeviceDto}
     * @memberof DeviceBindRelationDto
     */
    'device'?: DeviceDto;
}
/**
 * 
 * @export
 * @interface DeviceDto
 */
export interface DeviceDto {
    /**
     * 
     * @type {number}
     * @memberof DeviceDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'sn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'turnOffAbilityName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'fetchedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'turnOnAbilityName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'readAbilityName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'groupName'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceDto
     */
    'controlable'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceDto
     */
    'userGroupId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceDto
     */
    'yunPlcDeviceId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'sensorFpId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'remark'?: string | null;
    /**
     * 
     * @type {WaterQualityType}
     * @memberof DeviceDto
     */
    'sensorType'?: WaterQualityType;
    /**
     * 
     * @type {DeviceType}
     * @memberof DeviceDto
     */
    'type'?: DeviceType;
    /**
     * 
     * @type {ControlMethod}
     * @memberof DeviceDto
     */
    'controlMethod'?: ControlMethod;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'alias'?: string | null;
    /**
     * 
     * @type {ControlDeviceType}
     * @memberof DeviceDto
     */
    'controlDeviceType'?: ControlDeviceType;
    /**
     * 
     * @type {SensorDeviceType}
     * @memberof DeviceDto
     */
    'sensorDeviceType'?: SensorDeviceType;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceDto
     */
    'isControlDeviceWorking'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceDto
     */
    'rawValue'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceDto
     */
    'sensorUnit'?: string | null;
    /**
     * 
     * @type {Array<DeviceBindRelationDto>}
     * @memberof DeviceDto
     */
    'deviceBindRelations'?: Array<DeviceBindRelationDto> | null;
}
/**
 * 
 * @export
 * @interface DeviceDtoSearchResponseDto
 */
export interface DeviceDtoSearchResponseDto {
    /**
     * 
     * @type {Array<DeviceDto>}
     * @memberof DeviceDtoSearchResponseDto
     */
    'list'?: Array<DeviceDto> | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface DeviceRemoveParams
 */
export interface DeviceRemoveParams {
    /**
     * 
     * @type {number}
     * @memberof DeviceRemoveParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface DeviceSaveParams
 */
export interface DeviceSaveParams {
    /**
     * 
     * @type {string}
     * @memberof DeviceSaveParams
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceSaveParams
     */
    'sn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceSaveParams
     */
    'alias'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceSaveParams
     */
    'remark'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceSaveParams
     */
    'yunPlcDeviceId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceSaveParams
     */
    'readAbilityName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceSaveParams
     */
    'turnOffAbilityName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceSaveParams
     */
    'turnOnAbilityName'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceSaveParams
     */
    'controlable'?: boolean | null;
    /**
     * 
     * @type {DeviceType}
     * @memberof DeviceSaveParams
     */
    'type': DeviceType;
    /**
     * 
     * @type {string}
     * @memberof DeviceSaveParams
     */
    'sensorFpId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceSaveParams
     */
    'sensorUnit'?: string | null;
    /**
     * 
     * @type {ControlDeviceType}
     * @memberof DeviceSaveParams
     */
    'controlDeviceType'?: ControlDeviceType;
    /**
     * 
     * @type {WaterQualityType}
     * @memberof DeviceSaveParams
     */
    'sensorType'?: WaterQualityType;
    /**
     * 
     * @type {ControlMethod}
     * @memberof DeviceSaveParams
     */
    'controlMethod'?: ControlMethod;
    /**
     * 
     * @type {SensorDeviceType}
     * @memberof DeviceSaveParams
     */
    'sensorDeviceType'?: SensorDeviceType;
    /**
     * 
     * @type {number}
     * @memberof DeviceSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @interface DeviceTurnOffParams
 */
export interface DeviceTurnOffParams {
    /**
     * 
     * @type {number}
     * @memberof DeviceTurnOffParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface DeviceTurnOnParams
 */
export interface DeviceTurnOnParams {
    /**
     * 
     * @type {number}
     * @memberof DeviceTurnOnParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const DeviceType = {
    控制设备: '控制设备',
    传感器: '传感器',
    流量计: '流量计'
} as const;

export type DeviceType = typeof DeviceType[keyof typeof DeviceType];


/**
 * 
 * @export
 * @interface DeviceUpdatePondParams
 */
export interface DeviceUpdatePondParams {
    /**
     * 
     * @type {Array<number>}
     * @memberof DeviceUpdatePondParams
     */
    'pondIdList': Array<number>;
    /**
     * 
     * @type {number}
     * @memberof DeviceUpdatePondParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface DeviceUpdateValueParams
 */
export interface DeviceUpdateValueParams {
    /**
     * 
     * @type {number}
     * @memberof DeviceUpdateValueParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const DeviceValueType = {
    开关量: '开关量',
    整数: '整数',
    浮点数: '浮点数',
    未知: '未知'
} as const;

export type DeviceValueType = typeof DeviceValueType[keyof typeof DeviceValueType];


/**
 * 
 * @export
 * @interface DeviceWriteValueParams
 */
export interface DeviceWriteValueParams {
    /**
     * 
     * @type {number}
     * @memberof DeviceWriteValueParams
     */
    'value': number;
    /**
     * 
     * @type {number}
     * @memberof DeviceWriteValueParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface DiseaseRuleDto
 */
export interface DiseaseRuleDto {
    /**
     * 
     * @type {number}
     * @memberof DiseaseRuleDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DiseaseRuleDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof DiseaseRuleDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DiseaseRuleDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DiseaseRuleDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DiseaseRuleDto
     */
    'imageUrl'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof DiseaseRuleDto
     */
    'cultureRuleId'?: number;
    /**
     * 
     * @type {string}
     * @memberof DiseaseRuleDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DiseaseRuleDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DiseaseRuleDto
     */
    'solution'?: string | null;
    /**
     * 
     * @type {CultureRuleDto}
     * @memberof DiseaseRuleDto
     */
    'cultureRule'?: CultureRuleDto;
}
/**
 * 
 * @export
 * @interface DiseaseRuleDtoSearchResponseDto
 */
export interface DiseaseRuleDtoSearchResponseDto {
    /**
     * 
     * @type {Array<DiseaseRuleDto>}
     * @memberof DiseaseRuleDtoSearchResponseDto
     */
    'list'?: Array<DiseaseRuleDto> | null;
    /**
     * 
     * @type {number}
     * @memberof DiseaseRuleDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface DiseaseRuleSaveParams
 */
export interface DiseaseRuleSaveParams {
    /**
     * 
     * @type {number}
     * @memberof DiseaseRuleSaveParams
     */
    'cultureRuleId': number;
    /**
     * 
     * @type {string}
     * @memberof DiseaseRuleSaveParams
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DiseaseRuleSaveParams
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof DiseaseRuleSaveParams
     */
    'solution': string;
    /**
     * 
     * @type {number}
     * @memberof DiseaseRuleSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof DiseaseRuleSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DiseaseRuleSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Gender = {
    男: '男',
    女: '女'
} as const;

export type Gender = typeof Gender[keyof typeof Gender];


/**
 * 
 * @export
 * @interface MaterialDto
 */
export interface MaterialDto {
    /**
     * 
     * @type {number}
     * @memberof MaterialDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MaterialDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof MaterialDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MaterialDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof MaterialDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MaterialDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MaterialDto
     */
    'remark'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MaterialDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MaterialDto
     */
    'typeId'?: number;
    /**
     * 
     * @type {MaterialTypeDto}
     * @memberof MaterialDto
     */
    'type'?: MaterialTypeDto;
}
/**
 * 
 * @export
 * @interface MaterialDtoSearchResponseDto
 */
export interface MaterialDtoSearchResponseDto {
    /**
     * 
     * @type {Array<MaterialDto>}
     * @memberof MaterialDtoSearchResponseDto
     */
    'list'?: Array<MaterialDto> | null;
    /**
     * 
     * @type {number}
     * @memberof MaterialDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface MaterialSaveParams
 */
export interface MaterialSaveParams {
    /**
     * 
     * @type {string}
     * @memberof MaterialSaveParams
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MaterialSaveParams
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MaterialSaveParams
     */
    'typeId': number;
    /**
     * 
     * @type {number}
     * @memberof MaterialSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof MaterialSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MaterialSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @interface MaterialTypeDto
 */
export interface MaterialTypeDto {
    /**
     * 
     * @type {number}
     * @memberof MaterialTypeDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MaterialTypeDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof MaterialTypeDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MaterialTypeDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof MaterialTypeDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MaterialTypeDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MaterialTypeDto
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface MaterialTypeDtoSearchResponseDto
 */
export interface MaterialTypeDtoSearchResponseDto {
    /**
     * 
     * @type {Array<MaterialTypeDto>}
     * @memberof MaterialTypeDtoSearchResponseDto
     */
    'list'?: Array<MaterialTypeDto> | null;
    /**
     * 
     * @type {number}
     * @memberof MaterialTypeDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface MaterialTypeRemoveParams
 */
export interface MaterialTypeRemoveParams {
    /**
     * 
     * @type {number}
     * @memberof MaterialTypeRemoveParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface MaterialTypeSaveParams
 */
export interface MaterialTypeSaveParams {
    /**
     * 
     * @type {string}
     * @memberof MaterialTypeSaveParams
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MaterialTypeSaveParams
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MaterialTypeSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof MaterialTypeSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MaterialTypeSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @interface NotificationDto
 */
export interface NotificationDto {
    /**
     * 
     * @type {number}
     * @memberof NotificationDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NotificationDto
     */
    'content'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof NotificationDto
     */
    'creatorId'?: number;
    /**
     * 
     * @type {UserDto}
     * @memberof NotificationDto
     */
    'creator'?: UserDto;
}
/**
 * 
 * @export
 * @interface NotificationDtoSearchResponseDto
 */
export interface NotificationDtoSearchResponseDto {
    /**
     * 
     * @type {Array<NotificationDto>}
     * @memberof NotificationDtoSearchResponseDto
     */
    'list'?: Array<NotificationDto> | null;
    /**
     * 
     * @type {number}
     * @memberof NotificationDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface NotificationSaveParams
 */
export interface NotificationSaveParams {
    /**
     * 
     * @type {string}
     * @memberof NotificationSaveParams
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof NotificationSaveParams
     */
    'content': string;
    /**
     * 
     * @type {number}
     * @memberof NotificationSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @interface OperateResultDto
 */
export interface OperateResultDto {
    /**
     * 
     * @type {ApiExceptionCode}
     * @memberof OperateResultDto
     */
    'code'?: ApiExceptionCode;
    /**
     * 
     * @type {boolean}
     * @memberof OperateResultDto
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OperateResultDto
     */
    'message'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof OperateResultDto
     */
    'info'?: any | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const PeriodUnitType = {
    分钟: '分钟',
    小时: '小时',
    天: '天'
} as const;

export type PeriodUnitType = typeof PeriodUnitType[keyof typeof PeriodUnitType];


/**
 * 
 * @export
 * @interface Pond
 */
export interface Pond {
    /**
     * 
     * @type {string}
     * @memberof Pond
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Pond
     */
    'length'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pond
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pond
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof Pond
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof Pond
     */
    'waterBody'?: string | null;
    /**
     * 
     * @type {PondType}
     * @memberof Pond
     */
    'type'?: PondType;
    /**
     * 
     * @type {CultureInfo}
     * @memberof Pond
     */
    'cultureInfo'?: CultureInfo;
    /**
     * 
     * @type {number}
     * @memberof Pond
     */
    'userGroupId'?: number | null;
    /**
     * 
     * @type {UserGroup}
     * @memberof Pond
     */
    'userGroup'?: UserGroup;
    /**
     * 
     * @type {PondGroupToPond}
     * @memberof Pond
     */
    'pondGroupToPond'?: PondGroupToPond;
    /**
     * 
     * @type {Array<DeviceBindRelation>}
     * @memberof Pond
     */
    'deviceBindRelations'?: Array<DeviceBindRelation> | null;
    /**
     * 
     * @type {number}
     * @memberof Pond
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Pond
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Pond
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Pond
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Pond
     */
    'isDelete'?: boolean;
}
/**
 * 
 * @export
 * @interface PondCountInfo
 */
export interface PondCountInfo {
    /**
     * 
     * @type {number}
     * @memberof PondCountInfo
     */
    'pondId'?: number;
    /**
     * 
     * @type {number}
     * @memberof PondCountInfo
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface PondDto
 */
export interface PondDto {
    /**
     * 
     * @type {number}
     * @memberof PondDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PondDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof PondDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PondDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PondDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PondDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PondDto
     */
    'length'?: number;
    /**
     * 
     * @type {number}
     * @memberof PondDto
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof PondDto
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof PondDto
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PondDto
     */
    'waterBody'?: string | null;
    /**
     * 
     * @type {PondType}
     * @memberof PondDto
     */
    'type'?: PondType;
    /**
     * 
     * @type {CultureInfo}
     * @memberof PondDto
     */
    'cultureInfo'?: CultureInfo;
    /**
     * 
     * @type {number}
     * @memberof PondDto
     */
    'userGroupId'?: number | null;
    /**
     * 
     * @type {UserGroupDto}
     * @memberof PondDto
     */
    'userGroup'?: UserGroupDto;
    /**
     * 
     * @type {PondGroupToPondDto}
     * @memberof PondDto
     */
    'pondGroupToPond'?: PondGroupToPondDto;
}
/**
 * 
 * @export
 * @interface PondDtoSearchResponseDto
 */
export interface PondDtoSearchResponseDto {
    /**
     * 
     * @type {Array<PondDto>}
     * @memberof PondDtoSearchResponseDto
     */
    'list'?: Array<PondDto> | null;
    /**
     * 
     * @type {number}
     * @memberof PondDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface PondGroup
 */
export interface PondGroup {
    /**
     * 
     * @type {string}
     * @memberof PondGroup
     */
    'name'?: string | null;
    /**
     * 
     * @type {CultureInfo}
     * @memberof PondGroup
     */
    'cultureInfo'?: CultureInfo;
    /**
     * 
     * @type {Array<PondGroupToPond>}
     * @memberof PondGroup
     */
    'pondGroupToPonds'?: Array<PondGroupToPond> | null;
    /**
     * 
     * @type {WorkShopToPondGroup}
     * @memberof PondGroup
     */
    'workShopToPondGroup'?: WorkShopToPondGroup;
    /**
     * 
     * @type {number}
     * @memberof PondGroup
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PondGroup
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof PondGroup
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PondGroup
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PondGroup
     */
    'isDelete'?: boolean;
}
/**
 * 
 * @export
 * @interface PondGroupDto
 */
export interface PondGroupDto {
    /**
     * 
     * @type {number}
     * @memberof PondGroupDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PondGroupDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof PondGroupDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PondGroupDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PondGroupDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PondGroupDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<PondGroupToPondDto>}
     * @memberof PondGroupDto
     */
    'pondGroupToPonds'?: Array<PondGroupToPondDto> | null;
    /**
     * 
     * @type {WorkShopToPondGroupDto}
     * @memberof PondGroupDto
     */
    'workShopToPondGroup'?: WorkShopToPondGroupDto;
}
/**
 * 
 * @export
 * @interface PondGroupDtoSearchResponseDto
 */
export interface PondGroupDtoSearchResponseDto {
    /**
     * 
     * @type {Array<PondGroupDto>}
     * @memberof PondGroupDtoSearchResponseDto
     */
    'list'?: Array<PondGroupDto> | null;
    /**
     * 
     * @type {number}
     * @memberof PondGroupDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface PondGroupSaveParams
 */
export interface PondGroupSaveParams {
    /**
     * 
     * @type {string}
     * @memberof PondGroupSaveParams
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof PondGroupSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PondGroupSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PondGroupSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @interface PondGroupToPond
 */
export interface PondGroupToPond {
    /**
     * 
     * @type {number}
     * @memberof PondGroupToPond
     */
    'pondId'?: number;
    /**
     * 
     * @type {number}
     * @memberof PondGroupToPond
     */
    'pondGroupId'?: number;
    /**
     * 
     * @type {PondGroup}
     * @memberof PondGroupToPond
     */
    'pondGroup'?: PondGroup;
    /**
     * 
     * @type {Pond}
     * @memberof PondGroupToPond
     */
    'pond'?: Pond;
    /**
     * 
     * @type {number}
     * @memberof PondGroupToPond
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PondGroupToPond
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof PondGroupToPond
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PondGroupToPond
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PondGroupToPond
     */
    'isDelete'?: boolean;
}
/**
 * 
 * @export
 * @interface PondGroupToPondDto
 */
export interface PondGroupToPondDto {
    /**
     * 
     * @type {number}
     * @memberof PondGroupToPondDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PondGroupToPondDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof PondGroupToPondDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PondGroupToPondDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PondGroupToPondDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PondGroupToPondDto
     */
    'pondId'?: number;
    /**
     * 
     * @type {number}
     * @memberof PondGroupToPondDto
     */
    'pondGroupId'?: number;
    /**
     * 
     * @type {PondDto}
     * @memberof PondGroupToPondDto
     */
    'pond'?: PondDto;
    /**
     * 
     * @type {PondGroupDto}
     * @memberof PondGroupToPondDto
     */
    'pondGroup'?: PondGroupDto;
}
/**
 * 
 * @export
 * @interface PondGroupUpdatePondParams
 */
export interface PondGroupUpdatePondParams {
    /**
     * 
     * @type {Array<number>}
     * @memberof PondGroupUpdatePondParams
     */
    'pondIdList': Array<number>;
    /**
     * 
     * @type {number}
     * @memberof PondGroupUpdatePondParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface PondRemoveParams
 */
export interface PondRemoveParams {
    /**
     * 
     * @type {number}
     * @memberof PondRemoveParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface PondSaveParams
 */
export interface PondSaveParams {
    /**
     * 
     * @type {string}
     * @memberof PondSaveParams
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof PondSaveParams
     */
    'length': number;
    /**
     * 
     * @type {number}
     * @memberof PondSaveParams
     */
    'height': number;
    /**
     * 
     * @type {number}
     * @memberof PondSaveParams
     */
    'width': number;
    /**
     * 
     * @type {string}
     * @memberof PondSaveParams
     */
    'waterBody'?: string | null;
    /**
     * 
     * @type {PondType}
     * @memberof PondSaveParams
     */
    'type': PondType;
    /**
     * 
     * @type {number}
     * @memberof PondSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PondSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PondSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const PondType = {
    池塘: '池塘',
    苗床: '苗床'
} as const;

export type PondType = typeof PondType[keyof typeof PondType];


/**
 * 
 * @export
 * @enum {string}
 */

export const RepeatType = {
    不重复: '不重复',
    天: '天',
    小时: '小时'
} as const;

export type RepeatType = typeof RepeatType[keyof typeof RepeatType];


/**
 * 
 * @export
 * @interface SeedBatchDto
 */
export interface SeedBatchDto {
    /**
     * 
     * @type {number}
     * @memberof SeedBatchDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SeedBatchDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof SeedBatchDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SeedBatchDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof SeedBatchDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SeedBatchDto
     */
    'code'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SeedBatchDto
     */
    'breedId'?: number;
    /**
     * 
     * @type {number}
     * @memberof SeedBatchDto
     */
    'cultureBatchId'?: number | null;
    /**
     * 
     * @type {CultureBatchDto}
     * @memberof SeedBatchDto
     */
    'cultureBatch'?: CultureBatchDto;
    /**
     * 
     * @type {SeedBatchSourceType}
     * @memberof SeedBatchDto
     */
    'source'?: SeedBatchSourceType;
}
/**
 * 
 * @export
 * @interface SeedBatchDtoSearchResponseDto
 */
export interface SeedBatchDtoSearchResponseDto {
    /**
     * 
     * @type {Array<SeedBatchDto>}
     * @memberof SeedBatchDtoSearchResponseDto
     */
    'list'?: Array<SeedBatchDto> | null;
    /**
     * 
     * @type {number}
     * @memberof SeedBatchDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface SeedBatchSaveParams
 */
export interface SeedBatchSaveParams {
    /**
     * 
     * @type {string}
     * @memberof SeedBatchSaveParams
     */
    'code'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SeedBatchSaveParams
     */
    'breedId'?: number;
    /**
     * 
     * @type {number}
     * @memberof SeedBatchSaveParams
     */
    'cultureBatchId'?: number | null;
    /**
     * 
     * @type {SeedBatchSourceType}
     * @memberof SeedBatchSaveParams
     */
    'source'?: SeedBatchSourceType;
    /**
     * 
     * @type {number}
     * @memberof SeedBatchSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof SeedBatchSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SeedBatchSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const SeedBatchSourceType = {
    采购: '采购',
    自产: '自产'
} as const;

export type SeedBatchSourceType = typeof SeedBatchSourceType[keyof typeof SeedBatchSourceType];


/**
 * 
 * @export
 * @interface Sensor
 */
export interface Sensor {
    /**
     * 
     * @type {string}
     * @memberof Sensor
     */
    'code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Sensor
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Sensor
     */
    'dissolvedOxygen'?: number;
    /**
     * 
     * @type {number}
     * @memberof Sensor
     */
    'temperature'?: number;
    /**
     * 
     * @type {number}
     * @memberof Sensor
     */
    'ammoniaNitrogen'?: number;
    /**
     * 
     * @type {number}
     * @memberof Sensor
     */
    'orp'?: number;
    /**
     * 
     * @type {number}
     * @memberof Sensor
     */
    'salinity'?: number;
    /**
     * 
     * @type {number}
     * @memberof Sensor
     */
    'ph'?: number;
    /**
     * 
     * @type {number}
     * @memberof Sensor
     */
    'turbidity'?: number;
    /**
     * 
     * @type {number}
     * @memberof Sensor
     */
    'waterDeep'?: number;
    /**
     * 
     * @type {number}
     * @memberof Sensor
     */
    'conductivity'?: number;
    /**
     * 
     * @type {number}
     * @memberof Sensor
     */
    'valveAngle'?: number;
    /**
     * 
     * @type {string}
     * @memberof Sensor
     */
    'updatedTime'?: string;
    /**
     * 
     * @type {SensorType}
     * @memberof Sensor
     */
    'type'?: SensorType;
    /**
     * 
     * @type {string}
     * @memberof Sensor
     */
    'controlStatus'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Sensor
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Sensor
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Sensor
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Sensor
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Sensor
     */
    'isDelete'?: boolean;
}
/**
 * 
 * @export
 * @interface SensorDataDto
 */
export interface SensorDataDto {
    /**
     * 
     * @type {string}
     * @memberof SensorDataDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof SensorDataDto
     */
    'value'?: number;
    /**
     * 
     * @type {SensorValueType}
     * @memberof SensorDataDto
     */
    'type'?: SensorValueType;
}
/**
 * 
 * @export
 * @interface SensorDataDtoSearchResponseDto
 */
export interface SensorDataDtoSearchResponseDto {
    /**
     * 
     * @type {Array<SensorDataDto>}
     * @memberof SensorDataDtoSearchResponseDto
     */
    'list'?: Array<SensorDataDto> | null;
    /**
     * 
     * @type {number}
     * @memberof SensorDataDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const SensorDeviceType = {
    五参数: '五参数',
    三参数: '三参数'
} as const;

export type SensorDeviceType = typeof SensorDeviceType[keyof typeof SensorDeviceType];


/**
 * 
 * @export
 * @interface SensorHistoryDto
 */
export interface SensorHistoryDto {
    /**
     * 
     * @type {number}
     * @memberof SensorHistoryDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SensorHistoryDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof SensorHistoryDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SensorHistoryDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof SensorHistoryDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SensorHistoryDto
     */
    'value'?: number;
    /**
     * 
     * @type {number}
     * @memberof SensorHistoryDto
     */
    'deviceId'?: number;
    /**
     * 
     * @type {DeviceDto}
     * @memberof SensorHistoryDto
     */
    'device'?: DeviceDto;
    /**
     * 
     * @type {WaterQualityType}
     * @memberof SensorHistoryDto
     */
    'type'?: WaterQualityType;
}
/**
 * 
 * @export
 * @interface SensorHistoryDtoSearchResponseDto
 */
export interface SensorHistoryDtoSearchResponseDto {
    /**
     * 
     * @type {Array<SensorHistoryDto>}
     * @memberof SensorHistoryDtoSearchResponseDto
     */
    'list'?: Array<SensorHistoryDto> | null;
    /**
     * 
     * @type {number}
     * @memberof SensorHistoryDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface SensorHistorySaveParams
 */
export interface SensorHistorySaveParams {
    /**
     * 
     * @type {number}
     * @memberof SensorHistorySaveParams
     */
    'deviceId': number;
    /**
     * 
     * @type {number}
     * @memberof SensorHistorySaveParams
     */
    'value': number;
    /**
     * 
     * @type {number}
     * @memberof SensorHistorySaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof SensorHistorySaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SensorHistorySaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @interface SensorSearchResponse
 */
export interface SensorSearchResponse {
    /**
     * 
     * @type {Array<Sensor>}
     * @memberof SensorSearchResponse
     */
    'list'?: Array<Sensor> | null;
    /**
     * 
     * @type {number}
     * @memberof SensorSearchResponse
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface SensorSocketBroadCastModel
 */
export interface SensorSocketBroadCastModel {
    /**
     * 
     * @type {string}
     * @memberof SensorSocketBroadCastModel
     */
    'message'?: string | null;
}
/**
 * 
 * @export
 * @interface SensorSocketOperateModel
 */
export interface SensorSocketOperateModel {
    /**
     * 
     * @type {string}
     * @memberof SensorSocketOperateModel
     */
    'sn': string;
    /**
     * 
     * @type {number}
     * @memberof SensorSocketOperateModel
     */
    'channelNumber': number;
}
/**
 * 
 * @export
 * @interface SensorSocketSendCommandModel
 */
export interface SensorSocketSendCommandModel {
    /**
     * 
     * @type {string}
     * @memberof SensorSocketSendCommandModel
     */
    'sn': string;
    /**
     * 
     * @type {string}
     * @memberof SensorSocketSendCommandModel
     */
    'commandPrefix': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const SensorType = {
    水质传感器: '水质传感器',
    控制传感器: '控制传感器'
} as const;

export type SensorType = typeof SensorType[keyof typeof SensorType];


/**
 * 
 * @export
 * @enum {string}
 */

export const SensorValueType = {
    温度: '温度',
    溶解氧: '溶解氧',
    氨氮: '氨氮',
    Orp: 'Orp',
    Ph: 'Ph',
    浊度: '浊度',
    电导率: '电导率',
    盐度: '盐度',
    水深: '水深',
    电磁阀: '电磁阀'
} as const;

export type SensorValueType = typeof SensorValueType[keyof typeof SensorValueType];


/**
 * 
 * @export
 * @enum {string}
 */

export const SorterOrder = {
    Desc: 'Desc',
    Asc: 'Asc'
} as const;

export type SorterOrder = typeof SorterOrder[keyof typeof SorterOrder];


/**
 * 
 * @export
 * @interface StoreRecordDto
 */
export interface StoreRecordDto {
    /**
     * 
     * @type {number}
     * @memberof StoreRecordDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof StoreRecordDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof StoreRecordDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StoreRecordDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof StoreRecordDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StoreRecordDto
     */
    'code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StoreRecordDto
     */
    'remark'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StoreRecordDto
     */
    'purpose'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StoreRecordDto
     */
    'companyName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof StoreRecordDto
     */
    'unitPrice'?: number | null;
    /**
     * 
     * @type {StoreRecordType}
     * @memberof StoreRecordDto
     */
    'type'?: StoreRecordType;
    /**
     * 
     * @type {number}
     * @memberof StoreRecordDto
     */
    'count'?: number;
    /**
     * 
     * @type {number}
     * @memberof StoreRecordDto
     */
    'operatorId'?: number;
    /**
     * 
     * @type {number}
     * @memberof StoreRecordDto
     */
    'materialId'?: number;
    /**
     * 
     * @type {MaterialDto}
     * @memberof StoreRecordDto
     */
    'material'?: MaterialDto;
    /**
     * 
     * @type {UserDto}
     * @memberof StoreRecordDto
     */
    'operator'?: UserDto;
}
/**
 * 
 * @export
 * @interface StoreRecordDtoSearchResponseDto
 */
export interface StoreRecordDtoSearchResponseDto {
    /**
     * 
     * @type {Array<StoreRecordDto>}
     * @memberof StoreRecordDtoSearchResponseDto
     */
    'list'?: Array<StoreRecordDto> | null;
    /**
     * 
     * @type {number}
     * @memberof StoreRecordDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface StoreRecordSaveParams
 */
export interface StoreRecordSaveParams {
    /**
     * 
     * @type {string}
     * @memberof StoreRecordSaveParams
     */
    'remark'?: string | null;
    /**
     * 
     * @type {StoreRecordType}
     * @memberof StoreRecordSaveParams
     */
    'type': StoreRecordType;
    /**
     * 
     * @type {number}
     * @memberof StoreRecordSaveParams
     */
    'materialId': number;
    /**
     * 
     * @type {number}
     * @memberof StoreRecordSaveParams
     */
    'operatorId': number;
    /**
     * 
     * @type {number}
     * @memberof StoreRecordSaveParams
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof StoreRecordSaveParams
     */
    'unitPrice'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof StoreRecordSaveParams
     */
    'companyName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StoreRecordSaveParams
     */
    'purpose'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof StoreRecordSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof StoreRecordSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StoreRecordSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const StoreRecordType = {
    入库: '入库',
    出库: '出库'
} as const;

export type StoreRecordType = typeof StoreRecordType[keyof typeof StoreRecordType];


/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'body'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Token
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'expiredTime'?: string;
    /**
     * 
     * @type {User}
     * @memberof Token
     */
    'user'?: User;
    /**
     * 
     * @type {number}
     * @memberof Token
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Token
     */
    'isDelete'?: boolean;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'password'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'deviceAppOnly'?: boolean;
    /**
     * 
     * @type {UserRole}
     * @memberof User
     */
    'role'?: UserRole;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'userGroupId'?: number | null;
    /**
     * 
     * @type {UserGroup}
     * @memberof User
     */
    'userGroup'?: UserGroup;
    /**
     * 
     * @type {Gender}
     * @memberof User
     */
    'gender'?: Gender;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'isDelete'?: boolean;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'password'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserDto
     */
    'deviceAppOnly'?: boolean;
    /**
     * 
     * @type {UserRole}
     * @memberof UserDto
     */
    'role'?: UserRole;
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    'userGroupId'?: number | null;
    /**
     * 
     * @type {UserGroupDto}
     * @memberof UserDto
     */
    'userGroup'?: UserGroupDto;
}
/**
 * 
 * @export
 * @interface UserDtoSearchResponseDto
 */
export interface UserDtoSearchResponseDto {
    /**
     * 
     * @type {Array<UserDto>}
     * @memberof UserDtoSearchResponseDto
     */
    'list'?: Array<UserDto> | null;
    /**
     * 
     * @type {number}
     * @memberof UserDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface UserGroup
 */
export interface UserGroup {
    /**
     * 
     * @type {string}
     * @memberof UserGroup
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserGroup
     */
    'indexPath'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserGroup
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserGroup
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserGroup
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserGroup
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserGroup
     */
    'isDelete'?: boolean;
}
/**
 * 
 * @export
 * @interface UserGroupDto
 */
export interface UserGroupDto {
    /**
     * 
     * @type {string}
     * @memberof UserGroupDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserGroupDto
     */
    'indexPath'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserGroupDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserGroupDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserGroupDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserGroupDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserGroupDto
     */
    'isDelete'?: boolean;
}
/**
 * 
 * @export
 * @interface UserGroupDtoSearchResponseDto
 */
export interface UserGroupDtoSearchResponseDto {
    /**
     * 
     * @type {Array<UserGroupDto>}
     * @memberof UserGroupDtoSearchResponseDto
     */
    'list'?: Array<UserGroupDto> | null;
    /**
     * 
     * @type {number}
     * @memberof UserGroupDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface UserGroupSaveParams
 */
export interface UserGroupSaveParams {
    /**
     * 
     * @type {string}
     * @memberof UserGroupSaveParams
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UserGroupSaveParams
     */
    'indexPath': string;
    /**
     * 
     * @type {number}
     * @memberof UserGroupSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserGroupSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserGroupSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const UserRole = {
    管理员: '管理员',
    生产队长: '生产队长',
    养殖人员: '养殖人员'
} as const;

export type UserRole = typeof UserRole[keyof typeof UserRole];


/**
 * 
 * @export
 * @interface UserSaveParams
 */
export interface UserSaveParams {
    /**
     * 
     * @type {string}
     * @memberof UserSaveParams
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserSaveParams
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UserSaveParams
     */
    'password': string;
    /**
     * 
     * @type {UserRole}
     * @memberof UserSaveParams
     */
    'role': UserRole;
    /**
     * 
     * @type {number}
     * @memberof UserSaveParams
     */
    'userGroupId': number;
    /**
     * 
     * @type {number}
     * @memberof UserSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @interface WaterAlertRuleDto
 */
export interface WaterAlertRuleDto {
    /**
     * 
     * @type {number}
     * @memberof WaterAlertRuleDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof WaterAlertRuleDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof WaterAlertRuleDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WaterAlertRuleDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof WaterAlertRuleDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof WaterAlertRuleDto
     */
    'cultureRuleId'?: number;
    /**
     * 
     * @type {number}
     * @memberof WaterAlertRuleDto
     */
    'ceiling'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof WaterAlertRuleDto
     */
    'floor'?: number | null;
    /**
     * 
     * @type {WaterQualityType}
     * @memberof WaterAlertRuleDto
     */
    'type'?: WaterQualityType;
    /**
     * 
     * @type {AlertLevel}
     * @memberof WaterAlertRuleDto
     */
    'level'?: AlertLevel;
    /**
     * 
     * @type {CultureRuleDto}
     * @memberof WaterAlertRuleDto
     */
    'cultureRule'?: CultureRuleDto;
}
/**
 * 
 * @export
 * @interface WaterAlertRuleDtoSearchResponseDto
 */
export interface WaterAlertRuleDtoSearchResponseDto {
    /**
     * 
     * @type {Array<WaterAlertRuleDto>}
     * @memberof WaterAlertRuleDtoSearchResponseDto
     */
    'list'?: Array<WaterAlertRuleDto> | null;
    /**
     * 
     * @type {number}
     * @memberof WaterAlertRuleDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface WaterAlertRuleSaveParams
 */
export interface WaterAlertRuleSaveParams {
    /**
     * 
     * @type {number}
     * @memberof WaterAlertRuleSaveParams
     */
    'cultureRuleId': number;
    /**
     * 
     * @type {number}
     * @memberof WaterAlertRuleSaveParams
     */
    'ceiling'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof WaterAlertRuleSaveParams
     */
    'floor'?: number | null;
    /**
     * 
     * @type {WaterQualityType}
     * @memberof WaterAlertRuleSaveParams
     */
    'type': WaterQualityType;
    /**
     * 
     * @type {AlertLevel}
     * @memberof WaterAlertRuleSaveParams
     */
    'level': AlertLevel;
    /**
     * 
     * @type {number}
     * @memberof WaterAlertRuleSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof WaterAlertRuleSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WaterAlertRuleSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WaterQualityType = {
    Ph: 'Ph',
    温度: '温度',
    溶解氧: '溶解氧',
    氨氮: '氨氮',
    Orp: 'Orp',
    盐度: '盐度',
    浊度: '浊度',
    流量: '流量'
} as const;

export type WaterQualityType = typeof WaterQualityType[keyof typeof WaterQualityType];


/**
 * 
 * @export
 * @interface WorkScheduleAutoCreateParams
 */
export interface WorkScheduleAutoCreateParams {
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleAutoCreateParams
     */
    'from': string;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleAutoCreateParams
     */
    'to': string;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleAutoCreateParams
     */
    'cultureBatchId': number;
}
/**
 * 
 * @export
 * @interface WorkScheduleBatchFinishFeedParam
 */
export interface WorkScheduleBatchFinishFeedParam {
    /**
     * 
     * @type {Array<WorkScheduleFinishFeedItem>}
     * @memberof WorkScheduleBatchFinishFeedParam
     */
    'list'?: Array<WorkScheduleFinishFeedItem> | null;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleBatchFinishFeedParam
     */
    'id'?: number | null;
    /**
     * 
     * @type {WorkType}
     * @memberof WorkScheduleBatchFinishFeedParam
     */
    'type'?: WorkType;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleBatchFinishFeedParam
     */
    'finishRemark'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleBatchFinishFeedParam
     */
    'finishTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleBatchFinishFeedParam
     */
    'cultureBatchId'?: number | null;
}
/**
 * 
 * @export
 * @interface WorkScheduleDto
 */
export interface WorkScheduleDto {
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof WorkScheduleDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {WorkType}
     * @memberof WorkScheduleDto
     */
    'type'?: WorkType;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleDto
     */
    'workerId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleDto
     */
    'dispatcherId'?: number;
    /**
     * 
     * @type {any}
     * @memberof WorkScheduleDto
     */
    'finishParameter'?: any | null;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleDto
     */
    'cultureBatchId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleDto
     */
    'pondId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleDto
     */
    'pondGroupId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleDto
     */
    'period'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof WorkScheduleDto
     */
    'isFullDay'?: boolean;
    /**
     * 
     * @type {PeriodUnitType}
     * @memberof WorkScheduleDto
     */
    'periodUnit'?: PeriodUnitType;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleDto
     */
    'scheduleTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleDto
     */
    'scheduleEndTime'?: string | null;
    /**
     * 
     * @type {WorkScheduleStatus}
     * @memberof WorkScheduleDto
     */
    'status'?: WorkScheduleStatus;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleDto
     */
    'finishRemark'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleDto
     */
    'finishTime'?: string | null;
    /**
     * 
     * @type {UserDto}
     * @memberof WorkScheduleDto
     */
    'worker'?: UserDto;
    /**
     * 
     * @type {PondDto}
     * @memberof WorkScheduleDto
     */
    'pond'?: PondDto;
    /**
     * 
     * @type {PondGroupDto}
     * @memberof WorkScheduleDto
     */
    'pondGroup'?: PondGroupDto;
    /**
     * 
     * @type {CultureBatchDto}
     * @memberof WorkScheduleDto
     */
    'cultureBatch'?: CultureBatchDto;
    /**
     * 
     * @type {boolean}
     * @memberof WorkScheduleDto
     */
    'isReadyToFinish'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleDto
     */
    'notReadyToFinishReason'?: string | null;
}
/**
 * 
 * @export
 * @interface WorkScheduleDtoSearchResponseDto
 */
export interface WorkScheduleDtoSearchResponseDto {
    /**
     * 
     * @type {Array<WorkScheduleDto>}
     * @memberof WorkScheduleDtoSearchResponseDto
     */
    'list'?: Array<WorkScheduleDto> | null;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface WorkScheduleFinishCheckParam
 */
export interface WorkScheduleFinishCheckParam {
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishCheckParam
     */
    'exceptions': string;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishCheckParam
     */
    'id'?: number | null;
    /**
     * 
     * @type {WorkType}
     * @memberof WorkScheduleFinishCheckParam
     */
    'type'?: WorkType;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishCheckParam
     */
    'finishRemark'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishCheckParam
     */
    'finishTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishCheckParam
     */
    'cultureBatchId'?: number | null;
}
/**
 * 
 * @export
 * @interface WorkScheduleFinishDeathReportParam
 */
export interface WorkScheduleFinishDeathReportParam {
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishDeathReportParam
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishDeathReportParam
     */
    'pondId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishDeathReportParam
     */
    'id'?: number | null;
    /**
     * 
     * @type {WorkType}
     * @memberof WorkScheduleFinishDeathReportParam
     */
    'type'?: WorkType;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishDeathReportParam
     */
    'finishRemark'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishDeathReportParam
     */
    'finishTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishDeathReportParam
     */
    'cultureBatchId'?: number | null;
}
/**
 * 
 * @export
 * @interface WorkScheduleFinishDeliverWaterInspectParam
 */
export interface WorkScheduleFinishDeliverWaterInspectParam {
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishDeliverWaterInspectParam
     */
    'inspectOrganization': string;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishDeliverWaterInspectParam
     */
    'id'?: number | null;
    /**
     * 
     * @type {WorkType}
     * @memberof WorkScheduleFinishDeliverWaterInspectParam
     */
    'type'?: WorkType;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishDeliverWaterInspectParam
     */
    'finishRemark'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishDeliverWaterInspectParam
     */
    'finishTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishDeliverWaterInspectParam
     */
    'cultureBatchId'?: number | null;
}
/**
 * 
 * @export
 * @interface WorkScheduleFinishFeedItem
 */
export interface WorkScheduleFinishFeedItem {
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishFeedItem
     */
    'materialId': number;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishFeedItem
     */
    'dosageUnit': string;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishFeedItem
     */
    'dosage': number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishFeedItem
     */
    'pondId': number;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishFeedItem
     */
    'finishTime': string;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishFeedItem
     */
    'id'?: number | null;
    /**
     * 
     * @type {WorkType}
     * @memberof WorkScheduleFinishFeedItem
     */
    'type'?: WorkType;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishFeedItem
     */
    'finishRemark'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishFeedItem
     */
    'cultureBatchId'?: number | null;
}
/**
 * 
 * @export
 * @interface WorkScheduleFinishFeedParam
 */
export interface WorkScheduleFinishFeedParam {
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishFeedParam
     */
    'materialId': number;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishFeedParam
     */
    'dosageUnit': string;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishFeedParam
     */
    'dosage': number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishFeedParam
     */
    'pondId': number;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishFeedParam
     */
    'finishTime': string;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishFeedParam
     */
    'id'?: number | null;
    /**
     * 
     * @type {WorkType}
     * @memberof WorkScheduleFinishFeedParam
     */
    'type'?: WorkType;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishFeedParam
     */
    'finishRemark'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishFeedParam
     */
    'cultureBatchId'?: number | null;
}
/**
 * 
 * @export
 * @interface WorkScheduleFinishFryParam
 */
export interface WorkScheduleFinishFryParam {
    /**
     * 
     * @type {Array<PondCountInfo>}
     * @memberof WorkScheduleFinishFryParam
     */
    'pondCountInfoList': Array<PondCountInfo>;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishFryParam
     */
    'id'?: number | null;
    /**
     * 
     * @type {WorkType}
     * @memberof WorkScheduleFinishFryParam
     */
    'type'?: WorkType;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishFryParam
     */
    'finishRemark'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishFryParam
     */
    'finishTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishFryParam
     */
    'cultureBatchId'?: number | null;
}
/**
 * 
 * @export
 * @interface WorkScheduleFinishLarvaeWeightParam
 */
export interface WorkScheduleFinishLarvaeWeightParam {
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishLarvaeWeightParam
     */
    'unitWeight': number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishLarvaeWeightParam
     */
    'weight': number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishLarvaeWeightParam
     */
    'pondId': number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishLarvaeWeightParam
     */
    'id'?: number | null;
    /**
     * 
     * @type {WorkType}
     * @memberof WorkScheduleFinishLarvaeWeightParam
     */
    'type'?: WorkType;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishLarvaeWeightParam
     */
    'finishRemark'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishLarvaeWeightParam
     */
    'finishTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishLarvaeWeightParam
     */
    'cultureBatchId'?: number | null;
}
/**
 * 
 * @export
 * @interface WorkScheduleFinishParams
 */
export interface WorkScheduleFinishParams {
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {WorkType}
     * @memberof WorkScheduleFinishParams
     */
    'type'?: WorkType;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishParams
     */
    'finishRemark'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishParams
     */
    'finishTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishParams
     */
    'cultureBatchId'?: number | null;
}
/**
 * 
 * @export
 * @interface WorkScheduleFinishPlantMeasureParam
 */
export interface WorkScheduleFinishPlantMeasureParam {
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishPlantMeasureParam
     */
    'averageHeight': number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishPlantMeasureParam
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishPlantMeasureParam
     */
    'id'?: number | null;
    /**
     * 
     * @type {WorkType}
     * @memberof WorkScheduleFinishPlantMeasureParam
     */
    'type'?: WorkType;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishPlantMeasureParam
     */
    'finishRemark'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishPlantMeasureParam
     */
    'finishTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishPlantMeasureParam
     */
    'cultureBatchId'?: number | null;
}
/**
 * 
 * @export
 * @interface WorkScheduleFinishPondSplitParam
 */
export interface WorkScheduleFinishPondSplitParam {
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishPondSplitParam
     */
    'count': number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishPondSplitParam
     */
    'minusPondId': number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishPondSplitParam
     */
    'addPondId': number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishPondSplitParam
     */
    'id'?: number | null;
    /**
     * 
     * @type {WorkType}
     * @memberof WorkScheduleFinishPondSplitParam
     */
    'type'?: WorkType;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishPondSplitParam
     */
    'finishRemark'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishPondSplitParam
     */
    'finishTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishPondSplitParam
     */
    'cultureBatchId'?: number | null;
}
/**
 * 
 * @export
 * @interface WorkScheduleFinishSewageParam
 */
export interface WorkScheduleFinishSewageParam {
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishSewageParam
     */
    'id'?: number | null;
    /**
     * 
     * @type {WorkType}
     * @memberof WorkScheduleFinishSewageParam
     */
    'type'?: WorkType;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishSewageParam
     */
    'finishRemark'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishSewageParam
     */
    'finishTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishSewageParam
     */
    'cultureBatchId'?: number | null;
}
/**
 * 
 * @export
 * @interface WorkScheduleFinishSproutParam
 */
export interface WorkScheduleFinishSproutParam {
    /**
     * 
     * @type {Array<WorkScheduleFinishSproutParamItem>}
     * @memberof WorkScheduleFinishSproutParam
     */
    'list'?: Array<WorkScheduleFinishSproutParamItem> | null;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishSproutParam
     */
    'cultureBatchId': number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishSproutParam
     */
    'id'?: number | null;
    /**
     * 
     * @type {WorkType}
     * @memberof WorkScheduleFinishSproutParam
     */
    'type'?: WorkType;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishSproutParam
     */
    'finishRemark'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishSproutParam
     */
    'finishTime'?: string;
}
/**
 * 
 * @export
 * @interface WorkScheduleFinishSproutParamItem
 */
export interface WorkScheduleFinishSproutParamItem {
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishSproutParamItem
     */
    'pondId'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishSproutParamItem
     */
    'count'?: number;
}
/**
 * 
 * @export
 * @interface WorkScheduleFinishWeightParam
 */
export interface WorkScheduleFinishWeightParam {
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishWeightParam
     */
    'pondId': number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishWeightParam
     */
    'averageWeight': number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishWeightParam
     */
    'averageLength': number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishWeightParam
     */
    'id'?: number | null;
    /**
     * 
     * @type {WorkType}
     * @memberof WorkScheduleFinishWeightParam
     */
    'type'?: WorkType;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishWeightParam
     */
    'finishRemark'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleFinishWeightParam
     */
    'finishTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleFinishWeightParam
     */
    'cultureBatchId'?: number | null;
}
/**
 * 
 * @export
 * @interface WorkScheduleRemoveParams
 */
export interface WorkScheduleRemoveParams {
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleRemoveParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface WorkScheduleSaveParams
 */
export interface WorkScheduleSaveParams {
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleSaveParams
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleSaveParams
     */
    'description'?: string | null;
    /**
     * 
     * @type {WorkType}
     * @memberof WorkScheduleSaveParams
     */
    'type': WorkType;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleSaveParams
     */
    'scheduleTime': string;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleSaveParams
     */
    'workerId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleSaveParams
     */
    'cultureBatchId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleSaveParams
     */
    'pondId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleSaveParams
     */
    'pondGroupId'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof WorkScheduleSaveParams
     */
    'isFullDay': boolean;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleSaveParams
     */
    'period'?: number;
    /**
     * 
     * @type {PeriodUnitType}
     * @memberof WorkScheduleSaveParams
     */
    'periodUnit'?: PeriodUnitType;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof WorkScheduleSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkScheduleSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WorkScheduleStatus = {
    已安排: '已安排',
    进行中: '进行中',
    已完成: '已完成'
} as const;

export type WorkScheduleStatus = typeof WorkScheduleStatus[keyof typeof WorkScheduleStatus];


/**
 * 
 * @export
 * @interface WorkScheduleWaterInspectParam
 */
export interface WorkScheduleWaterInspectParam {
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleWaterInspectParam
     */
    'ph'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleWaterInspectParam
     */
    'oxygen'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleWaterInspectParam
     */
    'ammoniaNitrogen'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleWaterInspectParam
     */
    'nitrite'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleWaterInspectParam
     */
    'hydrogenSulfide'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleWaterInspectParam
     */
    'totalAlkalinity'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleWaterInspectParam
     */
    'id'?: number | null;
    /**
     * 
     * @type {WorkType}
     * @memberof WorkScheduleWaterInspectParam
     */
    'type'?: WorkType;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleWaterInspectParam
     */
    'finishRemark'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkScheduleWaterInspectParam
     */
    'finishTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleWaterInspectParam
     */
    'cultureBatchId'?: number | null;
}
/**
 * 
 * @export
 * @interface WorkShop
 */
export interface WorkShop {
    /**
     * 
     * @type {string}
     * @memberof WorkShop
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkShop
     */
    'description'?: string | null;
    /**
     * 
     * @type {Array<WorkShopToPondGroup>}
     * @memberof WorkShop
     */
    'workShopToPondGroups'?: Array<WorkShopToPondGroup> | null;
    /**
     * 
     * @type {number}
     * @memberof WorkShop
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkShop
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkShop
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkShop
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof WorkShop
     */
    'isDelete'?: boolean;
}
/**
 * 
 * @export
 * @interface WorkShopDto
 */
export interface WorkShopDto {
    /**
     * 
     * @type {number}
     * @memberof WorkShopDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkShopDto
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkShopDto
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkShopDto
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof WorkShopDto
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WorkShopDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkShopDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {Array<WorkShopToPondGroupDto>}
     * @memberof WorkShopDto
     */
    'workShopToPondGroups'?: Array<WorkShopToPondGroupDto> | null;
}
/**
 * 
 * @export
 * @interface WorkShopDtoSearchResponseDto
 */
export interface WorkShopDtoSearchResponseDto {
    /**
     * 
     * @type {Array<WorkShopDto>}
     * @memberof WorkShopDtoSearchResponseDto
     */
    'list'?: Array<WorkShopDto> | null;
    /**
     * 
     * @type {number}
     * @memberof WorkShopDtoSearchResponseDto
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface WorkShopSaveParams
 */
export interface WorkShopSaveParams {
    /**
     * 
     * @type {string}
     * @memberof WorkShopSaveParams
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof WorkShopSaveParams
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof WorkShopSaveParams
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof WorkShopSaveParams
     */
    'isUpdate'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkShopSaveParams
     */
    'isAdd'?: boolean;
}
/**
 * 
 * @export
 * @interface WorkShopToPondGroup
 */
export interface WorkShopToPondGroup {
    /**
     * 
     * @type {number}
     * @memberof WorkShopToPondGroup
     */
    'pondGroupId'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkShopToPondGroup
     */
    'workShopId'?: number;
    /**
     * 
     * @type {WorkShop}
     * @memberof WorkShopToPondGroup
     */
    'workShop'?: WorkShop;
    /**
     * 
     * @type {PondGroup}
     * @memberof WorkShopToPondGroup
     */
    'pondGroup'?: PondGroup;
    /**
     * 
     * @type {number}
     * @memberof WorkShopToPondGroup
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkShopToPondGroup
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkShopToPondGroup
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkShopToPondGroup
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof WorkShopToPondGroup
     */
    'isDelete'?: boolean;
}
/**
 * 
 * @export
 * @interface WorkShopToPondGroupDto
 */
export interface WorkShopToPondGroupDto {
    /**
     * 
     * @type {number}
     * @memberof WorkShopToPondGroupDto
     */
    'pondGroupId'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkShopToPondGroupDto
     */
    'workShopId'?: number;
    /**
     * 
     * @type {WorkShopDto}
     * @memberof WorkShopToPondGroupDto
     */
    'workShop'?: WorkShopDto;
    /**
     * 
     * @type {PondGroupDto}
     * @memberof WorkShopToPondGroupDto
     */
    'pondGroup'?: PondGroupDto;
}
/**
 * 
 * @export
 * @interface WorkShopUpdatePondGroupParams
 */
export interface WorkShopUpdatePondGroupParams {
    /**
     * 
     * @type {Array<number>}
     * @memberof WorkShopUpdatePondGroupParams
     */
    'pondGroupIdList': Array<number>;
    /**
     * 
     * @type {number}
     * @memberof WorkShopUpdatePondGroupParams
     */
    'id': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WorkType = {
    投喂: '投喂',
    日常检查: '日常检查',
    测量体长体重: '测量体长体重',
    水样送检: '水样送检',
    养殖前清塘: '养殖前清塘',
    养殖前消毒: '养殖前消毒',
    养殖前刷塘: '养殖前刷塘',
    养殖前生物池冲洗: '养殖前生物池冲洗',
    养殖前检查清洗: '养殖前检查清洗',
    养殖前蒙网: '养殖前蒙网',
    排污: '排污',
    试苗: '试苗',
    放苗: '放苗',
    投放试剂: '投放试剂',
    排水: '排水',
    捕鱼暂养: '捕鱼暂养',
    分池: '分池',
    产道检验: '产道检验',
    受精任务: '受精任务',
    洗卵清洁: '洗卵清洁',
    亲本挑选: '亲本挑选',
    催产打针: '催产打针',
    仔鱼称重: '仔鱼称重',
    捕捞: '捕捞',
    其他: '其他',
    死亡记录: '死亡记录',
    批量投喂: '批量投喂',
    水质检验: '水质检验',
    种苗: '种苗',
    浇水: '浇水',
    施肥: '施肥',
    打药: '打药',
    刷洗青苔: '刷洗青苔',
    除草: '除草',
    疏盆: '疏盆',
    出货: '出货',
    测量生长信息: '测量生长信息'
} as const;

export type WorkType = typeof WorkType[keyof typeof WorkType];


/**
 * 
 * @export
 * @interface YunPlcDevice
 */
export interface YunPlcDevice {
    /**
     * 
     * @type {string}
     * @memberof YunPlcDevice
     */
    'grm'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof YunPlcDevice
     */
    'pass'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof YunPlcDevice
     */
    'sid'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof YunPlcDevice
     */
    'needLogin'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof YunPlcDevice
     */
    'addr'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof YunPlcDevice
     */
    'fetchAddr'?: string | null;
    /**
     * 
     * @type {Array<YunPlcDeviceAbilityStatus>}
     * @memberof YunPlcDevice
     */
    'statusList'?: Array<YunPlcDeviceAbilityStatus> | null;
    /**
     * 
     * @type {string}
     * @memberof YunPlcDevice
     */
    'expiredTime'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof YunPlcDevice
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof YunPlcDevice
     */
    'createdTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof YunPlcDevice
     */
    'deletedTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof YunPlcDevice
     */
    'restoredTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof YunPlcDevice
     */
    'isDelete'?: boolean;
}
/**
 * 
 * @export
 * @interface YunPlcDeviceAbilityStatus
 */
export interface YunPlcDeviceAbilityStatus {
    /**
     * 
     * @type {string}
     * @memberof YunPlcDeviceAbilityStatus
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof YunPlcDeviceAbilityStatus
     */
    'type'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof YunPlcDeviceAbilityStatus
     */
    'status'?: number | null;
    /**
     * 
     * @type {DeviceValueType}
     * @memberof YunPlcDeviceAbilityStatus
     */
    'valueType'?: DeviceValueType;
    /**
     * 
     * @type {boolean}
     * @memberof YunPlcDeviceAbilityStatus
     */
    'isWorking'?: boolean;
}

/**
 * AlertApi - axios parameter creator
 * @export
 */
export const AlertApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('alertFindGet', 'id', id)
            const localVarPath = `/Alert/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AlertSaveParams} [alertSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertSavePost: async (alertSaveParams?: AlertSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Alert/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(alertSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [keyword] 
         * @param {number} [cultureBatchId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertSearchGet: async (pi: number, ps: number, keyword?: string, cultureBatchId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('alertSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('alertSearchGet', 'ps', ps)
            const localVarPath = `/Alert/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }

            if (cultureBatchId !== undefined) {
                localVarQueryParameter['CultureBatchId'] = cultureBatchId;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlertApi - functional programming interface
 * @export
 */
export const AlertApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AlertApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AlertSaveParams} [alertSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertSavePost(alertSaveParams?: AlertSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertSavePost(alertSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [keyword] 
         * @param {number} [cultureBatchId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertSearchGet(pi: number, ps: number, keyword?: string, cultureBatchId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlertDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertSearchGet(pi, ps, keyword, cultureBatchId, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AlertApi - factory interface
 * @export
 */
export const AlertApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlertApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertFindGet(id: number, options?: any): AxiosPromise<AlertDto> {
            return localVarFp.alertFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AlertSaveParams} [alertSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertSavePost(alertSaveParams?: AlertSaveParams, options?: any): AxiosPromise<AlertDto> {
            return localVarFp.alertSavePost(alertSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [keyword] 
         * @param {number} [cultureBatchId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertSearchGet(pi: number, ps: number, keyword?: string, cultureBatchId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<AlertDtoSearchResponseDto> {
            return localVarFp.alertSearchGet(pi, ps, keyword, cultureBatchId, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for alertFindGet operation in AlertApi.
 * @export
 * @interface AlertApiAlertFindGetRequest
 */
export interface AlertApiAlertFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AlertApiAlertFindGet
     */
    readonly id: number
}

/**
 * Request parameters for alertSavePost operation in AlertApi.
 * @export
 * @interface AlertApiAlertSavePostRequest
 */
export interface AlertApiAlertSavePostRequest {
    /**
     * 
     * @type {AlertSaveParams}
     * @memberof AlertApiAlertSavePost
     */
    readonly alertSaveParams?: AlertSaveParams
}

/**
 * Request parameters for alertSearchGet operation in AlertApi.
 * @export
 * @interface AlertApiAlertSearchGetRequest
 */
export interface AlertApiAlertSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AlertApiAlertSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof AlertApiAlertSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {string}
     * @memberof AlertApiAlertSearchGet
     */
    readonly keyword?: string

    /**
     * 
     * @type {number}
     * @memberof AlertApiAlertSearchGet
     */
    readonly cultureBatchId?: number

    /**
     * 
     * @type {string}
     * @memberof AlertApiAlertSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof AlertApiAlertSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof AlertApiAlertSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * AlertApi - object-oriented interface
 * @export
 * @class AlertApi
 * @extends {BaseAPI}
 */
export class AlertApi extends BaseAPI {
    /**
     * 
     * @param {AlertApiAlertFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertApi
     */
    public alertFindGet(requestParameters: AlertApiAlertFindGetRequest, options?: AxiosRequestConfig) {
        return AlertApiFp(this.configuration).alertFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AlertApiAlertSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertApi
     */
    public alertSavePost(requestParameters: AlertApiAlertSavePostRequest = {}, options?: AxiosRequestConfig) {
        return AlertApiFp(this.configuration).alertSavePost(requestParameters.alertSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AlertApiAlertSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertApi
     */
    public alertSearchGet(requestParameters: AlertApiAlertSearchGetRequest, options?: AxiosRequestConfig) {
        return AlertApiFp(this.configuration).alertSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.keyword, requestParameters.cultureBatchId, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthorizeApi - axios parameter creator
 * @export
 */
export const AuthorizeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeHeartbeatGet: async (body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Authorize/Heartbeat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (body !== undefined) {
                localVarQueryParameter['body'] = body;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthorizeLoginParams} [authorizeLoginParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeLoginPost: async (authorizeLoginParams?: AuthorizeLoginParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Authorize/Login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorizeLoginParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorizeApi - functional programming interface
 * @export
 */
export const AuthorizeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorizeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorizeHeartbeatGet(body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizeHeartbeatDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorizeHeartbeatGet(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AuthorizeLoginParams} [authorizeLoginParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorizeLoginPost(authorizeLoginParams?: AuthorizeLoginParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorizeLoginPost(authorizeLoginParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthorizeApi - factory interface
 * @export
 */
export const AuthorizeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorizeApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeHeartbeatGet(body?: string, options?: any): AxiosPromise<AuthorizeHeartbeatDto> {
            return localVarFp.authorizeHeartbeatGet(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthorizeLoginParams} [authorizeLoginParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizeLoginPost(authorizeLoginParams?: AuthorizeLoginParams, options?: any): AxiosPromise<Token> {
            return localVarFp.authorizeLoginPost(authorizeLoginParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authorizeHeartbeatGet operation in AuthorizeApi.
 * @export
 * @interface AuthorizeApiAuthorizeHeartbeatGetRequest
 */
export interface AuthorizeApiAuthorizeHeartbeatGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthorizeApiAuthorizeHeartbeatGet
     */
    readonly body?: string
}

/**
 * Request parameters for authorizeLoginPost operation in AuthorizeApi.
 * @export
 * @interface AuthorizeApiAuthorizeLoginPostRequest
 */
export interface AuthorizeApiAuthorizeLoginPostRequest {
    /**
     * 
     * @type {AuthorizeLoginParams}
     * @memberof AuthorizeApiAuthorizeLoginPost
     */
    readonly authorizeLoginParams?: AuthorizeLoginParams
}

/**
 * AuthorizeApi - object-oriented interface
 * @export
 * @class AuthorizeApi
 * @extends {BaseAPI}
 */
export class AuthorizeApi extends BaseAPI {
    /**
     * 
     * @param {AuthorizeApiAuthorizeHeartbeatGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizeApi
     */
    public authorizeHeartbeatGet(requestParameters: AuthorizeApiAuthorizeHeartbeatGetRequest = {}, options?: AxiosRequestConfig) {
        return AuthorizeApiFp(this.configuration).authorizeHeartbeatGet(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthorizeApiAuthorizeLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizeApi
     */
    public authorizeLoginPost(requestParameters: AuthorizeApiAuthorizeLoginPostRequest = {}, options?: AxiosRequestConfig) {
        return AuthorizeApiFp(this.configuration).authorizeLoginPost(requestParameters.authorizeLoginParams, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BreedApi - axios parameter creator
 * @export
 */
export const BreedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        breedFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('breedFindGet', 'id', id)
            const localVarPath = `/Breed/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BreedSaveParams} [breedSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        breedSavePost: async (breedSaveParams?: BreedSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Breed/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(breedSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {BreedType} [type] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        breedSearchGet: async (pi: number, ps: number, type?: BreedType, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('breedSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('breedSearchGet', 'ps', ps)
            const localVarPath = `/Breed/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BreedApi - functional programming interface
 * @export
 */
export const BreedApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BreedApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async breedFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BreedDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.breedFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BreedSaveParams} [breedSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async breedSavePost(breedSaveParams?: BreedSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BreedDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.breedSavePost(breedSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {BreedType} [type] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async breedSearchGet(pi: number, ps: number, type?: BreedType, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BreedDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.breedSearchGet(pi, ps, type, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BreedApi - factory interface
 * @export
 */
export const BreedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BreedApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        breedFindGet(id: number, options?: any): AxiosPromise<BreedDto> {
            return localVarFp.breedFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BreedSaveParams} [breedSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        breedSavePost(breedSaveParams?: BreedSaveParams, options?: any): AxiosPromise<BreedDto> {
            return localVarFp.breedSavePost(breedSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {BreedType} [type] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        breedSearchGet(pi: number, ps: number, type?: BreedType, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<BreedDtoSearchResponseDto> {
            return localVarFp.breedSearchGet(pi, ps, type, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for breedFindGet operation in BreedApi.
 * @export
 * @interface BreedApiBreedFindGetRequest
 */
export interface BreedApiBreedFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof BreedApiBreedFindGet
     */
    readonly id: number
}

/**
 * Request parameters for breedSavePost operation in BreedApi.
 * @export
 * @interface BreedApiBreedSavePostRequest
 */
export interface BreedApiBreedSavePostRequest {
    /**
     * 
     * @type {BreedSaveParams}
     * @memberof BreedApiBreedSavePost
     */
    readonly breedSaveParams?: BreedSaveParams
}

/**
 * Request parameters for breedSearchGet operation in BreedApi.
 * @export
 * @interface BreedApiBreedSearchGetRequest
 */
export interface BreedApiBreedSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof BreedApiBreedSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof BreedApiBreedSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {BreedType}
     * @memberof BreedApiBreedSearchGet
     */
    readonly type?: BreedType

    /**
     * 
     * @type {string}
     * @memberof BreedApiBreedSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof BreedApiBreedSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof BreedApiBreedSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * BreedApi - object-oriented interface
 * @export
 * @class BreedApi
 * @extends {BaseAPI}
 */
export class BreedApi extends BaseAPI {
    /**
     * 
     * @param {BreedApiBreedFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BreedApi
     */
    public breedFindGet(requestParameters: BreedApiBreedFindGetRequest, options?: AxiosRequestConfig) {
        return BreedApiFp(this.configuration).breedFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BreedApiBreedSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BreedApi
     */
    public breedSavePost(requestParameters: BreedApiBreedSavePostRequest = {}, options?: AxiosRequestConfig) {
        return BreedApiFp(this.configuration).breedSavePost(requestParameters.breedSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BreedApiBreedSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BreedApi
     */
    public breedSearchGet(requestParameters: BreedApiBreedSearchGetRequest, options?: AxiosRequestConfig) {
        return BreedApiFp(this.configuration).breedSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.type, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BriefApi - axios parameter creator
 * @export
 */
export const BriefApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CultureBatchType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        briefCountCultureGet: async (type?: CultureBatchType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Brief/CountCulture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [cultureBatchId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        briefCountPondGet: async (cultureBatchId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Brief/CountPond`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cultureBatchId !== undefined) {
                localVarQueryParameter['CultureBatchId'] = cultureBatchId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [cultureBatchId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        briefCountTodayWorkloadGet: async (cultureBatchId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Brief/CountTodayWorkload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cultureBatchId !== undefined) {
                localVarQueryParameter['CultureBatchId'] = cultureBatchId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [from] 
         * @param {string} [to] 
         * @param {number} [cultureBatchId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        briefListUserWorkLoadGet: async (from?: string, to?: string, cultureBatchId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Brief/ListUserWorkLoad`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from !== undefined) {
                localVarQueryParameter['From'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['To'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }

            if (cultureBatchId !== undefined) {
                localVarQueryParameter['CultureBatchId'] = cultureBatchId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BriefApi - functional programming interface
 * @export
 */
export const BriefApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BriefApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CultureBatchType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async briefCountCultureGet(type?: CultureBatchType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BriefCountCultureResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.briefCountCultureGet(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [cultureBatchId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async briefCountPondGet(cultureBatchId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BriefCountPondResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.briefCountPondGet(cultureBatchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [cultureBatchId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async briefCountTodayWorkloadGet(cultureBatchId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BriefCountTodayWorkloadResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.briefCountTodayWorkloadGet(cultureBatchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [from] 
         * @param {string} [to] 
         * @param {number} [cultureBatchId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async briefListUserWorkLoadGet(from?: string, to?: string, cultureBatchId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BriefListUserWorkloadResponseItemDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.briefListUserWorkLoadGet(from, to, cultureBatchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BriefApi - factory interface
 * @export
 */
export const BriefApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BriefApiFp(configuration)
    return {
        /**
         * 
         * @param {CultureBatchType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        briefCountCultureGet(type?: CultureBatchType, options?: any): AxiosPromise<BriefCountCultureResponseDto> {
            return localVarFp.briefCountCultureGet(type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [cultureBatchId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        briefCountPondGet(cultureBatchId?: number, options?: any): AxiosPromise<BriefCountPondResponseDto> {
            return localVarFp.briefCountPondGet(cultureBatchId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [cultureBatchId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        briefCountTodayWorkloadGet(cultureBatchId?: number, options?: any): AxiosPromise<BriefCountTodayWorkloadResponseDto> {
            return localVarFp.briefCountTodayWorkloadGet(cultureBatchId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [from] 
         * @param {string} [to] 
         * @param {number} [cultureBatchId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        briefListUserWorkLoadGet(from?: string, to?: string, cultureBatchId?: number, options?: any): AxiosPromise<Array<BriefListUserWorkloadResponseItemDto>> {
            return localVarFp.briefListUserWorkLoadGet(from, to, cultureBatchId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for briefCountCultureGet operation in BriefApi.
 * @export
 * @interface BriefApiBriefCountCultureGetRequest
 */
export interface BriefApiBriefCountCultureGetRequest {
    /**
     * 
     * @type {CultureBatchType}
     * @memberof BriefApiBriefCountCultureGet
     */
    readonly type?: CultureBatchType
}

/**
 * Request parameters for briefCountPondGet operation in BriefApi.
 * @export
 * @interface BriefApiBriefCountPondGetRequest
 */
export interface BriefApiBriefCountPondGetRequest {
    /**
     * 
     * @type {number}
     * @memberof BriefApiBriefCountPondGet
     */
    readonly cultureBatchId?: number
}

/**
 * Request parameters for briefCountTodayWorkloadGet operation in BriefApi.
 * @export
 * @interface BriefApiBriefCountTodayWorkloadGetRequest
 */
export interface BriefApiBriefCountTodayWorkloadGetRequest {
    /**
     * 
     * @type {number}
     * @memberof BriefApiBriefCountTodayWorkloadGet
     */
    readonly cultureBatchId?: number
}

/**
 * Request parameters for briefListUserWorkLoadGet operation in BriefApi.
 * @export
 * @interface BriefApiBriefListUserWorkLoadGetRequest
 */
export interface BriefApiBriefListUserWorkLoadGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BriefApiBriefListUserWorkLoadGet
     */
    readonly from?: string

    /**
     * 
     * @type {string}
     * @memberof BriefApiBriefListUserWorkLoadGet
     */
    readonly to?: string

    /**
     * 
     * @type {number}
     * @memberof BriefApiBriefListUserWorkLoadGet
     */
    readonly cultureBatchId?: number
}

/**
 * BriefApi - object-oriented interface
 * @export
 * @class BriefApi
 * @extends {BaseAPI}
 */
export class BriefApi extends BaseAPI {
    /**
     * 
     * @param {BriefApiBriefCountCultureGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BriefApi
     */
    public briefCountCultureGet(requestParameters: BriefApiBriefCountCultureGetRequest = {}, options?: AxiosRequestConfig) {
        return BriefApiFp(this.configuration).briefCountCultureGet(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BriefApiBriefCountPondGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BriefApi
     */
    public briefCountPondGet(requestParameters: BriefApiBriefCountPondGetRequest = {}, options?: AxiosRequestConfig) {
        return BriefApiFp(this.configuration).briefCountPondGet(requestParameters.cultureBatchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BriefApiBriefCountTodayWorkloadGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BriefApi
     */
    public briefCountTodayWorkloadGet(requestParameters: BriefApiBriefCountTodayWorkloadGetRequest = {}, options?: AxiosRequestConfig) {
        return BriefApiFp(this.configuration).briefCountTodayWorkloadGet(requestParameters.cultureBatchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BriefApiBriefListUserWorkLoadGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BriefApi
     */
    public briefListUserWorkLoadGet(requestParameters: BriefApiBriefListUserWorkLoadGetRequest = {}, options?: AxiosRequestConfig) {
        return BriefApiFp(this.configuration).briefListUserWorkLoadGet(requestParameters.from, requestParameters.to, requestParameters.cultureBatchId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CultureBatchApi - axios parameter creator
 * @export
 */
export const CultureBatchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CultureBatchAddPondParams} [cultureBatchAddPondParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchAddPondPost: async (cultureBatchAddPondParams?: CultureBatchAddPondParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CultureBatch/AddPond`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cultureBatchAddPondParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CultureBatchConfigurePeriodParams} [cultureBatchConfigurePeriodParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchConfigurePeriodPost: async (cultureBatchConfigurePeriodParams?: CultureBatchConfigurePeriodParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CultureBatch/ConfigurePeriod`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cultureBatchConfigurePeriodParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchCurrentPeriodGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cultureBatchCurrentPeriodGet', 'id', id)
            const localVarPath = `/CultureBatch/CurrentPeriod`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cultureBatchFindGet', 'id', id)
            const localVarPath = `/CultureBatch/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CultureBatchFinishParams} [cultureBatchFinishParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchFinishPost: async (cultureBatchFinishParams?: CultureBatchFinishParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CultureBatch/Finish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cultureBatchFinishParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pondId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchGetCurrentByPondIdGet: async (pondId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pondId' is not null or undefined
            assertParamExists('cultureBatchGetCurrentByPondIdGet', 'pondId', pondId)
            const localVarPath = `/CultureBatch/GetCurrentByPondId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pondId !== undefined) {
                localVarQueryParameter['PondId'] = pondId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchIsLastCulturePeriodGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cultureBatchIsLastCulturePeriodGet', 'id', id)
            const localVarPath = `/CultureBatch/IsLastCulturePeriod`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchListPeriodGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cultureBatchListPeriodGet', 'id', id)
            const localVarPath = `/CultureBatch/ListPeriod`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchListPondGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cultureBatchListPondGet', 'id', id)
            const localVarPath = `/CultureBatch/ListPond`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CultureBatchListWorkShopParams} [cultureBatchListWorkShopParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchListWorkShopPost: async (cultureBatchListWorkShopParams?: CultureBatchListWorkShopParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CultureBatch/ListWorkShop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cultureBatchListWorkShopParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CultureBatchRemovePondParams} [cultureBatchRemovePondParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchRemovePondPost: async (cultureBatchRemovePondParams?: CultureBatchRemovePondParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CultureBatch/RemovePond`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cultureBatchRemovePondParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CultureBatchSaveParams} [cultureBatchSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchSavePost: async (cultureBatchSaveParams?: CultureBatchSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CultureBatch/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cultureBatchSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [pondGroupId] 
         * @param {Array<number>} [pondGroupIdList] 
         * @param {boolean} [isDone] 
         * @param {CultureBatchType} [type] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchSearchGet: async (pi: number, ps: number, pondGroupId?: number, pondGroupIdList?: Array<number>, isDone?: boolean, type?: CultureBatchType, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('cultureBatchSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('cultureBatchSearchGet', 'ps', ps)
            const localVarPath = `/CultureBatch/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pondGroupId !== undefined) {
                localVarQueryParameter['PondGroupId'] = pondGroupId;
            }

            if (pondGroupIdList) {
                localVarQueryParameter['PondGroupIdList'] = pondGroupIdList;
            }

            if (isDone !== undefined) {
                localVarQueryParameter['IsDone'] = isDone;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CultureBatchApi - functional programming interface
 * @export
 */
export const CultureBatchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CultureBatchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CultureBatchAddPondParams} [cultureBatchAddPondParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureBatchAddPondPost(cultureBatchAddPondParams?: CultureBatchAddPondParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureBatchDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureBatchAddPondPost(cultureBatchAddPondParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CultureBatchConfigurePeriodParams} [cultureBatchConfigurePeriodParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureBatchConfigurePeriodPost(cultureBatchConfigurePeriodParams?: CultureBatchConfigurePeriodParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureBatchDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureBatchConfigurePeriodPost(cultureBatchConfigurePeriodParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureBatchCurrentPeriodGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureBatchPeriodDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureBatchCurrentPeriodGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureBatchFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureBatchDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureBatchFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CultureBatchFinishParams} [cultureBatchFinishParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureBatchFinishPost(cultureBatchFinishParams?: CultureBatchFinishParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureBatchDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureBatchFinishPost(cultureBatchFinishParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pondId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureBatchGetCurrentByPondIdGet(pondId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureBatch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureBatchGetCurrentByPondIdGet(pondId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureBatchIsLastCulturePeriodGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureBatchIsLastCulturePeriodResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureBatchIsLastCulturePeriodGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureBatchListPeriodGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CultureBatchPeriodDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureBatchListPeriodGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureBatchListPondGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CultureBatchToPondDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureBatchListPondGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CultureBatchListWorkShopParams} [cultureBatchListWorkShopParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureBatchListWorkShopPost(cultureBatchListWorkShopParams?: CultureBatchListWorkShopParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkShopDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureBatchListWorkShopPost(cultureBatchListWorkShopParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CultureBatchRemovePondParams} [cultureBatchRemovePondParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureBatchRemovePondPost(cultureBatchRemovePondParams?: CultureBatchRemovePondParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureBatchDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureBatchRemovePondPost(cultureBatchRemovePondParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CultureBatchSaveParams} [cultureBatchSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureBatchSavePost(cultureBatchSaveParams?: CultureBatchSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureBatchDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureBatchSavePost(cultureBatchSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [pondGroupId] 
         * @param {Array<number>} [pondGroupIdList] 
         * @param {boolean} [isDone] 
         * @param {CultureBatchType} [type] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureBatchSearchGet(pi: number, ps: number, pondGroupId?: number, pondGroupIdList?: Array<number>, isDone?: boolean, type?: CultureBatchType, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureBatchDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureBatchSearchGet(pi, ps, pondGroupId, pondGroupIdList, isDone, type, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CultureBatchApi - factory interface
 * @export
 */
export const CultureBatchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CultureBatchApiFp(configuration)
    return {
        /**
         * 
         * @param {CultureBatchAddPondParams} [cultureBatchAddPondParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchAddPondPost(cultureBatchAddPondParams?: CultureBatchAddPondParams, options?: any): AxiosPromise<CultureBatchDto> {
            return localVarFp.cultureBatchAddPondPost(cultureBatchAddPondParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CultureBatchConfigurePeriodParams} [cultureBatchConfigurePeriodParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchConfigurePeriodPost(cultureBatchConfigurePeriodParams?: CultureBatchConfigurePeriodParams, options?: any): AxiosPromise<CultureBatchDto> {
            return localVarFp.cultureBatchConfigurePeriodPost(cultureBatchConfigurePeriodParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchCurrentPeriodGet(id: number, options?: any): AxiosPromise<CultureBatchPeriodDto> {
            return localVarFp.cultureBatchCurrentPeriodGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchFindGet(id: number, options?: any): AxiosPromise<CultureBatchDto> {
            return localVarFp.cultureBatchFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CultureBatchFinishParams} [cultureBatchFinishParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchFinishPost(cultureBatchFinishParams?: CultureBatchFinishParams, options?: any): AxiosPromise<CultureBatchDto> {
            return localVarFp.cultureBatchFinishPost(cultureBatchFinishParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pondId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchGetCurrentByPondIdGet(pondId: number, options?: any): AxiosPromise<CultureBatch> {
            return localVarFp.cultureBatchGetCurrentByPondIdGet(pondId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchIsLastCulturePeriodGet(id: number, options?: any): AxiosPromise<CultureBatchIsLastCulturePeriodResponseDto> {
            return localVarFp.cultureBatchIsLastCulturePeriodGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchListPeriodGet(id: number, options?: any): AxiosPromise<Array<CultureBatchPeriodDto>> {
            return localVarFp.cultureBatchListPeriodGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchListPondGet(id: number, options?: any): AxiosPromise<Array<CultureBatchToPondDto>> {
            return localVarFp.cultureBatchListPondGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CultureBatchListWorkShopParams} [cultureBatchListWorkShopParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchListWorkShopPost(cultureBatchListWorkShopParams?: CultureBatchListWorkShopParams, options?: any): AxiosPromise<Array<WorkShopDto>> {
            return localVarFp.cultureBatchListWorkShopPost(cultureBatchListWorkShopParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CultureBatchRemovePondParams} [cultureBatchRemovePondParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchRemovePondPost(cultureBatchRemovePondParams?: CultureBatchRemovePondParams, options?: any): AxiosPromise<CultureBatchDto> {
            return localVarFp.cultureBatchRemovePondPost(cultureBatchRemovePondParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CultureBatchSaveParams} [cultureBatchSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchSavePost(cultureBatchSaveParams?: CultureBatchSaveParams, options?: any): AxiosPromise<CultureBatchDto> {
            return localVarFp.cultureBatchSavePost(cultureBatchSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [pondGroupId] 
         * @param {Array<number>} [pondGroupIdList] 
         * @param {boolean} [isDone] 
         * @param {CultureBatchType} [type] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchSearchGet(pi: number, ps: number, pondGroupId?: number, pondGroupIdList?: Array<number>, isDone?: boolean, type?: CultureBatchType, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<CultureBatchDtoSearchResponseDto> {
            return localVarFp.cultureBatchSearchGet(pi, ps, pondGroupId, pondGroupIdList, isDone, type, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cultureBatchAddPondPost operation in CultureBatchApi.
 * @export
 * @interface CultureBatchApiCultureBatchAddPondPostRequest
 */
export interface CultureBatchApiCultureBatchAddPondPostRequest {
    /**
     * 
     * @type {CultureBatchAddPondParams}
     * @memberof CultureBatchApiCultureBatchAddPondPost
     */
    readonly cultureBatchAddPondParams?: CultureBatchAddPondParams
}

/**
 * Request parameters for cultureBatchConfigurePeriodPost operation in CultureBatchApi.
 * @export
 * @interface CultureBatchApiCultureBatchConfigurePeriodPostRequest
 */
export interface CultureBatchApiCultureBatchConfigurePeriodPostRequest {
    /**
     * 
     * @type {CultureBatchConfigurePeriodParams}
     * @memberof CultureBatchApiCultureBatchConfigurePeriodPost
     */
    readonly cultureBatchConfigurePeriodParams?: CultureBatchConfigurePeriodParams
}

/**
 * Request parameters for cultureBatchCurrentPeriodGet operation in CultureBatchApi.
 * @export
 * @interface CultureBatchApiCultureBatchCurrentPeriodGetRequest
 */
export interface CultureBatchApiCultureBatchCurrentPeriodGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureBatchApiCultureBatchCurrentPeriodGet
     */
    readonly id: number
}

/**
 * Request parameters for cultureBatchFindGet operation in CultureBatchApi.
 * @export
 * @interface CultureBatchApiCultureBatchFindGetRequest
 */
export interface CultureBatchApiCultureBatchFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureBatchApiCultureBatchFindGet
     */
    readonly id: number
}

/**
 * Request parameters for cultureBatchFinishPost operation in CultureBatchApi.
 * @export
 * @interface CultureBatchApiCultureBatchFinishPostRequest
 */
export interface CultureBatchApiCultureBatchFinishPostRequest {
    /**
     * 
     * @type {CultureBatchFinishParams}
     * @memberof CultureBatchApiCultureBatchFinishPost
     */
    readonly cultureBatchFinishParams?: CultureBatchFinishParams
}

/**
 * Request parameters for cultureBatchGetCurrentByPondIdGet operation in CultureBatchApi.
 * @export
 * @interface CultureBatchApiCultureBatchGetCurrentByPondIdGetRequest
 */
export interface CultureBatchApiCultureBatchGetCurrentByPondIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureBatchApiCultureBatchGetCurrentByPondIdGet
     */
    readonly pondId: number
}

/**
 * Request parameters for cultureBatchIsLastCulturePeriodGet operation in CultureBatchApi.
 * @export
 * @interface CultureBatchApiCultureBatchIsLastCulturePeriodGetRequest
 */
export interface CultureBatchApiCultureBatchIsLastCulturePeriodGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureBatchApiCultureBatchIsLastCulturePeriodGet
     */
    readonly id: number
}

/**
 * Request parameters for cultureBatchListPeriodGet operation in CultureBatchApi.
 * @export
 * @interface CultureBatchApiCultureBatchListPeriodGetRequest
 */
export interface CultureBatchApiCultureBatchListPeriodGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureBatchApiCultureBatchListPeriodGet
     */
    readonly id: number
}

/**
 * Request parameters for cultureBatchListPondGet operation in CultureBatchApi.
 * @export
 * @interface CultureBatchApiCultureBatchListPondGetRequest
 */
export interface CultureBatchApiCultureBatchListPondGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureBatchApiCultureBatchListPondGet
     */
    readonly id: number
}

/**
 * Request parameters for cultureBatchListWorkShopPost operation in CultureBatchApi.
 * @export
 * @interface CultureBatchApiCultureBatchListWorkShopPostRequest
 */
export interface CultureBatchApiCultureBatchListWorkShopPostRequest {
    /**
     * 
     * @type {CultureBatchListWorkShopParams}
     * @memberof CultureBatchApiCultureBatchListWorkShopPost
     */
    readonly cultureBatchListWorkShopParams?: CultureBatchListWorkShopParams
}

/**
 * Request parameters for cultureBatchRemovePondPost operation in CultureBatchApi.
 * @export
 * @interface CultureBatchApiCultureBatchRemovePondPostRequest
 */
export interface CultureBatchApiCultureBatchRemovePondPostRequest {
    /**
     * 
     * @type {CultureBatchRemovePondParams}
     * @memberof CultureBatchApiCultureBatchRemovePondPost
     */
    readonly cultureBatchRemovePondParams?: CultureBatchRemovePondParams
}

/**
 * Request parameters for cultureBatchSavePost operation in CultureBatchApi.
 * @export
 * @interface CultureBatchApiCultureBatchSavePostRequest
 */
export interface CultureBatchApiCultureBatchSavePostRequest {
    /**
     * 
     * @type {CultureBatchSaveParams}
     * @memberof CultureBatchApiCultureBatchSavePost
     */
    readonly cultureBatchSaveParams?: CultureBatchSaveParams
}

/**
 * Request parameters for cultureBatchSearchGet operation in CultureBatchApi.
 * @export
 * @interface CultureBatchApiCultureBatchSearchGetRequest
 */
export interface CultureBatchApiCultureBatchSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureBatchApiCultureBatchSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof CultureBatchApiCultureBatchSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {number}
     * @memberof CultureBatchApiCultureBatchSearchGet
     */
    readonly pondGroupId?: number

    /**
     * 
     * @type {Array<number>}
     * @memberof CultureBatchApiCultureBatchSearchGet
     */
    readonly pondGroupIdList?: Array<number>

    /**
     * 
     * @type {boolean}
     * @memberof CultureBatchApiCultureBatchSearchGet
     */
    readonly isDone?: boolean

    /**
     * 
     * @type {CultureBatchType}
     * @memberof CultureBatchApiCultureBatchSearchGet
     */
    readonly type?: CultureBatchType

    /**
     * 
     * @type {string}
     * @memberof CultureBatchApiCultureBatchSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof CultureBatchApiCultureBatchSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof CultureBatchApiCultureBatchSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * CultureBatchApi - object-oriented interface
 * @export
 * @class CultureBatchApi
 * @extends {BaseAPI}
 */
export class CultureBatchApi extends BaseAPI {
    /**
     * 
     * @param {CultureBatchApiCultureBatchAddPondPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureBatchApi
     */
    public cultureBatchAddPondPost(requestParameters: CultureBatchApiCultureBatchAddPondPostRequest = {}, options?: AxiosRequestConfig) {
        return CultureBatchApiFp(this.configuration).cultureBatchAddPondPost(requestParameters.cultureBatchAddPondParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureBatchApiCultureBatchConfigurePeriodPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureBatchApi
     */
    public cultureBatchConfigurePeriodPost(requestParameters: CultureBatchApiCultureBatchConfigurePeriodPostRequest = {}, options?: AxiosRequestConfig) {
        return CultureBatchApiFp(this.configuration).cultureBatchConfigurePeriodPost(requestParameters.cultureBatchConfigurePeriodParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureBatchApiCultureBatchCurrentPeriodGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureBatchApi
     */
    public cultureBatchCurrentPeriodGet(requestParameters: CultureBatchApiCultureBatchCurrentPeriodGetRequest, options?: AxiosRequestConfig) {
        return CultureBatchApiFp(this.configuration).cultureBatchCurrentPeriodGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureBatchApiCultureBatchFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureBatchApi
     */
    public cultureBatchFindGet(requestParameters: CultureBatchApiCultureBatchFindGetRequest, options?: AxiosRequestConfig) {
        return CultureBatchApiFp(this.configuration).cultureBatchFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureBatchApiCultureBatchFinishPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureBatchApi
     */
    public cultureBatchFinishPost(requestParameters: CultureBatchApiCultureBatchFinishPostRequest = {}, options?: AxiosRequestConfig) {
        return CultureBatchApiFp(this.configuration).cultureBatchFinishPost(requestParameters.cultureBatchFinishParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureBatchApiCultureBatchGetCurrentByPondIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureBatchApi
     */
    public cultureBatchGetCurrentByPondIdGet(requestParameters: CultureBatchApiCultureBatchGetCurrentByPondIdGetRequest, options?: AxiosRequestConfig) {
        return CultureBatchApiFp(this.configuration).cultureBatchGetCurrentByPondIdGet(requestParameters.pondId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureBatchApiCultureBatchIsLastCulturePeriodGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureBatchApi
     */
    public cultureBatchIsLastCulturePeriodGet(requestParameters: CultureBatchApiCultureBatchIsLastCulturePeriodGetRequest, options?: AxiosRequestConfig) {
        return CultureBatchApiFp(this.configuration).cultureBatchIsLastCulturePeriodGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureBatchApiCultureBatchListPeriodGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureBatchApi
     */
    public cultureBatchListPeriodGet(requestParameters: CultureBatchApiCultureBatchListPeriodGetRequest, options?: AxiosRequestConfig) {
        return CultureBatchApiFp(this.configuration).cultureBatchListPeriodGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureBatchApiCultureBatchListPondGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureBatchApi
     */
    public cultureBatchListPondGet(requestParameters: CultureBatchApiCultureBatchListPondGetRequest, options?: AxiosRequestConfig) {
        return CultureBatchApiFp(this.configuration).cultureBatchListPondGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureBatchApiCultureBatchListWorkShopPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureBatchApi
     */
    public cultureBatchListWorkShopPost(requestParameters: CultureBatchApiCultureBatchListWorkShopPostRequest = {}, options?: AxiosRequestConfig) {
        return CultureBatchApiFp(this.configuration).cultureBatchListWorkShopPost(requestParameters.cultureBatchListWorkShopParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureBatchApiCultureBatchRemovePondPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureBatchApi
     */
    public cultureBatchRemovePondPost(requestParameters: CultureBatchApiCultureBatchRemovePondPostRequest = {}, options?: AxiosRequestConfig) {
        return CultureBatchApiFp(this.configuration).cultureBatchRemovePondPost(requestParameters.cultureBatchRemovePondParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureBatchApiCultureBatchSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureBatchApi
     */
    public cultureBatchSavePost(requestParameters: CultureBatchApiCultureBatchSavePostRequest = {}, options?: AxiosRequestConfig) {
        return CultureBatchApiFp(this.configuration).cultureBatchSavePost(requestParameters.cultureBatchSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureBatchApiCultureBatchSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureBatchApi
     */
    public cultureBatchSearchGet(requestParameters: CultureBatchApiCultureBatchSearchGetRequest, options?: AxiosRequestConfig) {
        return CultureBatchApiFp(this.configuration).cultureBatchSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.pondGroupId, requestParameters.pondGroupIdList, requestParameters.isDone, requestParameters.type, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CultureBatchGrowRecordApi - axios parameter creator
 * @export
 */
export const CultureBatchGrowRecordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchGrowRecordFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cultureBatchGrowRecordFindGet', 'id', id)
            const localVarPath = `/CultureBatchGrowRecord/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [cultureBatchId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchGrowRecordSearchGet: async (pi: number, ps: number, cultureBatchId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('cultureBatchGrowRecordSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('cultureBatchGrowRecordSearchGet', 'ps', ps)
            const localVarPath = `/CultureBatchGrowRecord/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cultureBatchId !== undefined) {
                localVarQueryParameter['CultureBatchId'] = cultureBatchId;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CultureBatchGrowRecordApi - functional programming interface
 * @export
 */
export const CultureBatchGrowRecordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CultureBatchGrowRecordApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureBatchGrowRecordFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureBatchGrowRecordDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureBatchGrowRecordFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [cultureBatchId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureBatchGrowRecordSearchGet(pi: number, ps: number, cultureBatchId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureBatchGrowRecordDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureBatchGrowRecordSearchGet(pi, ps, cultureBatchId, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CultureBatchGrowRecordApi - factory interface
 * @export
 */
export const CultureBatchGrowRecordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CultureBatchGrowRecordApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchGrowRecordFindGet(id: number, options?: any): AxiosPromise<CultureBatchGrowRecordDto> {
            return localVarFp.cultureBatchGrowRecordFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [cultureBatchId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBatchGrowRecordSearchGet(pi: number, ps: number, cultureBatchId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<CultureBatchGrowRecordDtoSearchResponseDto> {
            return localVarFp.cultureBatchGrowRecordSearchGet(pi, ps, cultureBatchId, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cultureBatchGrowRecordFindGet operation in CultureBatchGrowRecordApi.
 * @export
 * @interface CultureBatchGrowRecordApiCultureBatchGrowRecordFindGetRequest
 */
export interface CultureBatchGrowRecordApiCultureBatchGrowRecordFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureBatchGrowRecordApiCultureBatchGrowRecordFindGet
     */
    readonly id: number
}

/**
 * Request parameters for cultureBatchGrowRecordSearchGet operation in CultureBatchGrowRecordApi.
 * @export
 * @interface CultureBatchGrowRecordApiCultureBatchGrowRecordSearchGetRequest
 */
export interface CultureBatchGrowRecordApiCultureBatchGrowRecordSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureBatchGrowRecordApiCultureBatchGrowRecordSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof CultureBatchGrowRecordApiCultureBatchGrowRecordSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {number}
     * @memberof CultureBatchGrowRecordApiCultureBatchGrowRecordSearchGet
     */
    readonly cultureBatchId?: number

    /**
     * 
     * @type {string}
     * @memberof CultureBatchGrowRecordApiCultureBatchGrowRecordSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof CultureBatchGrowRecordApiCultureBatchGrowRecordSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof CultureBatchGrowRecordApiCultureBatchGrowRecordSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * CultureBatchGrowRecordApi - object-oriented interface
 * @export
 * @class CultureBatchGrowRecordApi
 * @extends {BaseAPI}
 */
export class CultureBatchGrowRecordApi extends BaseAPI {
    /**
     * 
     * @param {CultureBatchGrowRecordApiCultureBatchGrowRecordFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureBatchGrowRecordApi
     */
    public cultureBatchGrowRecordFindGet(requestParameters: CultureBatchGrowRecordApiCultureBatchGrowRecordFindGetRequest, options?: AxiosRequestConfig) {
        return CultureBatchGrowRecordApiFp(this.configuration).cultureBatchGrowRecordFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureBatchGrowRecordApiCultureBatchGrowRecordSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureBatchGrowRecordApi
     */
    public cultureBatchGrowRecordSearchGet(requestParameters: CultureBatchGrowRecordApiCultureBatchGrowRecordSearchGetRequest, options?: AxiosRequestConfig) {
        return CultureBatchGrowRecordApiFp(this.configuration).cultureBatchGrowRecordSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.cultureBatchId, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CultureBriefApi - axios parameter creator
 * @export
 */
export const CultureBriefApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBriefFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cultureBriefFindGet', 'id', id)
            const localVarPath = `/CultureBrief/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CultureBriefSaveParams} [cultureBriefSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBriefSavePost: async (cultureBriefSaveParams?: CultureBriefSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CultureBrief/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cultureBriefSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBriefSearchGet: async (pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('cultureBriefSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('cultureBriefSearchGet', 'ps', ps)
            const localVarPath = `/CultureBrief/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CultureBriefApi - functional programming interface
 * @export
 */
export const CultureBriefApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CultureBriefApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureBriefFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureBriefDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureBriefFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CultureBriefSaveParams} [cultureBriefSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureBriefSavePost(cultureBriefSaveParams?: CultureBriefSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureBriefDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureBriefSavePost(cultureBriefSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureBriefSearchGet(pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureBriefDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureBriefSearchGet(pi, ps, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CultureBriefApi - factory interface
 * @export
 */
export const CultureBriefApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CultureBriefApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBriefFindGet(id: number, options?: any): AxiosPromise<CultureBriefDto> {
            return localVarFp.cultureBriefFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CultureBriefSaveParams} [cultureBriefSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBriefSavePost(cultureBriefSaveParams?: CultureBriefSaveParams, options?: any): AxiosPromise<CultureBriefDto> {
            return localVarFp.cultureBriefSavePost(cultureBriefSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureBriefSearchGet(pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<CultureBriefDtoSearchResponseDto> {
            return localVarFp.cultureBriefSearchGet(pi, ps, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cultureBriefFindGet operation in CultureBriefApi.
 * @export
 * @interface CultureBriefApiCultureBriefFindGetRequest
 */
export interface CultureBriefApiCultureBriefFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureBriefApiCultureBriefFindGet
     */
    readonly id: number
}

/**
 * Request parameters for cultureBriefSavePost operation in CultureBriefApi.
 * @export
 * @interface CultureBriefApiCultureBriefSavePostRequest
 */
export interface CultureBriefApiCultureBriefSavePostRequest {
    /**
     * 
     * @type {CultureBriefSaveParams}
     * @memberof CultureBriefApiCultureBriefSavePost
     */
    readonly cultureBriefSaveParams?: CultureBriefSaveParams
}

/**
 * Request parameters for cultureBriefSearchGet operation in CultureBriefApi.
 * @export
 * @interface CultureBriefApiCultureBriefSearchGetRequest
 */
export interface CultureBriefApiCultureBriefSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureBriefApiCultureBriefSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof CultureBriefApiCultureBriefSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {string}
     * @memberof CultureBriefApiCultureBriefSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof CultureBriefApiCultureBriefSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof CultureBriefApiCultureBriefSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * CultureBriefApi - object-oriented interface
 * @export
 * @class CultureBriefApi
 * @extends {BaseAPI}
 */
export class CultureBriefApi extends BaseAPI {
    /**
     * 
     * @param {CultureBriefApiCultureBriefFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureBriefApi
     */
    public cultureBriefFindGet(requestParameters: CultureBriefApiCultureBriefFindGetRequest, options?: AxiosRequestConfig) {
        return CultureBriefApiFp(this.configuration).cultureBriefFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureBriefApiCultureBriefSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureBriefApi
     */
    public cultureBriefSavePost(requestParameters: CultureBriefApiCultureBriefSavePostRequest = {}, options?: AxiosRequestConfig) {
        return CultureBriefApiFp(this.configuration).cultureBriefSavePost(requestParameters.cultureBriefSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureBriefApiCultureBriefSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureBriefApi
     */
    public cultureBriefSearchGet(requestParameters: CultureBriefApiCultureBriefSearchGetRequest, options?: AxiosRequestConfig) {
        return CultureBriefApiFp(this.configuration).cultureBriefSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CultureProductionApi - axios parameter creator
 * @export
 */
export const CultureProductionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureProductionFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cultureProductionFindGet', 'id', id)
            const localVarPath = `/CultureProduction/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CultureProductionSaveParams} [cultureProductionSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureProductionSavePost: async (cultureProductionSaveParams?: CultureProductionSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CultureProduction/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cultureProductionSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [platform] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureProductionSearchGet: async (pi: number, ps: number, platform?: string, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('cultureProductionSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('cultureProductionSearchGet', 'ps', ps)
            const localVarPath = `/CultureProduction/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (platform !== undefined) {
                localVarQueryParameter['Platform'] = platform;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CultureProductionApi - functional programming interface
 * @export
 */
export const CultureProductionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CultureProductionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureProductionFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureProductionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureProductionFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CultureProductionSaveParams} [cultureProductionSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureProductionSavePost(cultureProductionSaveParams?: CultureProductionSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureProductionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureProductionSavePost(cultureProductionSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [platform] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureProductionSearchGet(pi: number, ps: number, platform?: string, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureProductionDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureProductionSearchGet(pi, ps, platform, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CultureProductionApi - factory interface
 * @export
 */
export const CultureProductionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CultureProductionApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureProductionFindGet(id: number, options?: any): AxiosPromise<CultureProductionDto> {
            return localVarFp.cultureProductionFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CultureProductionSaveParams} [cultureProductionSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureProductionSavePost(cultureProductionSaveParams?: CultureProductionSaveParams, options?: any): AxiosPromise<CultureProductionDto> {
            return localVarFp.cultureProductionSavePost(cultureProductionSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [platform] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureProductionSearchGet(pi: number, ps: number, platform?: string, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<CultureProductionDtoSearchResponseDto> {
            return localVarFp.cultureProductionSearchGet(pi, ps, platform, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cultureProductionFindGet operation in CultureProductionApi.
 * @export
 * @interface CultureProductionApiCultureProductionFindGetRequest
 */
export interface CultureProductionApiCultureProductionFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureProductionApiCultureProductionFindGet
     */
    readonly id: number
}

/**
 * Request parameters for cultureProductionSavePost operation in CultureProductionApi.
 * @export
 * @interface CultureProductionApiCultureProductionSavePostRequest
 */
export interface CultureProductionApiCultureProductionSavePostRequest {
    /**
     * 
     * @type {CultureProductionSaveParams}
     * @memberof CultureProductionApiCultureProductionSavePost
     */
    readonly cultureProductionSaveParams?: CultureProductionSaveParams
}

/**
 * Request parameters for cultureProductionSearchGet operation in CultureProductionApi.
 * @export
 * @interface CultureProductionApiCultureProductionSearchGetRequest
 */
export interface CultureProductionApiCultureProductionSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureProductionApiCultureProductionSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof CultureProductionApiCultureProductionSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {string}
     * @memberof CultureProductionApiCultureProductionSearchGet
     */
    readonly platform?: string

    /**
     * 
     * @type {string}
     * @memberof CultureProductionApiCultureProductionSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof CultureProductionApiCultureProductionSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof CultureProductionApiCultureProductionSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * CultureProductionApi - object-oriented interface
 * @export
 * @class CultureProductionApi
 * @extends {BaseAPI}
 */
export class CultureProductionApi extends BaseAPI {
    /**
     * 
     * @param {CultureProductionApiCultureProductionFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureProductionApi
     */
    public cultureProductionFindGet(requestParameters: CultureProductionApiCultureProductionFindGetRequest, options?: AxiosRequestConfig) {
        return CultureProductionApiFp(this.configuration).cultureProductionFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureProductionApiCultureProductionSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureProductionApi
     */
    public cultureProductionSavePost(requestParameters: CultureProductionApiCultureProductionSavePostRequest = {}, options?: AxiosRequestConfig) {
        return CultureProductionApiFp(this.configuration).cultureProductionSavePost(requestParameters.cultureProductionSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureProductionApiCultureProductionSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureProductionApi
     */
    public cultureProductionSearchGet(requestParameters: CultureProductionApiCultureProductionSearchGetRequest, options?: AxiosRequestConfig) {
        return CultureProductionApiFp(this.configuration).cultureProductionSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.platform, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CultureRuleApi - axios parameter creator
 * @export
 */
export const CultureRuleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cultureRuleFindGet', 'id', id)
            const localVarPath = `/CultureRule/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleListPeriodGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cultureRuleListPeriodGet', 'id', id)
            const localVarPath = `/CultureRule/ListPeriod`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CultureRuleSaveParams} [cultureRuleSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleSavePost: async (cultureRuleSaveParams?: CultureRuleSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CultureRule/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cultureRuleSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [breedId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleSearchGet: async (pi: number, ps: number, breedId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('cultureRuleSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('cultureRuleSearchGet', 'ps', ps)
            const localVarPath = `/CultureRule/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (breedId !== undefined) {
                localVarQueryParameter['BreedId'] = breedId;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CultureRuleUpdatePeriodSortParams} [cultureRuleUpdatePeriodSortParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleUpdatePeriodSortPost: async (cultureRuleUpdatePeriodSortParams?: CultureRuleUpdatePeriodSortParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CultureRule/UpdatePeriodSort`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cultureRuleUpdatePeriodSortParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CultureRuleApi - functional programming interface
 * @export
 */
export const CultureRuleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CultureRuleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureRuleFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureRuleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureRuleFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureRuleListPeriodGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CultureRulePeriodDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureRuleListPeriodGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CultureRuleSaveParams} [cultureRuleSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureRuleSavePost(cultureRuleSaveParams?: CultureRuleSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureRuleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureRuleSavePost(cultureRuleSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [breedId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureRuleSearchGet(pi: number, ps: number, breedId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureRuleDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureRuleSearchGet(pi, ps, breedId, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CultureRuleUpdatePeriodSortParams} [cultureRuleUpdatePeriodSortParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureRuleUpdatePeriodSortPost(cultureRuleUpdatePeriodSortParams?: CultureRuleUpdatePeriodSortParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureRuleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureRuleUpdatePeriodSortPost(cultureRuleUpdatePeriodSortParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CultureRuleApi - factory interface
 * @export
 */
export const CultureRuleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CultureRuleApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleFindGet(id: number, options?: any): AxiosPromise<CultureRuleDto> {
            return localVarFp.cultureRuleFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleListPeriodGet(id: number, options?: any): AxiosPromise<Array<CultureRulePeriodDto>> {
            return localVarFp.cultureRuleListPeriodGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CultureRuleSaveParams} [cultureRuleSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleSavePost(cultureRuleSaveParams?: CultureRuleSaveParams, options?: any): AxiosPromise<CultureRuleDto> {
            return localVarFp.cultureRuleSavePost(cultureRuleSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [breedId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleSearchGet(pi: number, ps: number, breedId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<CultureRuleDtoSearchResponseDto> {
            return localVarFp.cultureRuleSearchGet(pi, ps, breedId, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CultureRuleUpdatePeriodSortParams} [cultureRuleUpdatePeriodSortParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleUpdatePeriodSortPost(cultureRuleUpdatePeriodSortParams?: CultureRuleUpdatePeriodSortParams, options?: any): AxiosPromise<CultureRuleDto> {
            return localVarFp.cultureRuleUpdatePeriodSortPost(cultureRuleUpdatePeriodSortParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cultureRuleFindGet operation in CultureRuleApi.
 * @export
 * @interface CultureRuleApiCultureRuleFindGetRequest
 */
export interface CultureRuleApiCultureRuleFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureRuleApiCultureRuleFindGet
     */
    readonly id: number
}

/**
 * Request parameters for cultureRuleListPeriodGet operation in CultureRuleApi.
 * @export
 * @interface CultureRuleApiCultureRuleListPeriodGetRequest
 */
export interface CultureRuleApiCultureRuleListPeriodGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureRuleApiCultureRuleListPeriodGet
     */
    readonly id: number
}

/**
 * Request parameters for cultureRuleSavePost operation in CultureRuleApi.
 * @export
 * @interface CultureRuleApiCultureRuleSavePostRequest
 */
export interface CultureRuleApiCultureRuleSavePostRequest {
    /**
     * 
     * @type {CultureRuleSaveParams}
     * @memberof CultureRuleApiCultureRuleSavePost
     */
    readonly cultureRuleSaveParams?: CultureRuleSaveParams
}

/**
 * Request parameters for cultureRuleSearchGet operation in CultureRuleApi.
 * @export
 * @interface CultureRuleApiCultureRuleSearchGetRequest
 */
export interface CultureRuleApiCultureRuleSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureRuleApiCultureRuleSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof CultureRuleApiCultureRuleSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {number}
     * @memberof CultureRuleApiCultureRuleSearchGet
     */
    readonly breedId?: number

    /**
     * 
     * @type {string}
     * @memberof CultureRuleApiCultureRuleSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof CultureRuleApiCultureRuleSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof CultureRuleApiCultureRuleSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * Request parameters for cultureRuleUpdatePeriodSortPost operation in CultureRuleApi.
 * @export
 * @interface CultureRuleApiCultureRuleUpdatePeriodSortPostRequest
 */
export interface CultureRuleApiCultureRuleUpdatePeriodSortPostRequest {
    /**
     * 
     * @type {CultureRuleUpdatePeriodSortParams}
     * @memberof CultureRuleApiCultureRuleUpdatePeriodSortPost
     */
    readonly cultureRuleUpdatePeriodSortParams?: CultureRuleUpdatePeriodSortParams
}

/**
 * CultureRuleApi - object-oriented interface
 * @export
 * @class CultureRuleApi
 * @extends {BaseAPI}
 */
export class CultureRuleApi extends BaseAPI {
    /**
     * 
     * @param {CultureRuleApiCultureRuleFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureRuleApi
     */
    public cultureRuleFindGet(requestParameters: CultureRuleApiCultureRuleFindGetRequest, options?: AxiosRequestConfig) {
        return CultureRuleApiFp(this.configuration).cultureRuleFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureRuleApiCultureRuleListPeriodGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureRuleApi
     */
    public cultureRuleListPeriodGet(requestParameters: CultureRuleApiCultureRuleListPeriodGetRequest, options?: AxiosRequestConfig) {
        return CultureRuleApiFp(this.configuration).cultureRuleListPeriodGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureRuleApiCultureRuleSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureRuleApi
     */
    public cultureRuleSavePost(requestParameters: CultureRuleApiCultureRuleSavePostRequest = {}, options?: AxiosRequestConfig) {
        return CultureRuleApiFp(this.configuration).cultureRuleSavePost(requestParameters.cultureRuleSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureRuleApiCultureRuleSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureRuleApi
     */
    public cultureRuleSearchGet(requestParameters: CultureRuleApiCultureRuleSearchGetRequest, options?: AxiosRequestConfig) {
        return CultureRuleApiFp(this.configuration).cultureRuleSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.breedId, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureRuleApiCultureRuleUpdatePeriodSortPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureRuleApi
     */
    public cultureRuleUpdatePeriodSortPost(requestParameters: CultureRuleApiCultureRuleUpdatePeriodSortPostRequest = {}, options?: AxiosRequestConfig) {
        return CultureRuleApiFp(this.configuration).cultureRuleUpdatePeriodSortPost(requestParameters.cultureRuleUpdatePeriodSortParams, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CultureRuleDetailApi - axios parameter creator
 * @export
 */
export const CultureRuleDetailApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {boolean} [includeCultureRule] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleDetailFindGet: async (id: number, includeCultureRule?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cultureRuleDetailFindGet', 'id', id)
            const localVarPath = `/CultureRuleDetail/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeCultureRule !== undefined) {
                localVarQueryParameter['IncludeCultureRule'] = includeCultureRule;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CultureRuleDetailRemoveParams} [cultureRuleDetailRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleDetailRemovePost: async (cultureRuleDetailRemoveParams?: CultureRuleDetailRemoveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CultureRuleDetail/Remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cultureRuleDetailRemoveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CultureRuleDetailSaveParams} [cultureRuleDetailSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleDetailSavePost: async (cultureRuleDetailSaveParams?: CultureRuleDetailSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CultureRuleDetail/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cultureRuleDetailSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [cultureRulePeriodId] 
         * @param {boolean} [isGlobalRule] 
         * @param {number} [cultureRuleId] 
         * @param {WorkType} [type] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleDetailSearchGet: async (pi: number, ps: number, cultureRulePeriodId?: number, isGlobalRule?: boolean, cultureRuleId?: number, type?: WorkType, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('cultureRuleDetailSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('cultureRuleDetailSearchGet', 'ps', ps)
            const localVarPath = `/CultureRuleDetail/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cultureRulePeriodId !== undefined) {
                localVarQueryParameter['CultureRulePeriodId'] = cultureRulePeriodId;
            }

            if (isGlobalRule !== undefined) {
                localVarQueryParameter['IsGlobalRule'] = isGlobalRule;
            }

            if (cultureRuleId !== undefined) {
                localVarQueryParameter['CultureRuleId'] = cultureRuleId;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CultureRuleDetailApi - functional programming interface
 * @export
 */
export const CultureRuleDetailApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CultureRuleDetailApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {boolean} [includeCultureRule] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureRuleDetailFindGet(id: number, includeCultureRule?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureRuleDetailDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureRuleDetailFindGet(id, includeCultureRule, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CultureRuleDetailRemoveParams} [cultureRuleDetailRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureRuleDetailRemovePost(cultureRuleDetailRemoveParams?: CultureRuleDetailRemoveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureRuleDetailDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureRuleDetailRemovePost(cultureRuleDetailRemoveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CultureRuleDetailSaveParams} [cultureRuleDetailSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureRuleDetailSavePost(cultureRuleDetailSaveParams?: CultureRuleDetailSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureRuleDetailDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureRuleDetailSavePost(cultureRuleDetailSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [cultureRulePeriodId] 
         * @param {boolean} [isGlobalRule] 
         * @param {number} [cultureRuleId] 
         * @param {WorkType} [type] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureRuleDetailSearchGet(pi: number, ps: number, cultureRulePeriodId?: number, isGlobalRule?: boolean, cultureRuleId?: number, type?: WorkType, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureRuleDetailDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureRuleDetailSearchGet(pi, ps, cultureRulePeriodId, isGlobalRule, cultureRuleId, type, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CultureRuleDetailApi - factory interface
 * @export
 */
export const CultureRuleDetailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CultureRuleDetailApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {boolean} [includeCultureRule] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleDetailFindGet(id: number, includeCultureRule?: boolean, options?: any): AxiosPromise<CultureRuleDetailDto> {
            return localVarFp.cultureRuleDetailFindGet(id, includeCultureRule, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CultureRuleDetailRemoveParams} [cultureRuleDetailRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleDetailRemovePost(cultureRuleDetailRemoveParams?: CultureRuleDetailRemoveParams, options?: any): AxiosPromise<CultureRuleDetailDto> {
            return localVarFp.cultureRuleDetailRemovePost(cultureRuleDetailRemoveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CultureRuleDetailSaveParams} [cultureRuleDetailSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleDetailSavePost(cultureRuleDetailSaveParams?: CultureRuleDetailSaveParams, options?: any): AxiosPromise<CultureRuleDetailDto> {
            return localVarFp.cultureRuleDetailSavePost(cultureRuleDetailSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [cultureRulePeriodId] 
         * @param {boolean} [isGlobalRule] 
         * @param {number} [cultureRuleId] 
         * @param {WorkType} [type] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleDetailSearchGet(pi: number, ps: number, cultureRulePeriodId?: number, isGlobalRule?: boolean, cultureRuleId?: number, type?: WorkType, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<CultureRuleDetailDtoSearchResponseDto> {
            return localVarFp.cultureRuleDetailSearchGet(pi, ps, cultureRulePeriodId, isGlobalRule, cultureRuleId, type, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cultureRuleDetailFindGet operation in CultureRuleDetailApi.
 * @export
 * @interface CultureRuleDetailApiCultureRuleDetailFindGetRequest
 */
export interface CultureRuleDetailApiCultureRuleDetailFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailApiCultureRuleDetailFindGet
     */
    readonly id: number

    /**
     * 
     * @type {boolean}
     * @memberof CultureRuleDetailApiCultureRuleDetailFindGet
     */
    readonly includeCultureRule?: boolean
}

/**
 * Request parameters for cultureRuleDetailRemovePost operation in CultureRuleDetailApi.
 * @export
 * @interface CultureRuleDetailApiCultureRuleDetailRemovePostRequest
 */
export interface CultureRuleDetailApiCultureRuleDetailRemovePostRequest {
    /**
     * 
     * @type {CultureRuleDetailRemoveParams}
     * @memberof CultureRuleDetailApiCultureRuleDetailRemovePost
     */
    readonly cultureRuleDetailRemoveParams?: CultureRuleDetailRemoveParams
}

/**
 * Request parameters for cultureRuleDetailSavePost operation in CultureRuleDetailApi.
 * @export
 * @interface CultureRuleDetailApiCultureRuleDetailSavePostRequest
 */
export interface CultureRuleDetailApiCultureRuleDetailSavePostRequest {
    /**
     * 
     * @type {CultureRuleDetailSaveParams}
     * @memberof CultureRuleDetailApiCultureRuleDetailSavePost
     */
    readonly cultureRuleDetailSaveParams?: CultureRuleDetailSaveParams
}

/**
 * Request parameters for cultureRuleDetailSearchGet operation in CultureRuleDetailApi.
 * @export
 * @interface CultureRuleDetailApiCultureRuleDetailSearchGetRequest
 */
export interface CultureRuleDetailApiCultureRuleDetailSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailApiCultureRuleDetailSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailApiCultureRuleDetailSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailApiCultureRuleDetailSearchGet
     */
    readonly cultureRulePeriodId?: number

    /**
     * 
     * @type {boolean}
     * @memberof CultureRuleDetailApiCultureRuleDetailSearchGet
     */
    readonly isGlobalRule?: boolean

    /**
     * 
     * @type {number}
     * @memberof CultureRuleDetailApiCultureRuleDetailSearchGet
     */
    readonly cultureRuleId?: number

    /**
     * 
     * @type {WorkType}
     * @memberof CultureRuleDetailApiCultureRuleDetailSearchGet
     */
    readonly type?: WorkType

    /**
     * 
     * @type {string}
     * @memberof CultureRuleDetailApiCultureRuleDetailSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof CultureRuleDetailApiCultureRuleDetailSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof CultureRuleDetailApiCultureRuleDetailSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * CultureRuleDetailApi - object-oriented interface
 * @export
 * @class CultureRuleDetailApi
 * @extends {BaseAPI}
 */
export class CultureRuleDetailApi extends BaseAPI {
    /**
     * 
     * @param {CultureRuleDetailApiCultureRuleDetailFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureRuleDetailApi
     */
    public cultureRuleDetailFindGet(requestParameters: CultureRuleDetailApiCultureRuleDetailFindGetRequest, options?: AxiosRequestConfig) {
        return CultureRuleDetailApiFp(this.configuration).cultureRuleDetailFindGet(requestParameters.id, requestParameters.includeCultureRule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureRuleDetailApiCultureRuleDetailRemovePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureRuleDetailApi
     */
    public cultureRuleDetailRemovePost(requestParameters: CultureRuleDetailApiCultureRuleDetailRemovePostRequest = {}, options?: AxiosRequestConfig) {
        return CultureRuleDetailApiFp(this.configuration).cultureRuleDetailRemovePost(requestParameters.cultureRuleDetailRemoveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureRuleDetailApiCultureRuleDetailSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureRuleDetailApi
     */
    public cultureRuleDetailSavePost(requestParameters: CultureRuleDetailApiCultureRuleDetailSavePostRequest = {}, options?: AxiosRequestConfig) {
        return CultureRuleDetailApiFp(this.configuration).cultureRuleDetailSavePost(requestParameters.cultureRuleDetailSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureRuleDetailApiCultureRuleDetailSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureRuleDetailApi
     */
    public cultureRuleDetailSearchGet(requestParameters: CultureRuleDetailApiCultureRuleDetailSearchGetRequest, options?: AxiosRequestConfig) {
        return CultureRuleDetailApiFp(this.configuration).cultureRuleDetailSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.cultureRulePeriodId, requestParameters.isGlobalRule, requestParameters.cultureRuleId, requestParameters.type, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CultureRulePeriodApi - axios parameter creator
 * @export
 */
export const CultureRulePeriodApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRulePeriodFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cultureRulePeriodFindGet', 'id', id)
            const localVarPath = `/CultureRulePeriod/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CultureRulePeriodRemoveParams} [cultureRulePeriodRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRulePeriodRemovePost: async (cultureRulePeriodRemoveParams?: CultureRulePeriodRemoveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CultureRulePeriod/Remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cultureRulePeriodRemoveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CultureRulePeriodSaveParams} [cultureRulePeriodSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRulePeriodSavePost: async (cultureRulePeriodSaveParams?: CultureRulePeriodSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CultureRulePeriod/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cultureRulePeriodSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [cultureRuleId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRulePeriodSearchGet: async (pi: number, ps: number, cultureRuleId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('cultureRulePeriodSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('cultureRulePeriodSearchGet', 'ps', ps)
            const localVarPath = `/CultureRulePeriod/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cultureRuleId !== undefined) {
                localVarQueryParameter['CultureRuleId'] = cultureRuleId;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CultureRulePeriodApi - functional programming interface
 * @export
 */
export const CultureRulePeriodApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CultureRulePeriodApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureRulePeriodFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureRulePeriodDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureRulePeriodFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CultureRulePeriodRemoveParams} [cultureRulePeriodRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureRulePeriodRemovePost(cultureRulePeriodRemoveParams?: CultureRulePeriodRemoveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureRulePeriodDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureRulePeriodRemovePost(cultureRulePeriodRemoveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CultureRulePeriodSaveParams} [cultureRulePeriodSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureRulePeriodSavePost(cultureRulePeriodSaveParams?: CultureRulePeriodSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureRulePeriodDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureRulePeriodSavePost(cultureRulePeriodSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [cultureRuleId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureRulePeriodSearchGet(pi: number, ps: number, cultureRuleId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureRulePeriodDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureRulePeriodSearchGet(pi, ps, cultureRuleId, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CultureRulePeriodApi - factory interface
 * @export
 */
export const CultureRulePeriodApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CultureRulePeriodApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRulePeriodFindGet(id: number, options?: any): AxiosPromise<CultureRulePeriodDto> {
            return localVarFp.cultureRulePeriodFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CultureRulePeriodRemoveParams} [cultureRulePeriodRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRulePeriodRemovePost(cultureRulePeriodRemoveParams?: CultureRulePeriodRemoveParams, options?: any): AxiosPromise<CultureRulePeriodDto> {
            return localVarFp.cultureRulePeriodRemovePost(cultureRulePeriodRemoveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CultureRulePeriodSaveParams} [cultureRulePeriodSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRulePeriodSavePost(cultureRulePeriodSaveParams?: CultureRulePeriodSaveParams, options?: any): AxiosPromise<CultureRulePeriodDto> {
            return localVarFp.cultureRulePeriodSavePost(cultureRulePeriodSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [cultureRuleId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRulePeriodSearchGet(pi: number, ps: number, cultureRuleId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<CultureRulePeriodDtoSearchResponseDto> {
            return localVarFp.cultureRulePeriodSearchGet(pi, ps, cultureRuleId, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cultureRulePeriodFindGet operation in CultureRulePeriodApi.
 * @export
 * @interface CultureRulePeriodApiCultureRulePeriodFindGetRequest
 */
export interface CultureRulePeriodApiCultureRulePeriodFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureRulePeriodApiCultureRulePeriodFindGet
     */
    readonly id: number
}

/**
 * Request parameters for cultureRulePeriodRemovePost operation in CultureRulePeriodApi.
 * @export
 * @interface CultureRulePeriodApiCultureRulePeriodRemovePostRequest
 */
export interface CultureRulePeriodApiCultureRulePeriodRemovePostRequest {
    /**
     * 
     * @type {CultureRulePeriodRemoveParams}
     * @memberof CultureRulePeriodApiCultureRulePeriodRemovePost
     */
    readonly cultureRulePeriodRemoveParams?: CultureRulePeriodRemoveParams
}

/**
 * Request parameters for cultureRulePeriodSavePost operation in CultureRulePeriodApi.
 * @export
 * @interface CultureRulePeriodApiCultureRulePeriodSavePostRequest
 */
export interface CultureRulePeriodApiCultureRulePeriodSavePostRequest {
    /**
     * 
     * @type {CultureRulePeriodSaveParams}
     * @memberof CultureRulePeriodApiCultureRulePeriodSavePost
     */
    readonly cultureRulePeriodSaveParams?: CultureRulePeriodSaveParams
}

/**
 * Request parameters for cultureRulePeriodSearchGet operation in CultureRulePeriodApi.
 * @export
 * @interface CultureRulePeriodApiCultureRulePeriodSearchGetRequest
 */
export interface CultureRulePeriodApiCultureRulePeriodSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureRulePeriodApiCultureRulePeriodSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof CultureRulePeriodApiCultureRulePeriodSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {number}
     * @memberof CultureRulePeriodApiCultureRulePeriodSearchGet
     */
    readonly cultureRuleId?: number

    /**
     * 
     * @type {string}
     * @memberof CultureRulePeriodApiCultureRulePeriodSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof CultureRulePeriodApiCultureRulePeriodSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof CultureRulePeriodApiCultureRulePeriodSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * CultureRulePeriodApi - object-oriented interface
 * @export
 * @class CultureRulePeriodApi
 * @extends {BaseAPI}
 */
export class CultureRulePeriodApi extends BaseAPI {
    /**
     * 
     * @param {CultureRulePeriodApiCultureRulePeriodFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureRulePeriodApi
     */
    public cultureRulePeriodFindGet(requestParameters: CultureRulePeriodApiCultureRulePeriodFindGetRequest, options?: AxiosRequestConfig) {
        return CultureRulePeriodApiFp(this.configuration).cultureRulePeriodFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureRulePeriodApiCultureRulePeriodRemovePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureRulePeriodApi
     */
    public cultureRulePeriodRemovePost(requestParameters: CultureRulePeriodApiCultureRulePeriodRemovePostRequest = {}, options?: AxiosRequestConfig) {
        return CultureRulePeriodApiFp(this.configuration).cultureRulePeriodRemovePost(requestParameters.cultureRulePeriodRemoveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureRulePeriodApiCultureRulePeriodSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureRulePeriodApi
     */
    public cultureRulePeriodSavePost(requestParameters: CultureRulePeriodApiCultureRulePeriodSavePostRequest = {}, options?: AxiosRequestConfig) {
        return CultureRulePeriodApiFp(this.configuration).cultureRulePeriodSavePost(requestParameters.cultureRulePeriodSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureRulePeriodApiCultureRulePeriodSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureRulePeriodApi
     */
    public cultureRulePeriodSearchGet(requestParameters: CultureRulePeriodApiCultureRulePeriodSearchGetRequest, options?: AxiosRequestConfig) {
        return CultureRulePeriodApiFp(this.configuration).cultureRulePeriodSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.cultureRuleId, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CultureRuleSensorRangeApi - axios parameter creator
 * @export
 */
export const CultureRuleSensorRangeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleSensorRangeFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cultureRuleSensorRangeFindGet', 'id', id)
            const localVarPath = `/CultureRuleSensorRange/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CultureRuleSensorRangeSaveParams} [cultureRuleSensorRangeSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleSensorRangeSavePost: async (cultureRuleSensorRangeSaveParams?: CultureRuleSensorRangeSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CultureRuleSensorRange/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cultureRuleSensorRangeSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [cultureRuleId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleSensorRangeSearchGet: async (pi: number, ps: number, cultureRuleId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('cultureRuleSensorRangeSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('cultureRuleSensorRangeSearchGet', 'ps', ps)
            const localVarPath = `/CultureRuleSensorRange/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cultureRuleId !== undefined) {
                localVarQueryParameter['CultureRuleId'] = cultureRuleId;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CultureRuleSensorRangeApi - functional programming interface
 * @export
 */
export const CultureRuleSensorRangeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CultureRuleSensorRangeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureRuleSensorRangeFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureRuleSensorRangeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureRuleSensorRangeFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CultureRuleSensorRangeSaveParams} [cultureRuleSensorRangeSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureRuleSensorRangeSavePost(cultureRuleSensorRangeSaveParams?: CultureRuleSensorRangeSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureRuleSensorRangeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureRuleSensorRangeSavePost(cultureRuleSensorRangeSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [cultureRuleId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cultureRuleSensorRangeSearchGet(pi: number, ps: number, cultureRuleId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CultureRuleSensorRangeDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cultureRuleSensorRangeSearchGet(pi, ps, cultureRuleId, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CultureRuleSensorRangeApi - factory interface
 * @export
 */
export const CultureRuleSensorRangeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CultureRuleSensorRangeApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleSensorRangeFindGet(id: number, options?: any): AxiosPromise<CultureRuleSensorRangeDto> {
            return localVarFp.cultureRuleSensorRangeFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CultureRuleSensorRangeSaveParams} [cultureRuleSensorRangeSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleSensorRangeSavePost(cultureRuleSensorRangeSaveParams?: CultureRuleSensorRangeSaveParams, options?: any): AxiosPromise<CultureRuleSensorRangeDto> {
            return localVarFp.cultureRuleSensorRangeSavePost(cultureRuleSensorRangeSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [cultureRuleId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cultureRuleSensorRangeSearchGet(pi: number, ps: number, cultureRuleId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<CultureRuleSensorRangeDtoSearchResponseDto> {
            return localVarFp.cultureRuleSensorRangeSearchGet(pi, ps, cultureRuleId, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cultureRuleSensorRangeFindGet operation in CultureRuleSensorRangeApi.
 * @export
 * @interface CultureRuleSensorRangeApiCultureRuleSensorRangeFindGetRequest
 */
export interface CultureRuleSensorRangeApiCultureRuleSensorRangeFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureRuleSensorRangeApiCultureRuleSensorRangeFindGet
     */
    readonly id: number
}

/**
 * Request parameters for cultureRuleSensorRangeSavePost operation in CultureRuleSensorRangeApi.
 * @export
 * @interface CultureRuleSensorRangeApiCultureRuleSensorRangeSavePostRequest
 */
export interface CultureRuleSensorRangeApiCultureRuleSensorRangeSavePostRequest {
    /**
     * 
     * @type {CultureRuleSensorRangeSaveParams}
     * @memberof CultureRuleSensorRangeApiCultureRuleSensorRangeSavePost
     */
    readonly cultureRuleSensorRangeSaveParams?: CultureRuleSensorRangeSaveParams
}

/**
 * Request parameters for cultureRuleSensorRangeSearchGet operation in CultureRuleSensorRangeApi.
 * @export
 * @interface CultureRuleSensorRangeApiCultureRuleSensorRangeSearchGetRequest
 */
export interface CultureRuleSensorRangeApiCultureRuleSensorRangeSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof CultureRuleSensorRangeApiCultureRuleSensorRangeSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof CultureRuleSensorRangeApiCultureRuleSensorRangeSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {number}
     * @memberof CultureRuleSensorRangeApiCultureRuleSensorRangeSearchGet
     */
    readonly cultureRuleId?: number

    /**
     * 
     * @type {string}
     * @memberof CultureRuleSensorRangeApiCultureRuleSensorRangeSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof CultureRuleSensorRangeApiCultureRuleSensorRangeSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof CultureRuleSensorRangeApiCultureRuleSensorRangeSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * CultureRuleSensorRangeApi - object-oriented interface
 * @export
 * @class CultureRuleSensorRangeApi
 * @extends {BaseAPI}
 */
export class CultureRuleSensorRangeApi extends BaseAPI {
    /**
     * 
     * @param {CultureRuleSensorRangeApiCultureRuleSensorRangeFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureRuleSensorRangeApi
     */
    public cultureRuleSensorRangeFindGet(requestParameters: CultureRuleSensorRangeApiCultureRuleSensorRangeFindGetRequest, options?: AxiosRequestConfig) {
        return CultureRuleSensorRangeApiFp(this.configuration).cultureRuleSensorRangeFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureRuleSensorRangeApiCultureRuleSensorRangeSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureRuleSensorRangeApi
     */
    public cultureRuleSensorRangeSavePost(requestParameters: CultureRuleSensorRangeApiCultureRuleSensorRangeSavePostRequest = {}, options?: AxiosRequestConfig) {
        return CultureRuleSensorRangeApiFp(this.configuration).cultureRuleSensorRangeSavePost(requestParameters.cultureRuleSensorRangeSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CultureRuleSensorRangeApiCultureRuleSensorRangeSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CultureRuleSensorRangeApi
     */
    public cultureRuleSensorRangeSearchGet(requestParameters: CultureRuleSensorRangeApiCultureRuleSensorRangeSearchGetRequest, options?: AxiosRequestConfig) {
        return CultureRuleSensorRangeApiFp(this.configuration).cultureRuleSensorRangeSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.cultureRuleId, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DataCenterApi - axios parameter creator
 * @export
 */
export const DataCenterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [pondId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataCenterFeedAnalyseGet: async (pondId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DataCenter/FeedAnalyse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pondId !== undefined) {
                localVarQueryParameter['PondId'] = pondId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataCenterApi - functional programming interface
 * @export
 */
export const DataCenterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataCenterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [pondId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dataCenterFeedAnalyseGet(pondId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataCenterFeedAnalyseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dataCenterFeedAnalyseGet(pondId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DataCenterApi - factory interface
 * @export
 */
export const DataCenterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataCenterApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [pondId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataCenterFeedAnalyseGet(pondId?: number, options?: any): AxiosPromise<DataCenterFeedAnalyseResponse> {
            return localVarFp.dataCenterFeedAnalyseGet(pondId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for dataCenterFeedAnalyseGet operation in DataCenterApi.
 * @export
 * @interface DataCenterApiDataCenterFeedAnalyseGetRequest
 */
export interface DataCenterApiDataCenterFeedAnalyseGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DataCenterApiDataCenterFeedAnalyseGet
     */
    readonly pondId?: number
}

/**
 * DataCenterApi - object-oriented interface
 * @export
 * @class DataCenterApi
 * @extends {BaseAPI}
 */
export class DataCenterApi extends BaseAPI {
    /**
     * 
     * @param {DataCenterApiDataCenterFeedAnalyseGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataCenterApi
     */
    public dataCenterFeedAnalyseGet(requestParameters: DataCenterApiDataCenterFeedAnalyseGetRequest = {}, options?: AxiosRequestConfig) {
        return DataCenterApiFp(this.configuration).dataCenterFeedAnalyseGet(requestParameters.pondId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DeviceApi - axios parameter creator
 * @export
 */
export const DeviceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deviceFindGet', 'id', id)
            const localVarPath = `/Device/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeviceRemoveParams} [deviceRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceRemovePost: async (deviceRemoveParams?: DeviceRemoveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Device/Remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceRemoveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeviceSaveParams} [deviceSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceSavePost: async (deviceSaveParams?: DeviceSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Device/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [groupName] 
         * @param {ControlDeviceType} [controlDeviceType] 
         * @param {SensorDeviceType} [sensorDeviceType] 
         * @param {DeviceType} [type] 
         * @param {number} [pondId] 
         * @param {string} [keyword] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceSearchGet: async (pi: number, ps: number, groupName?: string, controlDeviceType?: ControlDeviceType, sensorDeviceType?: SensorDeviceType, type?: DeviceType, pondId?: number, keyword?: string, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('deviceSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('deviceSearchGet', 'ps', ps)
            const localVarPath = `/Device/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (groupName !== undefined) {
                localVarQueryParameter['GroupName'] = groupName;
            }

            if (controlDeviceType !== undefined) {
                localVarQueryParameter['ControlDeviceType'] = controlDeviceType;
            }

            if (sensorDeviceType !== undefined) {
                localVarQueryParameter['SensorDeviceType'] = sensorDeviceType;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (pondId !== undefined) {
                localVarQueryParameter['PondId'] = pondId;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeviceTurnOffParams} [deviceTurnOffParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTurnOffPost: async (deviceTurnOffParams?: DeviceTurnOffParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Device/TurnOff`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceTurnOffParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeviceTurnOnParams} [deviceTurnOnParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTurnOnPost: async (deviceTurnOnParams?: DeviceTurnOnParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Device/TurnOn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceTurnOnParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeviceUpdatePondParams} [deviceUpdatePondParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceUpdatePondPost: async (deviceUpdatePondParams?: DeviceUpdatePondParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Device/UpdatePond`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceUpdatePondParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeviceUpdateValueParams} [deviceUpdateValueParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceUpdateValuePost: async (deviceUpdateValueParams?: DeviceUpdateValueParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Device/UpdateValue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceUpdateValueParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeviceWriteValueParams} [deviceWriteValueParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceWriteValuePost: async (deviceWriteValueParams?: DeviceWriteValueParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Device/WriteValue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceWriteValueParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceApi - functional programming interface
 * @export
 */
export const DeviceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeviceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeviceRemoveParams} [deviceRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceRemovePost(deviceRemoveParams?: DeviceRemoveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceRemovePost(deviceRemoveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeviceSaveParams} [deviceSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceSavePost(deviceSaveParams?: DeviceSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceSavePost(deviceSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [groupName] 
         * @param {ControlDeviceType} [controlDeviceType] 
         * @param {SensorDeviceType} [sensorDeviceType] 
         * @param {DeviceType} [type] 
         * @param {number} [pondId] 
         * @param {string} [keyword] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceSearchGet(pi: number, ps: number, groupName?: string, controlDeviceType?: ControlDeviceType, sensorDeviceType?: SensorDeviceType, type?: DeviceType, pondId?: number, keyword?: string, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceSearchGet(pi, ps, groupName, controlDeviceType, sensorDeviceType, type, pondId, keyword, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeviceTurnOffParams} [deviceTurnOffParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceTurnOffPost(deviceTurnOffParams?: DeviceTurnOffParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceTurnOffPost(deviceTurnOffParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeviceTurnOnParams} [deviceTurnOnParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceTurnOnPost(deviceTurnOnParams?: DeviceTurnOnParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceTurnOnPost(deviceTurnOnParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeviceUpdatePondParams} [deviceUpdatePondParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceUpdatePondPost(deviceUpdatePondParams?: DeviceUpdatePondParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceUpdatePondPost(deviceUpdatePondParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeviceUpdateValueParams} [deviceUpdateValueParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceUpdateValuePost(deviceUpdateValueParams?: DeviceUpdateValueParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceUpdateValuePost(deviceUpdateValueParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeviceWriteValueParams} [deviceWriteValueParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceWriteValuePost(deviceWriteValueParams?: DeviceWriteValueParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceWriteValuePost(deviceWriteValueParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeviceApi - factory interface
 * @export
 */
export const DeviceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeviceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceFindGet(id: number, options?: any): AxiosPromise<DeviceDto> {
            return localVarFp.deviceFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeviceRemoveParams} [deviceRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceRemovePost(deviceRemoveParams?: DeviceRemoveParams, options?: any): AxiosPromise<DeviceDto> {
            return localVarFp.deviceRemovePost(deviceRemoveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeviceSaveParams} [deviceSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceSavePost(deviceSaveParams?: DeviceSaveParams, options?: any): AxiosPromise<DeviceDto> {
            return localVarFp.deviceSavePost(deviceSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [groupName] 
         * @param {ControlDeviceType} [controlDeviceType] 
         * @param {SensorDeviceType} [sensorDeviceType] 
         * @param {DeviceType} [type] 
         * @param {number} [pondId] 
         * @param {string} [keyword] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceSearchGet(pi: number, ps: number, groupName?: string, controlDeviceType?: ControlDeviceType, sensorDeviceType?: SensorDeviceType, type?: DeviceType, pondId?: number, keyword?: string, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<DeviceDtoSearchResponseDto> {
            return localVarFp.deviceSearchGet(pi, ps, groupName, controlDeviceType, sensorDeviceType, type, pondId, keyword, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeviceTurnOffParams} [deviceTurnOffParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTurnOffPost(deviceTurnOffParams?: DeviceTurnOffParams, options?: any): AxiosPromise<DeviceDto> {
            return localVarFp.deviceTurnOffPost(deviceTurnOffParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeviceTurnOnParams} [deviceTurnOnParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceTurnOnPost(deviceTurnOnParams?: DeviceTurnOnParams, options?: any): AxiosPromise<DeviceDto> {
            return localVarFp.deviceTurnOnPost(deviceTurnOnParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeviceUpdatePondParams} [deviceUpdatePondParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceUpdatePondPost(deviceUpdatePondParams?: DeviceUpdatePondParams, options?: any): AxiosPromise<DeviceDto> {
            return localVarFp.deviceUpdatePondPost(deviceUpdatePondParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeviceUpdateValueParams} [deviceUpdateValueParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceUpdateValuePost(deviceUpdateValueParams?: DeviceUpdateValueParams, options?: any): AxiosPromise<DeviceDto> {
            return localVarFp.deviceUpdateValuePost(deviceUpdateValueParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeviceWriteValueParams} [deviceWriteValueParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceWriteValuePost(deviceWriteValueParams?: DeviceWriteValueParams, options?: any): AxiosPromise<DeviceDto> {
            return localVarFp.deviceWriteValuePost(deviceWriteValueParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deviceFindGet operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceFindGetRequest
 */
export interface DeviceApiDeviceFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DeviceApiDeviceFindGet
     */
    readonly id: number
}

/**
 * Request parameters for deviceRemovePost operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceRemovePostRequest
 */
export interface DeviceApiDeviceRemovePostRequest {
    /**
     * 
     * @type {DeviceRemoveParams}
     * @memberof DeviceApiDeviceRemovePost
     */
    readonly deviceRemoveParams?: DeviceRemoveParams
}

/**
 * Request parameters for deviceSavePost operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceSavePostRequest
 */
export interface DeviceApiDeviceSavePostRequest {
    /**
     * 
     * @type {DeviceSaveParams}
     * @memberof DeviceApiDeviceSavePost
     */
    readonly deviceSaveParams?: DeviceSaveParams
}

/**
 * Request parameters for deviceSearchGet operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceSearchGetRequest
 */
export interface DeviceApiDeviceSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DeviceApiDeviceSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof DeviceApiDeviceSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {string}
     * @memberof DeviceApiDeviceSearchGet
     */
    readonly groupName?: string

    /**
     * 
     * @type {ControlDeviceType}
     * @memberof DeviceApiDeviceSearchGet
     */
    readonly controlDeviceType?: ControlDeviceType

    /**
     * 
     * @type {SensorDeviceType}
     * @memberof DeviceApiDeviceSearchGet
     */
    readonly sensorDeviceType?: SensorDeviceType

    /**
     * 
     * @type {DeviceType}
     * @memberof DeviceApiDeviceSearchGet
     */
    readonly type?: DeviceType

    /**
     * 
     * @type {number}
     * @memberof DeviceApiDeviceSearchGet
     */
    readonly pondId?: number

    /**
     * 
     * @type {string}
     * @memberof DeviceApiDeviceSearchGet
     */
    readonly keyword?: string

    /**
     * 
     * @type {string}
     * @memberof DeviceApiDeviceSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof DeviceApiDeviceSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof DeviceApiDeviceSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * Request parameters for deviceTurnOffPost operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceTurnOffPostRequest
 */
export interface DeviceApiDeviceTurnOffPostRequest {
    /**
     * 
     * @type {DeviceTurnOffParams}
     * @memberof DeviceApiDeviceTurnOffPost
     */
    readonly deviceTurnOffParams?: DeviceTurnOffParams
}

/**
 * Request parameters for deviceTurnOnPost operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceTurnOnPostRequest
 */
export interface DeviceApiDeviceTurnOnPostRequest {
    /**
     * 
     * @type {DeviceTurnOnParams}
     * @memberof DeviceApiDeviceTurnOnPost
     */
    readonly deviceTurnOnParams?: DeviceTurnOnParams
}

/**
 * Request parameters for deviceUpdatePondPost operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceUpdatePondPostRequest
 */
export interface DeviceApiDeviceUpdatePondPostRequest {
    /**
     * 
     * @type {DeviceUpdatePondParams}
     * @memberof DeviceApiDeviceUpdatePondPost
     */
    readonly deviceUpdatePondParams?: DeviceUpdatePondParams
}

/**
 * Request parameters for deviceUpdateValuePost operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceUpdateValuePostRequest
 */
export interface DeviceApiDeviceUpdateValuePostRequest {
    /**
     * 
     * @type {DeviceUpdateValueParams}
     * @memberof DeviceApiDeviceUpdateValuePost
     */
    readonly deviceUpdateValueParams?: DeviceUpdateValueParams
}

/**
 * Request parameters for deviceWriteValuePost operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceWriteValuePostRequest
 */
export interface DeviceApiDeviceWriteValuePostRequest {
    /**
     * 
     * @type {DeviceWriteValueParams}
     * @memberof DeviceApiDeviceWriteValuePost
     */
    readonly deviceWriteValueParams?: DeviceWriteValueParams
}

/**
 * DeviceApi - object-oriented interface
 * @export
 * @class DeviceApi
 * @extends {BaseAPI}
 */
export class DeviceApi extends BaseAPI {
    /**
     * 
     * @param {DeviceApiDeviceFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public deviceFindGet(requestParameters: DeviceApiDeviceFindGetRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).deviceFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceApiDeviceRemovePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public deviceRemovePost(requestParameters: DeviceApiDeviceRemovePostRequest = {}, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).deviceRemovePost(requestParameters.deviceRemoveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceApiDeviceSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public deviceSavePost(requestParameters: DeviceApiDeviceSavePostRequest = {}, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).deviceSavePost(requestParameters.deviceSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceApiDeviceSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public deviceSearchGet(requestParameters: DeviceApiDeviceSearchGetRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).deviceSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.groupName, requestParameters.controlDeviceType, requestParameters.sensorDeviceType, requestParameters.type, requestParameters.pondId, requestParameters.keyword, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceApiDeviceTurnOffPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public deviceTurnOffPost(requestParameters: DeviceApiDeviceTurnOffPostRequest = {}, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).deviceTurnOffPost(requestParameters.deviceTurnOffParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceApiDeviceTurnOnPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public deviceTurnOnPost(requestParameters: DeviceApiDeviceTurnOnPostRequest = {}, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).deviceTurnOnPost(requestParameters.deviceTurnOnParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceApiDeviceUpdatePondPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public deviceUpdatePondPost(requestParameters: DeviceApiDeviceUpdatePondPostRequest = {}, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).deviceUpdatePondPost(requestParameters.deviceUpdatePondParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceApiDeviceUpdateValuePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public deviceUpdateValuePost(requestParameters: DeviceApiDeviceUpdateValuePostRequest = {}, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).deviceUpdateValuePost(requestParameters.deviceUpdateValueParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceApiDeviceWriteValuePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    public deviceWriteValuePost(requestParameters: DeviceApiDeviceWriteValuePostRequest = {}, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).deviceWriteValuePost(requestParameters.deviceWriteValueParams, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DeviceAutoControlEventApi - axios parameter creator
 * @export
 */
export const DeviceAutoControlEventApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceAutoControlEventFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deviceAutoControlEventFindGet', 'id', id)
            const localVarPath = `/DeviceAutoControlEvent/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} triggerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceAutoControlEventListGet: async (triggerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'triggerId' is not null or undefined
            assertParamExists('deviceAutoControlEventListGet', 'triggerId', triggerId)
            const localVarPath = `/DeviceAutoControlEvent/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (triggerId !== undefined) {
                localVarQueryParameter['TriggerId'] = triggerId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeviceAutoControlEventRemoveParams} [deviceAutoControlEventRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceAutoControlEventRemovePost: async (deviceAutoControlEventRemoveParams?: DeviceAutoControlEventRemoveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DeviceAutoControlEvent/Remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceAutoControlEventRemoveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeviceAutoControlEventSaveParams} [deviceAutoControlEventSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceAutoControlEventSavePost: async (deviceAutoControlEventSaveParams?: DeviceAutoControlEventSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DeviceAutoControlEvent/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceAutoControlEventSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceAutoControlEventSearchGet: async (pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('deviceAutoControlEventSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('deviceAutoControlEventSearchGet', 'ps', ps)
            const localVarPath = `/DeviceAutoControlEvent/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceAutoControlEventApi - functional programming interface
 * @export
 */
export const DeviceAutoControlEventApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeviceAutoControlEventApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceAutoControlEventFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceAutoControlEventDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceAutoControlEventFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} triggerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceAutoControlEventListGet(triggerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceAutoControlEventDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceAutoControlEventListGet(triggerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeviceAutoControlEventRemoveParams} [deviceAutoControlEventRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceAutoControlEventRemovePost(deviceAutoControlEventRemoveParams?: DeviceAutoControlEventRemoveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceAutoControlEventDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceAutoControlEventRemovePost(deviceAutoControlEventRemoveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeviceAutoControlEventSaveParams} [deviceAutoControlEventSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceAutoControlEventSavePost(deviceAutoControlEventSaveParams?: DeviceAutoControlEventSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceAutoControlEventDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceAutoControlEventSavePost(deviceAutoControlEventSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceAutoControlEventSearchGet(pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceAutoControlEventDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceAutoControlEventSearchGet(pi, ps, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeviceAutoControlEventApi - factory interface
 * @export
 */
export const DeviceAutoControlEventApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeviceAutoControlEventApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceAutoControlEventFindGet(id: number, options?: any): AxiosPromise<DeviceAutoControlEventDto> {
            return localVarFp.deviceAutoControlEventFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} triggerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceAutoControlEventListGet(triggerId: number, options?: any): AxiosPromise<Array<DeviceAutoControlEventDto>> {
            return localVarFp.deviceAutoControlEventListGet(triggerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeviceAutoControlEventRemoveParams} [deviceAutoControlEventRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceAutoControlEventRemovePost(deviceAutoControlEventRemoveParams?: DeviceAutoControlEventRemoveParams, options?: any): AxiosPromise<DeviceAutoControlEventDto> {
            return localVarFp.deviceAutoControlEventRemovePost(deviceAutoControlEventRemoveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeviceAutoControlEventSaveParams} [deviceAutoControlEventSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceAutoControlEventSavePost(deviceAutoControlEventSaveParams?: DeviceAutoControlEventSaveParams, options?: any): AxiosPromise<DeviceAutoControlEventDto> {
            return localVarFp.deviceAutoControlEventSavePost(deviceAutoControlEventSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceAutoControlEventSearchGet(pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<DeviceAutoControlEventDtoSearchResponseDto> {
            return localVarFp.deviceAutoControlEventSearchGet(pi, ps, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deviceAutoControlEventFindGet operation in DeviceAutoControlEventApi.
 * @export
 * @interface DeviceAutoControlEventApiDeviceAutoControlEventFindGetRequest
 */
export interface DeviceAutoControlEventApiDeviceAutoControlEventFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlEventApiDeviceAutoControlEventFindGet
     */
    readonly id: number
}

/**
 * Request parameters for deviceAutoControlEventListGet operation in DeviceAutoControlEventApi.
 * @export
 * @interface DeviceAutoControlEventApiDeviceAutoControlEventListGetRequest
 */
export interface DeviceAutoControlEventApiDeviceAutoControlEventListGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlEventApiDeviceAutoControlEventListGet
     */
    readonly triggerId: number
}

/**
 * Request parameters for deviceAutoControlEventRemovePost operation in DeviceAutoControlEventApi.
 * @export
 * @interface DeviceAutoControlEventApiDeviceAutoControlEventRemovePostRequest
 */
export interface DeviceAutoControlEventApiDeviceAutoControlEventRemovePostRequest {
    /**
     * 
     * @type {DeviceAutoControlEventRemoveParams}
     * @memberof DeviceAutoControlEventApiDeviceAutoControlEventRemovePost
     */
    readonly deviceAutoControlEventRemoveParams?: DeviceAutoControlEventRemoveParams
}

/**
 * Request parameters for deviceAutoControlEventSavePost operation in DeviceAutoControlEventApi.
 * @export
 * @interface DeviceAutoControlEventApiDeviceAutoControlEventSavePostRequest
 */
export interface DeviceAutoControlEventApiDeviceAutoControlEventSavePostRequest {
    /**
     * 
     * @type {DeviceAutoControlEventSaveParams}
     * @memberof DeviceAutoControlEventApiDeviceAutoControlEventSavePost
     */
    readonly deviceAutoControlEventSaveParams?: DeviceAutoControlEventSaveParams
}

/**
 * Request parameters for deviceAutoControlEventSearchGet operation in DeviceAutoControlEventApi.
 * @export
 * @interface DeviceAutoControlEventApiDeviceAutoControlEventSearchGetRequest
 */
export interface DeviceAutoControlEventApiDeviceAutoControlEventSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlEventApiDeviceAutoControlEventSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlEventApiDeviceAutoControlEventSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {string}
     * @memberof DeviceAutoControlEventApiDeviceAutoControlEventSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof DeviceAutoControlEventApiDeviceAutoControlEventSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof DeviceAutoControlEventApiDeviceAutoControlEventSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * DeviceAutoControlEventApi - object-oriented interface
 * @export
 * @class DeviceAutoControlEventApi
 * @extends {BaseAPI}
 */
export class DeviceAutoControlEventApi extends BaseAPI {
    /**
     * 
     * @param {DeviceAutoControlEventApiDeviceAutoControlEventFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAutoControlEventApi
     */
    public deviceAutoControlEventFindGet(requestParameters: DeviceAutoControlEventApiDeviceAutoControlEventFindGetRequest, options?: AxiosRequestConfig) {
        return DeviceAutoControlEventApiFp(this.configuration).deviceAutoControlEventFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceAutoControlEventApiDeviceAutoControlEventListGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAutoControlEventApi
     */
    public deviceAutoControlEventListGet(requestParameters: DeviceAutoControlEventApiDeviceAutoControlEventListGetRequest, options?: AxiosRequestConfig) {
        return DeviceAutoControlEventApiFp(this.configuration).deviceAutoControlEventListGet(requestParameters.triggerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceAutoControlEventApiDeviceAutoControlEventRemovePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAutoControlEventApi
     */
    public deviceAutoControlEventRemovePost(requestParameters: DeviceAutoControlEventApiDeviceAutoControlEventRemovePostRequest = {}, options?: AxiosRequestConfig) {
        return DeviceAutoControlEventApiFp(this.configuration).deviceAutoControlEventRemovePost(requestParameters.deviceAutoControlEventRemoveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceAutoControlEventApiDeviceAutoControlEventSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAutoControlEventApi
     */
    public deviceAutoControlEventSavePost(requestParameters: DeviceAutoControlEventApiDeviceAutoControlEventSavePostRequest = {}, options?: AxiosRequestConfig) {
        return DeviceAutoControlEventApiFp(this.configuration).deviceAutoControlEventSavePost(requestParameters.deviceAutoControlEventSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceAutoControlEventApiDeviceAutoControlEventSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAutoControlEventApi
     */
    public deviceAutoControlEventSearchGet(requestParameters: DeviceAutoControlEventApiDeviceAutoControlEventSearchGetRequest, options?: AxiosRequestConfig) {
        return DeviceAutoControlEventApiFp(this.configuration).deviceAutoControlEventSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DeviceAutoControlTriggerApi - axios parameter creator
 * @export
 */
export const DeviceAutoControlTriggerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceAutoControlTriggerFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deviceAutoControlTriggerFindGet', 'id', id)
            const localVarPath = `/DeviceAutoControlTrigger/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeviceAutoControlTriggerRemoveParams} [deviceAutoControlTriggerRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceAutoControlTriggerRemovePost: async (deviceAutoControlTriggerRemoveParams?: DeviceAutoControlTriggerRemoveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DeviceAutoControlTrigger/Remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceAutoControlTriggerRemoveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeviceAutoControlTriggerSaveParams} [deviceAutoControlTriggerSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceAutoControlTriggerSavePost: async (deviceAutoControlTriggerSaveParams?: DeviceAutoControlTriggerSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DeviceAutoControlTrigger/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceAutoControlTriggerSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {boolean} [isEnable] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceAutoControlTriggerSearchGet: async (pi: number, ps: number, isEnable?: boolean, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('deviceAutoControlTriggerSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('deviceAutoControlTriggerSearchGet', 'ps', ps)
            const localVarPath = `/DeviceAutoControlTrigger/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isEnable !== undefined) {
                localVarQueryParameter['IsEnable'] = isEnable;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeviceAutoControlTriggerUpdateEnableParams} [deviceAutoControlTriggerUpdateEnableParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceAutoControlTriggerUpdateEnablePost: async (deviceAutoControlTriggerUpdateEnableParams?: DeviceAutoControlTriggerUpdateEnableParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DeviceAutoControlTrigger/UpdateEnable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceAutoControlTriggerUpdateEnableParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceAutoControlTriggerApi - functional programming interface
 * @export
 */
export const DeviceAutoControlTriggerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeviceAutoControlTriggerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceAutoControlTriggerFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceAutoControlTriggerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceAutoControlTriggerFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeviceAutoControlTriggerRemoveParams} [deviceAutoControlTriggerRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceAutoControlTriggerRemovePost(deviceAutoControlTriggerRemoveParams?: DeviceAutoControlTriggerRemoveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceAutoControlTriggerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceAutoControlTriggerRemovePost(deviceAutoControlTriggerRemoveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeviceAutoControlTriggerSaveParams} [deviceAutoControlTriggerSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceAutoControlTriggerSavePost(deviceAutoControlTriggerSaveParams?: DeviceAutoControlTriggerSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceAutoControlTriggerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceAutoControlTriggerSavePost(deviceAutoControlTriggerSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {boolean} [isEnable] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceAutoControlTriggerSearchGet(pi: number, ps: number, isEnable?: boolean, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceAutoControlTriggerDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceAutoControlTriggerSearchGet(pi, ps, isEnable, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeviceAutoControlTriggerUpdateEnableParams} [deviceAutoControlTriggerUpdateEnableParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deviceAutoControlTriggerUpdateEnablePost(deviceAutoControlTriggerUpdateEnableParams?: DeviceAutoControlTriggerUpdateEnableParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceAutoControlTriggerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deviceAutoControlTriggerUpdateEnablePost(deviceAutoControlTriggerUpdateEnableParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeviceAutoControlTriggerApi - factory interface
 * @export
 */
export const DeviceAutoControlTriggerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeviceAutoControlTriggerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceAutoControlTriggerFindGet(id: number, options?: any): AxiosPromise<DeviceAutoControlTriggerDto> {
            return localVarFp.deviceAutoControlTriggerFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeviceAutoControlTriggerRemoveParams} [deviceAutoControlTriggerRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceAutoControlTriggerRemovePost(deviceAutoControlTriggerRemoveParams?: DeviceAutoControlTriggerRemoveParams, options?: any): AxiosPromise<DeviceAutoControlTriggerDto> {
            return localVarFp.deviceAutoControlTriggerRemovePost(deviceAutoControlTriggerRemoveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeviceAutoControlTriggerSaveParams} [deviceAutoControlTriggerSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceAutoControlTriggerSavePost(deviceAutoControlTriggerSaveParams?: DeviceAutoControlTriggerSaveParams, options?: any): AxiosPromise<DeviceAutoControlTriggerDto> {
            return localVarFp.deviceAutoControlTriggerSavePost(deviceAutoControlTriggerSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {boolean} [isEnable] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceAutoControlTriggerSearchGet(pi: number, ps: number, isEnable?: boolean, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<DeviceAutoControlTriggerDtoSearchResponseDto> {
            return localVarFp.deviceAutoControlTriggerSearchGet(pi, ps, isEnable, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeviceAutoControlTriggerUpdateEnableParams} [deviceAutoControlTriggerUpdateEnableParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceAutoControlTriggerUpdateEnablePost(deviceAutoControlTriggerUpdateEnableParams?: DeviceAutoControlTriggerUpdateEnableParams, options?: any): AxiosPromise<DeviceAutoControlTriggerDto> {
            return localVarFp.deviceAutoControlTriggerUpdateEnablePost(deviceAutoControlTriggerUpdateEnableParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deviceAutoControlTriggerFindGet operation in DeviceAutoControlTriggerApi.
 * @export
 * @interface DeviceAutoControlTriggerApiDeviceAutoControlTriggerFindGetRequest
 */
export interface DeviceAutoControlTriggerApiDeviceAutoControlTriggerFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlTriggerApiDeviceAutoControlTriggerFindGet
     */
    readonly id: number
}

/**
 * Request parameters for deviceAutoControlTriggerRemovePost operation in DeviceAutoControlTriggerApi.
 * @export
 * @interface DeviceAutoControlTriggerApiDeviceAutoControlTriggerRemovePostRequest
 */
export interface DeviceAutoControlTriggerApiDeviceAutoControlTriggerRemovePostRequest {
    /**
     * 
     * @type {DeviceAutoControlTriggerRemoveParams}
     * @memberof DeviceAutoControlTriggerApiDeviceAutoControlTriggerRemovePost
     */
    readonly deviceAutoControlTriggerRemoveParams?: DeviceAutoControlTriggerRemoveParams
}

/**
 * Request parameters for deviceAutoControlTriggerSavePost operation in DeviceAutoControlTriggerApi.
 * @export
 * @interface DeviceAutoControlTriggerApiDeviceAutoControlTriggerSavePostRequest
 */
export interface DeviceAutoControlTriggerApiDeviceAutoControlTriggerSavePostRequest {
    /**
     * 
     * @type {DeviceAutoControlTriggerSaveParams}
     * @memberof DeviceAutoControlTriggerApiDeviceAutoControlTriggerSavePost
     */
    readonly deviceAutoControlTriggerSaveParams?: DeviceAutoControlTriggerSaveParams
}

/**
 * Request parameters for deviceAutoControlTriggerSearchGet operation in DeviceAutoControlTriggerApi.
 * @export
 * @interface DeviceAutoControlTriggerApiDeviceAutoControlTriggerSearchGetRequest
 */
export interface DeviceAutoControlTriggerApiDeviceAutoControlTriggerSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlTriggerApiDeviceAutoControlTriggerSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof DeviceAutoControlTriggerApiDeviceAutoControlTriggerSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {boolean}
     * @memberof DeviceAutoControlTriggerApiDeviceAutoControlTriggerSearchGet
     */
    readonly isEnable?: boolean

    /**
     * 
     * @type {string}
     * @memberof DeviceAutoControlTriggerApiDeviceAutoControlTriggerSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof DeviceAutoControlTriggerApiDeviceAutoControlTriggerSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof DeviceAutoControlTriggerApiDeviceAutoControlTriggerSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * Request parameters for deviceAutoControlTriggerUpdateEnablePost operation in DeviceAutoControlTriggerApi.
 * @export
 * @interface DeviceAutoControlTriggerApiDeviceAutoControlTriggerUpdateEnablePostRequest
 */
export interface DeviceAutoControlTriggerApiDeviceAutoControlTriggerUpdateEnablePostRequest {
    /**
     * 
     * @type {DeviceAutoControlTriggerUpdateEnableParams}
     * @memberof DeviceAutoControlTriggerApiDeviceAutoControlTriggerUpdateEnablePost
     */
    readonly deviceAutoControlTriggerUpdateEnableParams?: DeviceAutoControlTriggerUpdateEnableParams
}

/**
 * DeviceAutoControlTriggerApi - object-oriented interface
 * @export
 * @class DeviceAutoControlTriggerApi
 * @extends {BaseAPI}
 */
export class DeviceAutoControlTriggerApi extends BaseAPI {
    /**
     * 
     * @param {DeviceAutoControlTriggerApiDeviceAutoControlTriggerFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAutoControlTriggerApi
     */
    public deviceAutoControlTriggerFindGet(requestParameters: DeviceAutoControlTriggerApiDeviceAutoControlTriggerFindGetRequest, options?: AxiosRequestConfig) {
        return DeviceAutoControlTriggerApiFp(this.configuration).deviceAutoControlTriggerFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceAutoControlTriggerApiDeviceAutoControlTriggerRemovePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAutoControlTriggerApi
     */
    public deviceAutoControlTriggerRemovePost(requestParameters: DeviceAutoControlTriggerApiDeviceAutoControlTriggerRemovePostRequest = {}, options?: AxiosRequestConfig) {
        return DeviceAutoControlTriggerApiFp(this.configuration).deviceAutoControlTriggerRemovePost(requestParameters.deviceAutoControlTriggerRemoveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceAutoControlTriggerApiDeviceAutoControlTriggerSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAutoControlTriggerApi
     */
    public deviceAutoControlTriggerSavePost(requestParameters: DeviceAutoControlTriggerApiDeviceAutoControlTriggerSavePostRequest = {}, options?: AxiosRequestConfig) {
        return DeviceAutoControlTriggerApiFp(this.configuration).deviceAutoControlTriggerSavePost(requestParameters.deviceAutoControlTriggerSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceAutoControlTriggerApiDeviceAutoControlTriggerSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAutoControlTriggerApi
     */
    public deviceAutoControlTriggerSearchGet(requestParameters: DeviceAutoControlTriggerApiDeviceAutoControlTriggerSearchGetRequest, options?: AxiosRequestConfig) {
        return DeviceAutoControlTriggerApiFp(this.configuration).deviceAutoControlTriggerSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.isEnable, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeviceAutoControlTriggerApiDeviceAutoControlTriggerUpdateEnablePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceAutoControlTriggerApi
     */
    public deviceAutoControlTriggerUpdateEnablePost(requestParameters: DeviceAutoControlTriggerApiDeviceAutoControlTriggerUpdateEnablePostRequest = {}, options?: AxiosRequestConfig) {
        return DeviceAutoControlTriggerApiFp(this.configuration).deviceAutoControlTriggerUpdateEnablePost(requestParameters.deviceAutoControlTriggerUpdateEnableParams, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DiseaseRuleApi - axios parameter creator
 * @export
 */
export const DiseaseRuleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diseaseRuleFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('diseaseRuleFindGet', 'id', id)
            const localVarPath = `/DiseaseRule/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DiseaseRuleSaveParams} [diseaseRuleSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diseaseRuleSavePost: async (diseaseRuleSaveParams?: DiseaseRuleSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DiseaseRule/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(diseaseRuleSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [cultureRuleId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diseaseRuleSearchGet: async (pi: number, ps: number, cultureRuleId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('diseaseRuleSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('diseaseRuleSearchGet', 'ps', ps)
            const localVarPath = `/DiseaseRule/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cultureRuleId !== undefined) {
                localVarQueryParameter['CultureRuleId'] = cultureRuleId;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DiseaseRuleApi - functional programming interface
 * @export
 */
export const DiseaseRuleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DiseaseRuleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diseaseRuleFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiseaseRuleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.diseaseRuleFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DiseaseRuleSaveParams} [diseaseRuleSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diseaseRuleSavePost(diseaseRuleSaveParams?: DiseaseRuleSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiseaseRuleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.diseaseRuleSavePost(diseaseRuleSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [cultureRuleId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diseaseRuleSearchGet(pi: number, ps: number, cultureRuleId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiseaseRuleDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.diseaseRuleSearchGet(pi, ps, cultureRuleId, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DiseaseRuleApi - factory interface
 * @export
 */
export const DiseaseRuleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DiseaseRuleApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diseaseRuleFindGet(id: number, options?: any): AxiosPromise<DiseaseRuleDto> {
            return localVarFp.diseaseRuleFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DiseaseRuleSaveParams} [diseaseRuleSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diseaseRuleSavePost(diseaseRuleSaveParams?: DiseaseRuleSaveParams, options?: any): AxiosPromise<DiseaseRuleDto> {
            return localVarFp.diseaseRuleSavePost(diseaseRuleSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [cultureRuleId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diseaseRuleSearchGet(pi: number, ps: number, cultureRuleId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<DiseaseRuleDtoSearchResponseDto> {
            return localVarFp.diseaseRuleSearchGet(pi, ps, cultureRuleId, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for diseaseRuleFindGet operation in DiseaseRuleApi.
 * @export
 * @interface DiseaseRuleApiDiseaseRuleFindGetRequest
 */
export interface DiseaseRuleApiDiseaseRuleFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DiseaseRuleApiDiseaseRuleFindGet
     */
    readonly id: number
}

/**
 * Request parameters for diseaseRuleSavePost operation in DiseaseRuleApi.
 * @export
 * @interface DiseaseRuleApiDiseaseRuleSavePostRequest
 */
export interface DiseaseRuleApiDiseaseRuleSavePostRequest {
    /**
     * 
     * @type {DiseaseRuleSaveParams}
     * @memberof DiseaseRuleApiDiseaseRuleSavePost
     */
    readonly diseaseRuleSaveParams?: DiseaseRuleSaveParams
}

/**
 * Request parameters for diseaseRuleSearchGet operation in DiseaseRuleApi.
 * @export
 * @interface DiseaseRuleApiDiseaseRuleSearchGetRequest
 */
export interface DiseaseRuleApiDiseaseRuleSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DiseaseRuleApiDiseaseRuleSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof DiseaseRuleApiDiseaseRuleSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {number}
     * @memberof DiseaseRuleApiDiseaseRuleSearchGet
     */
    readonly cultureRuleId?: number

    /**
     * 
     * @type {string}
     * @memberof DiseaseRuleApiDiseaseRuleSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof DiseaseRuleApiDiseaseRuleSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof DiseaseRuleApiDiseaseRuleSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * DiseaseRuleApi - object-oriented interface
 * @export
 * @class DiseaseRuleApi
 * @extends {BaseAPI}
 */
export class DiseaseRuleApi extends BaseAPI {
    /**
     * 
     * @param {DiseaseRuleApiDiseaseRuleFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiseaseRuleApi
     */
    public diseaseRuleFindGet(requestParameters: DiseaseRuleApiDiseaseRuleFindGetRequest, options?: AxiosRequestConfig) {
        return DiseaseRuleApiFp(this.configuration).diseaseRuleFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DiseaseRuleApiDiseaseRuleSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiseaseRuleApi
     */
    public diseaseRuleSavePost(requestParameters: DiseaseRuleApiDiseaseRuleSavePostRequest = {}, options?: AxiosRequestConfig) {
        return DiseaseRuleApiFp(this.configuration).diseaseRuleSavePost(requestParameters.diseaseRuleSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DiseaseRuleApiDiseaseRuleSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiseaseRuleApi
     */
    public diseaseRuleSearchGet(requestParameters: DiseaseRuleApiDiseaseRuleSearchGetRequest, options?: AxiosRequestConfig) {
        return DiseaseRuleApiFp(this.configuration).diseaseRuleSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.cultureRuleId, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MaterialApi - axios parameter creator
 * @export
 */
export const MaterialApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('materialFindGet', 'id', id)
            const localVarPath = `/Material/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MaterialSaveParams} [materialSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialSavePost: async (materialSaveParams?: MaterialSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Material/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(materialSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [typeKeyword] 
         * @param {string} [keyword] 
         * @param {number} [typeId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialSearchGet: async (pi: number, ps: number, typeKeyword?: string, keyword?: string, typeId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('materialSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('materialSearchGet', 'ps', ps)
            const localVarPath = `/Material/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (typeKeyword !== undefined) {
                localVarQueryParameter['TypeKeyword'] = typeKeyword;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }

            if (typeId !== undefined) {
                localVarQueryParameter['TypeId'] = typeId;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MaterialApi - functional programming interface
 * @export
 */
export const MaterialApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MaterialApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async materialFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MaterialDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.materialFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MaterialSaveParams} [materialSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async materialSavePost(materialSaveParams?: MaterialSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MaterialDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.materialSavePost(materialSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [typeKeyword] 
         * @param {string} [keyword] 
         * @param {number} [typeId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async materialSearchGet(pi: number, ps: number, typeKeyword?: string, keyword?: string, typeId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MaterialDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.materialSearchGet(pi, ps, typeKeyword, keyword, typeId, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MaterialApi - factory interface
 * @export
 */
export const MaterialApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MaterialApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialFindGet(id: number, options?: any): AxiosPromise<MaterialDto> {
            return localVarFp.materialFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MaterialSaveParams} [materialSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialSavePost(materialSaveParams?: MaterialSaveParams, options?: any): AxiosPromise<MaterialDto> {
            return localVarFp.materialSavePost(materialSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [typeKeyword] 
         * @param {string} [keyword] 
         * @param {number} [typeId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialSearchGet(pi: number, ps: number, typeKeyword?: string, keyword?: string, typeId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<MaterialDtoSearchResponseDto> {
            return localVarFp.materialSearchGet(pi, ps, typeKeyword, keyword, typeId, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for materialFindGet operation in MaterialApi.
 * @export
 * @interface MaterialApiMaterialFindGetRequest
 */
export interface MaterialApiMaterialFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof MaterialApiMaterialFindGet
     */
    readonly id: number
}

/**
 * Request parameters for materialSavePost operation in MaterialApi.
 * @export
 * @interface MaterialApiMaterialSavePostRequest
 */
export interface MaterialApiMaterialSavePostRequest {
    /**
     * 
     * @type {MaterialSaveParams}
     * @memberof MaterialApiMaterialSavePost
     */
    readonly materialSaveParams?: MaterialSaveParams
}

/**
 * Request parameters for materialSearchGet operation in MaterialApi.
 * @export
 * @interface MaterialApiMaterialSearchGetRequest
 */
export interface MaterialApiMaterialSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof MaterialApiMaterialSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof MaterialApiMaterialSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {string}
     * @memberof MaterialApiMaterialSearchGet
     */
    readonly typeKeyword?: string

    /**
     * 
     * @type {string}
     * @memberof MaterialApiMaterialSearchGet
     */
    readonly keyword?: string

    /**
     * 
     * @type {number}
     * @memberof MaterialApiMaterialSearchGet
     */
    readonly typeId?: number

    /**
     * 
     * @type {string}
     * @memberof MaterialApiMaterialSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof MaterialApiMaterialSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof MaterialApiMaterialSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * MaterialApi - object-oriented interface
 * @export
 * @class MaterialApi
 * @extends {BaseAPI}
 */
export class MaterialApi extends BaseAPI {
    /**
     * 
     * @param {MaterialApiMaterialFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialApi
     */
    public materialFindGet(requestParameters: MaterialApiMaterialFindGetRequest, options?: AxiosRequestConfig) {
        return MaterialApiFp(this.configuration).materialFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MaterialApiMaterialSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialApi
     */
    public materialSavePost(requestParameters: MaterialApiMaterialSavePostRequest = {}, options?: AxiosRequestConfig) {
        return MaterialApiFp(this.configuration).materialSavePost(requestParameters.materialSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MaterialApiMaterialSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialApi
     */
    public materialSearchGet(requestParameters: MaterialApiMaterialSearchGetRequest, options?: AxiosRequestConfig) {
        return MaterialApiFp(this.configuration).materialSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.typeKeyword, requestParameters.keyword, requestParameters.typeId, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MaterialTypeApi - axios parameter creator
 * @export
 */
export const MaterialTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialTypeFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('materialTypeFindGet', 'id', id)
            const localVarPath = `/MaterialType/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MaterialTypeRemoveParams} [materialTypeRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialTypeRemovePost: async (materialTypeRemoveParams?: MaterialTypeRemoveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/MaterialType/Remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(materialTypeRemoveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MaterialTypeSaveParams} [materialTypeSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialTypeSavePost: async (materialTypeSaveParams?: MaterialTypeSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/MaterialType/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(materialTypeSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [keyword] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialTypeSearchGet: async (pi: number, ps: number, keyword?: string, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('materialTypeSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('materialTypeSearchGet', 'ps', ps)
            const localVarPath = `/MaterialType/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MaterialTypeApi - functional programming interface
 * @export
 */
export const MaterialTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MaterialTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async materialTypeFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MaterialTypeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.materialTypeFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MaterialTypeRemoveParams} [materialTypeRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async materialTypeRemovePost(materialTypeRemoveParams?: MaterialTypeRemoveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MaterialTypeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.materialTypeRemovePost(materialTypeRemoveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MaterialTypeSaveParams} [materialTypeSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async materialTypeSavePost(materialTypeSaveParams?: MaterialTypeSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MaterialTypeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.materialTypeSavePost(materialTypeSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [keyword] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async materialTypeSearchGet(pi: number, ps: number, keyword?: string, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MaterialTypeDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.materialTypeSearchGet(pi, ps, keyword, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MaterialTypeApi - factory interface
 * @export
 */
export const MaterialTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MaterialTypeApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialTypeFindGet(id: number, options?: any): AxiosPromise<MaterialTypeDto> {
            return localVarFp.materialTypeFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MaterialTypeRemoveParams} [materialTypeRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialTypeRemovePost(materialTypeRemoveParams?: MaterialTypeRemoveParams, options?: any): AxiosPromise<MaterialTypeDto> {
            return localVarFp.materialTypeRemovePost(materialTypeRemoveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MaterialTypeSaveParams} [materialTypeSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialTypeSavePost(materialTypeSaveParams?: MaterialTypeSaveParams, options?: any): AxiosPromise<MaterialTypeDto> {
            return localVarFp.materialTypeSavePost(materialTypeSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [keyword] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        materialTypeSearchGet(pi: number, ps: number, keyword?: string, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<MaterialTypeDtoSearchResponseDto> {
            return localVarFp.materialTypeSearchGet(pi, ps, keyword, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for materialTypeFindGet operation in MaterialTypeApi.
 * @export
 * @interface MaterialTypeApiMaterialTypeFindGetRequest
 */
export interface MaterialTypeApiMaterialTypeFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof MaterialTypeApiMaterialTypeFindGet
     */
    readonly id: number
}

/**
 * Request parameters for materialTypeRemovePost operation in MaterialTypeApi.
 * @export
 * @interface MaterialTypeApiMaterialTypeRemovePostRequest
 */
export interface MaterialTypeApiMaterialTypeRemovePostRequest {
    /**
     * 
     * @type {MaterialTypeRemoveParams}
     * @memberof MaterialTypeApiMaterialTypeRemovePost
     */
    readonly materialTypeRemoveParams?: MaterialTypeRemoveParams
}

/**
 * Request parameters for materialTypeSavePost operation in MaterialTypeApi.
 * @export
 * @interface MaterialTypeApiMaterialTypeSavePostRequest
 */
export interface MaterialTypeApiMaterialTypeSavePostRequest {
    /**
     * 
     * @type {MaterialTypeSaveParams}
     * @memberof MaterialTypeApiMaterialTypeSavePost
     */
    readonly materialTypeSaveParams?: MaterialTypeSaveParams
}

/**
 * Request parameters for materialTypeSearchGet operation in MaterialTypeApi.
 * @export
 * @interface MaterialTypeApiMaterialTypeSearchGetRequest
 */
export interface MaterialTypeApiMaterialTypeSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof MaterialTypeApiMaterialTypeSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof MaterialTypeApiMaterialTypeSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {string}
     * @memberof MaterialTypeApiMaterialTypeSearchGet
     */
    readonly keyword?: string

    /**
     * 
     * @type {string}
     * @memberof MaterialTypeApiMaterialTypeSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof MaterialTypeApiMaterialTypeSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof MaterialTypeApiMaterialTypeSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * MaterialTypeApi - object-oriented interface
 * @export
 * @class MaterialTypeApi
 * @extends {BaseAPI}
 */
export class MaterialTypeApi extends BaseAPI {
    /**
     * 
     * @param {MaterialTypeApiMaterialTypeFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialTypeApi
     */
    public materialTypeFindGet(requestParameters: MaterialTypeApiMaterialTypeFindGetRequest, options?: AxiosRequestConfig) {
        return MaterialTypeApiFp(this.configuration).materialTypeFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MaterialTypeApiMaterialTypeRemovePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialTypeApi
     */
    public materialTypeRemovePost(requestParameters: MaterialTypeApiMaterialTypeRemovePostRequest = {}, options?: AxiosRequestConfig) {
        return MaterialTypeApiFp(this.configuration).materialTypeRemovePost(requestParameters.materialTypeRemoveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MaterialTypeApiMaterialTypeSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialTypeApi
     */
    public materialTypeSavePost(requestParameters: MaterialTypeApiMaterialTypeSavePostRequest = {}, options?: AxiosRequestConfig) {
        return MaterialTypeApiFp(this.configuration).materialTypeSavePost(requestParameters.materialTypeSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MaterialTypeApiMaterialTypeSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialTypeApi
     */
    public materialTypeSearchGet(requestParameters: MaterialTypeApiMaterialTypeSearchGetRequest, options?: AxiosRequestConfig) {
        return MaterialTypeApiFp(this.configuration).materialTypeSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.keyword, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NotificationApi - axios parameter creator
 * @export
 */
export const NotificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('notificationFindGet', 'id', id)
            const localVarPath = `/Notification/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NotificationSaveParams} [notificationSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationSavePost: async (notificationSaveParams?: NotificationSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Notification/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationSearchGet: async (pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('notificationSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('notificationSearchGet', 'ps', ps)
            const localVarPath = `/Notification/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {NotificationSaveParams} [notificationSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationSavePost(notificationSaveParams?: NotificationSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationSavePost(notificationSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationSearchGet(pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationSearchGet(pi, ps, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationFindGet(id: number, options?: any): AxiosPromise<NotificationDto> {
            return localVarFp.notificationFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NotificationSaveParams} [notificationSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationSavePost(notificationSaveParams?: NotificationSaveParams, options?: any): AxiosPromise<NotificationDto> {
            return localVarFp.notificationSavePost(notificationSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationSearchGet(pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<NotificationDtoSearchResponseDto> {
            return localVarFp.notificationSearchGet(pi, ps, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for notificationFindGet operation in NotificationApi.
 * @export
 * @interface NotificationApiNotificationFindGetRequest
 */
export interface NotificationApiNotificationFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof NotificationApiNotificationFindGet
     */
    readonly id: number
}

/**
 * Request parameters for notificationSavePost operation in NotificationApi.
 * @export
 * @interface NotificationApiNotificationSavePostRequest
 */
export interface NotificationApiNotificationSavePostRequest {
    /**
     * 
     * @type {NotificationSaveParams}
     * @memberof NotificationApiNotificationSavePost
     */
    readonly notificationSaveParams?: NotificationSaveParams
}

/**
 * Request parameters for notificationSearchGet operation in NotificationApi.
 * @export
 * @interface NotificationApiNotificationSearchGetRequest
 */
export interface NotificationApiNotificationSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof NotificationApiNotificationSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof NotificationApiNotificationSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {string}
     * @memberof NotificationApiNotificationSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof NotificationApiNotificationSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof NotificationApiNotificationSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export class NotificationApi extends BaseAPI {
    /**
     * 
     * @param {NotificationApiNotificationFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public notificationFindGet(requestParameters: NotificationApiNotificationFindGetRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NotificationApiNotificationSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public notificationSavePost(requestParameters: NotificationApiNotificationSavePostRequest = {}, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationSavePost(requestParameters.notificationSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NotificationApiNotificationSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public notificationSearchGet(requestParameters: NotificationApiNotificationSearchGetRequest, options?: AxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PondApi - axios parameter creator
 * @export
 */
export const PondApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pondFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pondFindGet', 'id', id)
            const localVarPath = `/Pond/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PondRemoveParams} [pondRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pondRemovePost: async (pondRemoveParams?: PondRemoveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Pond/Remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pondRemoveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PondSaveParams} [pondSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pondSavePost: async (pondSaveParams?: PondSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Pond/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pondSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [pondGroupId] 
         * @param {string} [variety] 
         * @param {PondType} [type] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pondSearchGet: async (pi: number, ps: number, pondGroupId?: number, variety?: string, type?: PondType, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('pondSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('pondSearchGet', 'ps', ps)
            const localVarPath = `/Pond/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pondGroupId !== undefined) {
                localVarQueryParameter['PondGroupId'] = pondGroupId;
            }

            if (variety !== undefined) {
                localVarQueryParameter['Variety'] = variety;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PondApi - functional programming interface
 * @export
 */
export const PondApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PondApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pondFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PondDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pondFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PondRemoveParams} [pondRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pondRemovePost(pondRemoveParams?: PondRemoveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PondDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pondRemovePost(pondRemoveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PondSaveParams} [pondSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pondSavePost(pondSaveParams?: PondSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PondDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pondSavePost(pondSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [pondGroupId] 
         * @param {string} [variety] 
         * @param {PondType} [type] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pondSearchGet(pi: number, ps: number, pondGroupId?: number, variety?: string, type?: PondType, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PondDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pondSearchGet(pi, ps, pondGroupId, variety, type, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PondApi - factory interface
 * @export
 */
export const PondApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PondApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pondFindGet(id: number, options?: any): AxiosPromise<PondDto> {
            return localVarFp.pondFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PondRemoveParams} [pondRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pondRemovePost(pondRemoveParams?: PondRemoveParams, options?: any): AxiosPromise<PondDto> {
            return localVarFp.pondRemovePost(pondRemoveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PondSaveParams} [pondSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pondSavePost(pondSaveParams?: PondSaveParams, options?: any): AxiosPromise<PondDto> {
            return localVarFp.pondSavePost(pondSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [pondGroupId] 
         * @param {string} [variety] 
         * @param {PondType} [type] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pondSearchGet(pi: number, ps: number, pondGroupId?: number, variety?: string, type?: PondType, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<PondDtoSearchResponseDto> {
            return localVarFp.pondSearchGet(pi, ps, pondGroupId, variety, type, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for pondFindGet operation in PondApi.
 * @export
 * @interface PondApiPondFindGetRequest
 */
export interface PondApiPondFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof PondApiPondFindGet
     */
    readonly id: number
}

/**
 * Request parameters for pondRemovePost operation in PondApi.
 * @export
 * @interface PondApiPondRemovePostRequest
 */
export interface PondApiPondRemovePostRequest {
    /**
     * 
     * @type {PondRemoveParams}
     * @memberof PondApiPondRemovePost
     */
    readonly pondRemoveParams?: PondRemoveParams
}

/**
 * Request parameters for pondSavePost operation in PondApi.
 * @export
 * @interface PondApiPondSavePostRequest
 */
export interface PondApiPondSavePostRequest {
    /**
     * 
     * @type {PondSaveParams}
     * @memberof PondApiPondSavePost
     */
    readonly pondSaveParams?: PondSaveParams
}

/**
 * Request parameters for pondSearchGet operation in PondApi.
 * @export
 * @interface PondApiPondSearchGetRequest
 */
export interface PondApiPondSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof PondApiPondSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof PondApiPondSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {number}
     * @memberof PondApiPondSearchGet
     */
    readonly pondGroupId?: number

    /**
     * 
     * @type {string}
     * @memberof PondApiPondSearchGet
     */
    readonly variety?: string

    /**
     * 
     * @type {PondType}
     * @memberof PondApiPondSearchGet
     */
    readonly type?: PondType

    /**
     * 
     * @type {string}
     * @memberof PondApiPondSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof PondApiPondSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof PondApiPondSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * PondApi - object-oriented interface
 * @export
 * @class PondApi
 * @extends {BaseAPI}
 */
export class PondApi extends BaseAPI {
    /**
     * 
     * @param {PondApiPondFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PondApi
     */
    public pondFindGet(requestParameters: PondApiPondFindGetRequest, options?: AxiosRequestConfig) {
        return PondApiFp(this.configuration).pondFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PondApiPondRemovePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PondApi
     */
    public pondRemovePost(requestParameters: PondApiPondRemovePostRequest = {}, options?: AxiosRequestConfig) {
        return PondApiFp(this.configuration).pondRemovePost(requestParameters.pondRemoveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PondApiPondSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PondApi
     */
    public pondSavePost(requestParameters: PondApiPondSavePostRequest = {}, options?: AxiosRequestConfig) {
        return PondApiFp(this.configuration).pondSavePost(requestParameters.pondSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PondApiPondSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PondApi
     */
    public pondSearchGet(requestParameters: PondApiPondSearchGetRequest, options?: AxiosRequestConfig) {
        return PondApiFp(this.configuration).pondSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.pondGroupId, requestParameters.variety, requestParameters.type, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PondGroupApi - axios parameter creator
 * @export
 */
export const PondGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pondGroupFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pondGroupFindGet', 'id', id)
            const localVarPath = `/PondGroup/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pondGroupListPondGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pondGroupListPondGet', 'id', id)
            const localVarPath = `/PondGroup/ListPond`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PondGroupSaveParams} [pondGroupSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pondGroupSavePost: async (pondGroupSaveParams?: PondGroupSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/PondGroup/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pondGroupSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pondGroupSearchGet: async (pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('pondGroupSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('pondGroupSearchGet', 'ps', ps)
            const localVarPath = `/PondGroup/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PondGroupUpdatePondParams} [pondGroupUpdatePondParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pondGroupUpdatePondPost: async (pondGroupUpdatePondParams?: PondGroupUpdatePondParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/PondGroup/UpdatePond`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pondGroupUpdatePondParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PondGroupApi - functional programming interface
 * @export
 */
export const PondGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PondGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pondGroupFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PondGroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pondGroupFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pondGroupListPondGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PondDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pondGroupListPondGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PondGroupSaveParams} [pondGroupSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pondGroupSavePost(pondGroupSaveParams?: PondGroupSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PondGroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pondGroupSavePost(pondGroupSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pondGroupSearchGet(pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PondGroupDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pondGroupSearchGet(pi, ps, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PondGroupUpdatePondParams} [pondGroupUpdatePondParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pondGroupUpdatePondPost(pondGroupUpdatePondParams?: PondGroupUpdatePondParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PondGroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pondGroupUpdatePondPost(pondGroupUpdatePondParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PondGroupApi - factory interface
 * @export
 */
export const PondGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PondGroupApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pondGroupFindGet(id: number, options?: any): AxiosPromise<PondGroupDto> {
            return localVarFp.pondGroupFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pondGroupListPondGet(id: number, options?: any): AxiosPromise<Array<PondDto>> {
            return localVarFp.pondGroupListPondGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PondGroupSaveParams} [pondGroupSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pondGroupSavePost(pondGroupSaveParams?: PondGroupSaveParams, options?: any): AxiosPromise<PondGroupDto> {
            return localVarFp.pondGroupSavePost(pondGroupSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pondGroupSearchGet(pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<PondGroupDtoSearchResponseDto> {
            return localVarFp.pondGroupSearchGet(pi, ps, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PondGroupUpdatePondParams} [pondGroupUpdatePondParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pondGroupUpdatePondPost(pondGroupUpdatePondParams?: PondGroupUpdatePondParams, options?: any): AxiosPromise<PondGroupDto> {
            return localVarFp.pondGroupUpdatePondPost(pondGroupUpdatePondParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for pondGroupFindGet operation in PondGroupApi.
 * @export
 * @interface PondGroupApiPondGroupFindGetRequest
 */
export interface PondGroupApiPondGroupFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof PondGroupApiPondGroupFindGet
     */
    readonly id: number
}

/**
 * Request parameters for pondGroupListPondGet operation in PondGroupApi.
 * @export
 * @interface PondGroupApiPondGroupListPondGetRequest
 */
export interface PondGroupApiPondGroupListPondGetRequest {
    /**
     * 
     * @type {number}
     * @memberof PondGroupApiPondGroupListPondGet
     */
    readonly id: number
}

/**
 * Request parameters for pondGroupSavePost operation in PondGroupApi.
 * @export
 * @interface PondGroupApiPondGroupSavePostRequest
 */
export interface PondGroupApiPondGroupSavePostRequest {
    /**
     * 
     * @type {PondGroupSaveParams}
     * @memberof PondGroupApiPondGroupSavePost
     */
    readonly pondGroupSaveParams?: PondGroupSaveParams
}

/**
 * Request parameters for pondGroupSearchGet operation in PondGroupApi.
 * @export
 * @interface PondGroupApiPondGroupSearchGetRequest
 */
export interface PondGroupApiPondGroupSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof PondGroupApiPondGroupSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof PondGroupApiPondGroupSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {string}
     * @memberof PondGroupApiPondGroupSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof PondGroupApiPondGroupSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof PondGroupApiPondGroupSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * Request parameters for pondGroupUpdatePondPost operation in PondGroupApi.
 * @export
 * @interface PondGroupApiPondGroupUpdatePondPostRequest
 */
export interface PondGroupApiPondGroupUpdatePondPostRequest {
    /**
     * 
     * @type {PondGroupUpdatePondParams}
     * @memberof PondGroupApiPondGroupUpdatePondPost
     */
    readonly pondGroupUpdatePondParams?: PondGroupUpdatePondParams
}

/**
 * PondGroupApi - object-oriented interface
 * @export
 * @class PondGroupApi
 * @extends {BaseAPI}
 */
export class PondGroupApi extends BaseAPI {
    /**
     * 
     * @param {PondGroupApiPondGroupFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PondGroupApi
     */
    public pondGroupFindGet(requestParameters: PondGroupApiPondGroupFindGetRequest, options?: AxiosRequestConfig) {
        return PondGroupApiFp(this.configuration).pondGroupFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PondGroupApiPondGroupListPondGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PondGroupApi
     */
    public pondGroupListPondGet(requestParameters: PondGroupApiPondGroupListPondGetRequest, options?: AxiosRequestConfig) {
        return PondGroupApiFp(this.configuration).pondGroupListPondGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PondGroupApiPondGroupSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PondGroupApi
     */
    public pondGroupSavePost(requestParameters: PondGroupApiPondGroupSavePostRequest = {}, options?: AxiosRequestConfig) {
        return PondGroupApiFp(this.configuration).pondGroupSavePost(requestParameters.pondGroupSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PondGroupApiPondGroupSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PondGroupApi
     */
    public pondGroupSearchGet(requestParameters: PondGroupApiPondGroupSearchGetRequest, options?: AxiosRequestConfig) {
        return PondGroupApiFp(this.configuration).pondGroupSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PondGroupApiPondGroupUpdatePondPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PondGroupApi
     */
    public pondGroupUpdatePondPost(requestParameters: PondGroupApiPondGroupUpdatePondPostRequest = {}, options?: AxiosRequestConfig) {
        return PondGroupApiFp(this.configuration).pondGroupUpdatePondPost(requestParameters.pondGroupUpdatePondParams, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SeedBatchApi - axios parameter creator
 * @export
 */
export const SeedBatchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seedBatchFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('seedBatchFindGet', 'id', id)
            const localVarPath = `/SeedBatch/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SeedBatchSaveParams} [seedBatchSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seedBatchSavePost: async (seedBatchSaveParams?: SeedBatchSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SeedBatch/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seedBatchSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seedBatchSearchGet: async (pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('seedBatchSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('seedBatchSearchGet', 'ps', ps)
            const localVarPath = `/SeedBatch/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SeedBatchApi - functional programming interface
 * @export
 */
export const SeedBatchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SeedBatchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seedBatchFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SeedBatchDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seedBatchFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SeedBatchSaveParams} [seedBatchSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seedBatchSavePost(seedBatchSaveParams?: SeedBatchSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SeedBatchDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seedBatchSavePost(seedBatchSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seedBatchSearchGet(pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SeedBatchDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seedBatchSearchGet(pi, ps, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SeedBatchApi - factory interface
 * @export
 */
export const SeedBatchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SeedBatchApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seedBatchFindGet(id: number, options?: any): AxiosPromise<SeedBatchDto> {
            return localVarFp.seedBatchFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SeedBatchSaveParams} [seedBatchSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seedBatchSavePost(seedBatchSaveParams?: SeedBatchSaveParams, options?: any): AxiosPromise<SeedBatchDto> {
            return localVarFp.seedBatchSavePost(seedBatchSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seedBatchSearchGet(pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<SeedBatchDtoSearchResponseDto> {
            return localVarFp.seedBatchSearchGet(pi, ps, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for seedBatchFindGet operation in SeedBatchApi.
 * @export
 * @interface SeedBatchApiSeedBatchFindGetRequest
 */
export interface SeedBatchApiSeedBatchFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof SeedBatchApiSeedBatchFindGet
     */
    readonly id: number
}

/**
 * Request parameters for seedBatchSavePost operation in SeedBatchApi.
 * @export
 * @interface SeedBatchApiSeedBatchSavePostRequest
 */
export interface SeedBatchApiSeedBatchSavePostRequest {
    /**
     * 
     * @type {SeedBatchSaveParams}
     * @memberof SeedBatchApiSeedBatchSavePost
     */
    readonly seedBatchSaveParams?: SeedBatchSaveParams
}

/**
 * Request parameters for seedBatchSearchGet operation in SeedBatchApi.
 * @export
 * @interface SeedBatchApiSeedBatchSearchGetRequest
 */
export interface SeedBatchApiSeedBatchSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof SeedBatchApiSeedBatchSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof SeedBatchApiSeedBatchSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {string}
     * @memberof SeedBatchApiSeedBatchSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof SeedBatchApiSeedBatchSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof SeedBatchApiSeedBatchSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * SeedBatchApi - object-oriented interface
 * @export
 * @class SeedBatchApi
 * @extends {BaseAPI}
 */
export class SeedBatchApi extends BaseAPI {
    /**
     * 
     * @param {SeedBatchApiSeedBatchFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeedBatchApi
     */
    public seedBatchFindGet(requestParameters: SeedBatchApiSeedBatchFindGetRequest, options?: AxiosRequestConfig) {
        return SeedBatchApiFp(this.configuration).seedBatchFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SeedBatchApiSeedBatchSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeedBatchApi
     */
    public seedBatchSavePost(requestParameters: SeedBatchApiSeedBatchSavePostRequest = {}, options?: AxiosRequestConfig) {
        return SeedBatchApiFp(this.configuration).seedBatchSavePost(requestParameters.seedBatchSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SeedBatchApiSeedBatchSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeedBatchApi
     */
    public seedBatchSearchGet(requestParameters: SeedBatchApiSeedBatchSearchGetRequest, options?: AxiosRequestConfig) {
        return SeedBatchApiFp(this.configuration).seedBatchSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SensorApi - axios parameter creator
 * @export
 */
export const SensorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorFindGet: async (id: number, code?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sensorFindGet', 'id', id)
            const localVarPath = `/Sensor/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['Code'] = code;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorSearchGet: async (pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('sensorSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('sensorSearchGet', 'ps', ps)
            const localVarPath = `/Sensor/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SensorApi - functional programming interface
 * @export
 */
export const SensorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SensorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sensorFindGet(id: number, code?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sensorFindGet(id, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sensorSearchGet(pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SensorSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sensorSearchGet(pi, ps, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SensorApi - factory interface
 * @export
 */
export const SensorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SensorApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorFindGet(id: number, code?: string, options?: any): AxiosPromise<Sensor> {
            return localVarFp.sensorFindGet(id, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorSearchGet(pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<SensorSearchResponse> {
            return localVarFp.sensorSearchGet(pi, ps, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for sensorFindGet operation in SensorApi.
 * @export
 * @interface SensorApiSensorFindGetRequest
 */
export interface SensorApiSensorFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof SensorApiSensorFindGet
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof SensorApiSensorFindGet
     */
    readonly code?: string
}

/**
 * Request parameters for sensorSearchGet operation in SensorApi.
 * @export
 * @interface SensorApiSensorSearchGetRequest
 */
export interface SensorApiSensorSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof SensorApiSensorSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof SensorApiSensorSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {string}
     * @memberof SensorApiSensorSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof SensorApiSensorSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof SensorApiSensorSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * SensorApi - object-oriented interface
 * @export
 * @class SensorApi
 * @extends {BaseAPI}
 */
export class SensorApi extends BaseAPI {
    /**
     * 
     * @param {SensorApiSensorFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorApi
     */
    public sensorFindGet(requestParameters: SensorApiSensorFindGetRequest, options?: AxiosRequestConfig) {
        return SensorApiFp(this.configuration).sensorFindGet(requestParameters.id, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SensorApiSensorSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorApi
     */
    public sensorSearchGet(requestParameters: SensorApiSensorSearchGetRequest, options?: AxiosRequestConfig) {
        return SensorApiFp(this.configuration).sensorSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SensorDataApi - axios parameter creator
 * @export
 */
export const SensorDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorDataCopyGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SensorData/Copy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [sensorId] 
         * @param {SensorValueType} [type] 
         * @param {string} [fromTime] 
         * @param {string} [toTime] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorDataSearchGet: async (pi: number, ps: number, sensorId?: number, type?: SensorValueType, fromTime?: string, toTime?: string, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('sensorDataSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('sensorDataSearchGet', 'ps', ps)
            const localVarPath = `/SensorData/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sensorId !== undefined) {
                localVarQueryParameter['SensorId'] = sensorId;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (fromTime !== undefined) {
                localVarQueryParameter['FromTime'] = (fromTime as any instanceof Date) ?
                    (fromTime as any).toISOString() :
                    fromTime;
            }

            if (toTime !== undefined) {
                localVarQueryParameter['ToTime'] = (toTime as any instanceof Date) ?
                    (toTime as any).toISOString() :
                    toTime;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SensorDataApi - functional programming interface
 * @export
 */
export const SensorDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SensorDataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sensorDataCopyGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sensorDataCopyGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [sensorId] 
         * @param {SensorValueType} [type] 
         * @param {string} [fromTime] 
         * @param {string} [toTime] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sensorDataSearchGet(pi: number, ps: number, sensorId?: number, type?: SensorValueType, fromTime?: string, toTime?: string, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SensorDataDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sensorDataSearchGet(pi, ps, sensorId, type, fromTime, toTime, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SensorDataApi - factory interface
 * @export
 */
export const SensorDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SensorDataApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorDataCopyGet(options?: any): AxiosPromise<void> {
            return localVarFp.sensorDataCopyGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [sensorId] 
         * @param {SensorValueType} [type] 
         * @param {string} [fromTime] 
         * @param {string} [toTime] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorDataSearchGet(pi: number, ps: number, sensorId?: number, type?: SensorValueType, fromTime?: string, toTime?: string, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<SensorDataDtoSearchResponseDto> {
            return localVarFp.sensorDataSearchGet(pi, ps, sensorId, type, fromTime, toTime, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for sensorDataSearchGet operation in SensorDataApi.
 * @export
 * @interface SensorDataApiSensorDataSearchGetRequest
 */
export interface SensorDataApiSensorDataSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof SensorDataApiSensorDataSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof SensorDataApiSensorDataSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {number}
     * @memberof SensorDataApiSensorDataSearchGet
     */
    readonly sensorId?: number

    /**
     * 
     * @type {SensorValueType}
     * @memberof SensorDataApiSensorDataSearchGet
     */
    readonly type?: SensorValueType

    /**
     * 
     * @type {string}
     * @memberof SensorDataApiSensorDataSearchGet
     */
    readonly fromTime?: string

    /**
     * 
     * @type {string}
     * @memberof SensorDataApiSensorDataSearchGet
     */
    readonly toTime?: string

    /**
     * 
     * @type {string}
     * @memberof SensorDataApiSensorDataSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof SensorDataApiSensorDataSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof SensorDataApiSensorDataSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * SensorDataApi - object-oriented interface
 * @export
 * @class SensorDataApi
 * @extends {BaseAPI}
 */
export class SensorDataApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorDataApi
     */
    public sensorDataCopyGet(options?: AxiosRequestConfig) {
        return SensorDataApiFp(this.configuration).sensorDataCopyGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SensorDataApiSensorDataSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorDataApi
     */
    public sensorDataSearchGet(requestParameters: SensorDataApiSensorDataSearchGetRequest, options?: AxiosRequestConfig) {
        return SensorDataApiFp(this.configuration).sensorDataSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.sensorId, requestParameters.type, requestParameters.fromTime, requestParameters.toTime, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SensorHistoryApi - axios parameter creator
 * @export
 */
export const SensorHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorHistoryFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sensorHistoryFindGet', 'id', id)
            const localVarPath = `/SensorHistory/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SensorHistorySaveParams} [sensorHistorySaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorHistorySavePost: async (sensorHistorySaveParams?: SensorHistorySaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SensorHistory/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sensorHistorySaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [deviceId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorHistorySearchGet: async (pi: number, ps: number, deviceId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('sensorHistorySearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('sensorHistorySearchGet', 'ps', ps)
            const localVarPath = `/SensorHistory/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deviceId !== undefined) {
                localVarQueryParameter['DeviceId'] = deviceId;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SensorHistoryApi - functional programming interface
 * @export
 */
export const SensorHistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SensorHistoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sensorHistoryFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SensorHistoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sensorHistoryFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SensorHistorySaveParams} [sensorHistorySaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sensorHistorySavePost(sensorHistorySaveParams?: SensorHistorySaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SensorHistoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sensorHistorySavePost(sensorHistorySaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [deviceId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sensorHistorySearchGet(pi: number, ps: number, deviceId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SensorHistoryDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sensorHistorySearchGet(pi, ps, deviceId, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SensorHistoryApi - factory interface
 * @export
 */
export const SensorHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SensorHistoryApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorHistoryFindGet(id: number, options?: any): AxiosPromise<SensorHistoryDto> {
            return localVarFp.sensorHistoryFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SensorHistorySaveParams} [sensorHistorySaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorHistorySavePost(sensorHistorySaveParams?: SensorHistorySaveParams, options?: any): AxiosPromise<SensorHistoryDto> {
            return localVarFp.sensorHistorySavePost(sensorHistorySaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [deviceId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorHistorySearchGet(pi: number, ps: number, deviceId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<SensorHistoryDtoSearchResponseDto> {
            return localVarFp.sensorHistorySearchGet(pi, ps, deviceId, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for sensorHistoryFindGet operation in SensorHistoryApi.
 * @export
 * @interface SensorHistoryApiSensorHistoryFindGetRequest
 */
export interface SensorHistoryApiSensorHistoryFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof SensorHistoryApiSensorHistoryFindGet
     */
    readonly id: number
}

/**
 * Request parameters for sensorHistorySavePost operation in SensorHistoryApi.
 * @export
 * @interface SensorHistoryApiSensorHistorySavePostRequest
 */
export interface SensorHistoryApiSensorHistorySavePostRequest {
    /**
     * 
     * @type {SensorHistorySaveParams}
     * @memberof SensorHistoryApiSensorHistorySavePost
     */
    readonly sensorHistorySaveParams?: SensorHistorySaveParams
}

/**
 * Request parameters for sensorHistorySearchGet operation in SensorHistoryApi.
 * @export
 * @interface SensorHistoryApiSensorHistorySearchGetRequest
 */
export interface SensorHistoryApiSensorHistorySearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof SensorHistoryApiSensorHistorySearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof SensorHistoryApiSensorHistorySearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {number}
     * @memberof SensorHistoryApiSensorHistorySearchGet
     */
    readonly deviceId?: number

    /**
     * 
     * @type {string}
     * @memberof SensorHistoryApiSensorHistorySearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof SensorHistoryApiSensorHistorySearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof SensorHistoryApiSensorHistorySearchGet
     */
    readonly isDelete?: boolean
}

/**
 * SensorHistoryApi - object-oriented interface
 * @export
 * @class SensorHistoryApi
 * @extends {BaseAPI}
 */
export class SensorHistoryApi extends BaseAPI {
    /**
     * 
     * @param {SensorHistoryApiSensorHistoryFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorHistoryApi
     */
    public sensorHistoryFindGet(requestParameters: SensorHistoryApiSensorHistoryFindGetRequest, options?: AxiosRequestConfig) {
        return SensorHistoryApiFp(this.configuration).sensorHistoryFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SensorHistoryApiSensorHistorySavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorHistoryApi
     */
    public sensorHistorySavePost(requestParameters: SensorHistoryApiSensorHistorySavePostRequest = {}, options?: AxiosRequestConfig) {
        return SensorHistoryApiFp(this.configuration).sensorHistorySavePost(requestParameters.sensorHistorySaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SensorHistoryApiSensorHistorySearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorHistoryApi
     */
    public sensorHistorySearchGet(requestParameters: SensorHistoryApiSensorHistorySearchGetRequest, options?: AxiosRequestConfig) {
        return SensorHistoryApiFp(this.configuration).sensorHistorySearchGet(requestParameters.pi, requestParameters.ps, requestParameters.deviceId, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SensorSocketApi - axios parameter creator
 * @export
 */
export const SensorSocketApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SensorSocketBroadCastModel} [sensorSocketBroadCastModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorSocketBroadcastPost: async (sensorSocketBroadCastModel?: SensorSocketBroadCastModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SensorSocket/Broadcast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sensorSocketBroadCastModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SensorSocketBroadCastModel} [sensorSocketBroadCastModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorSocketBroadcastWithStrPost: async (sensorSocketBroadCastModel?: SensorSocketBroadCastModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SensorSocket/BroadcastWithStr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sensorSocketBroadCastModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorSocketListClientsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SensorSocket/ListClients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SensorSocketSendCommandModel} [sensorSocketSendCommandModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorSocketSendCommandPost: async (sensorSocketSendCommandModel?: SensorSocketSendCommandModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SensorSocket/SendCommand`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sensorSocketSendCommandModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SensorSocketOperateModel} [sensorSocketOperateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorSocketTurnOffPost: async (sensorSocketOperateModel?: SensorSocketOperateModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SensorSocket/TurnOff`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sensorSocketOperateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SensorSocketOperateModel} [sensorSocketOperateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorSocketTurnOnPost: async (sensorSocketOperateModel?: SensorSocketOperateModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SensorSocket/TurnOn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sensorSocketOperateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SensorSocketApi - functional programming interface
 * @export
 */
export const SensorSocketApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SensorSocketApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SensorSocketBroadCastModel} [sensorSocketBroadCastModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sensorSocketBroadcastPost(sensorSocketBroadCastModel?: SensorSocketBroadCastModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sensorSocketBroadcastPost(sensorSocketBroadCastModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SensorSocketBroadCastModel} [sensorSocketBroadCastModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sensorSocketBroadcastWithStrPost(sensorSocketBroadCastModel?: SensorSocketBroadCastModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sensorSocketBroadcastWithStrPost(sensorSocketBroadCastModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sensorSocketListClientsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sensorSocketListClientsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SensorSocketSendCommandModel} [sensorSocketSendCommandModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sensorSocketSendCommandPost(sensorSocketSendCommandModel?: SensorSocketSendCommandModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sensorSocketSendCommandPost(sensorSocketSendCommandModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SensorSocketOperateModel} [sensorSocketOperateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sensorSocketTurnOffPost(sensorSocketOperateModel?: SensorSocketOperateModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sensorSocketTurnOffPost(sensorSocketOperateModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SensorSocketOperateModel} [sensorSocketOperateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sensorSocketTurnOnPost(sensorSocketOperateModel?: SensorSocketOperateModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sensorSocketTurnOnPost(sensorSocketOperateModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SensorSocketApi - factory interface
 * @export
 */
export const SensorSocketApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SensorSocketApiFp(configuration)
    return {
        /**
         * 
         * @param {SensorSocketBroadCastModel} [sensorSocketBroadCastModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorSocketBroadcastPost(sensorSocketBroadCastModel?: SensorSocketBroadCastModel, options?: any): AxiosPromise<string> {
            return localVarFp.sensorSocketBroadcastPost(sensorSocketBroadCastModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SensorSocketBroadCastModel} [sensorSocketBroadCastModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorSocketBroadcastWithStrPost(sensorSocketBroadCastModel?: SensorSocketBroadCastModel, options?: any): AxiosPromise<string> {
            return localVarFp.sensorSocketBroadcastWithStrPost(sensorSocketBroadCastModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorSocketListClientsGet(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.sensorSocketListClientsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SensorSocketSendCommandModel} [sensorSocketSendCommandModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorSocketSendCommandPost(sensorSocketSendCommandModel?: SensorSocketSendCommandModel, options?: any): AxiosPromise<void> {
            return localVarFp.sensorSocketSendCommandPost(sensorSocketSendCommandModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SensorSocketOperateModel} [sensorSocketOperateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorSocketTurnOffPost(sensorSocketOperateModel?: SensorSocketOperateModel, options?: any): AxiosPromise<void> {
            return localVarFp.sensorSocketTurnOffPost(sensorSocketOperateModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SensorSocketOperateModel} [sensorSocketOperateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sensorSocketTurnOnPost(sensorSocketOperateModel?: SensorSocketOperateModel, options?: any): AxiosPromise<void> {
            return localVarFp.sensorSocketTurnOnPost(sensorSocketOperateModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for sensorSocketBroadcastPost operation in SensorSocketApi.
 * @export
 * @interface SensorSocketApiSensorSocketBroadcastPostRequest
 */
export interface SensorSocketApiSensorSocketBroadcastPostRequest {
    /**
     * 
     * @type {SensorSocketBroadCastModel}
     * @memberof SensorSocketApiSensorSocketBroadcastPost
     */
    readonly sensorSocketBroadCastModel?: SensorSocketBroadCastModel
}

/**
 * Request parameters for sensorSocketBroadcastWithStrPost operation in SensorSocketApi.
 * @export
 * @interface SensorSocketApiSensorSocketBroadcastWithStrPostRequest
 */
export interface SensorSocketApiSensorSocketBroadcastWithStrPostRequest {
    /**
     * 
     * @type {SensorSocketBroadCastModel}
     * @memberof SensorSocketApiSensorSocketBroadcastWithStrPost
     */
    readonly sensorSocketBroadCastModel?: SensorSocketBroadCastModel
}

/**
 * Request parameters for sensorSocketSendCommandPost operation in SensorSocketApi.
 * @export
 * @interface SensorSocketApiSensorSocketSendCommandPostRequest
 */
export interface SensorSocketApiSensorSocketSendCommandPostRequest {
    /**
     * 
     * @type {SensorSocketSendCommandModel}
     * @memberof SensorSocketApiSensorSocketSendCommandPost
     */
    readonly sensorSocketSendCommandModel?: SensorSocketSendCommandModel
}

/**
 * Request parameters for sensorSocketTurnOffPost operation in SensorSocketApi.
 * @export
 * @interface SensorSocketApiSensorSocketTurnOffPostRequest
 */
export interface SensorSocketApiSensorSocketTurnOffPostRequest {
    /**
     * 
     * @type {SensorSocketOperateModel}
     * @memberof SensorSocketApiSensorSocketTurnOffPost
     */
    readonly sensorSocketOperateModel?: SensorSocketOperateModel
}

/**
 * Request parameters for sensorSocketTurnOnPost operation in SensorSocketApi.
 * @export
 * @interface SensorSocketApiSensorSocketTurnOnPostRequest
 */
export interface SensorSocketApiSensorSocketTurnOnPostRequest {
    /**
     * 
     * @type {SensorSocketOperateModel}
     * @memberof SensorSocketApiSensorSocketTurnOnPost
     */
    readonly sensorSocketOperateModel?: SensorSocketOperateModel
}

/**
 * SensorSocketApi - object-oriented interface
 * @export
 * @class SensorSocketApi
 * @extends {BaseAPI}
 */
export class SensorSocketApi extends BaseAPI {
    /**
     * 
     * @param {SensorSocketApiSensorSocketBroadcastPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorSocketApi
     */
    public sensorSocketBroadcastPost(requestParameters: SensorSocketApiSensorSocketBroadcastPostRequest = {}, options?: AxiosRequestConfig) {
        return SensorSocketApiFp(this.configuration).sensorSocketBroadcastPost(requestParameters.sensorSocketBroadCastModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SensorSocketApiSensorSocketBroadcastWithStrPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorSocketApi
     */
    public sensorSocketBroadcastWithStrPost(requestParameters: SensorSocketApiSensorSocketBroadcastWithStrPostRequest = {}, options?: AxiosRequestConfig) {
        return SensorSocketApiFp(this.configuration).sensorSocketBroadcastWithStrPost(requestParameters.sensorSocketBroadCastModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorSocketApi
     */
    public sensorSocketListClientsGet(options?: AxiosRequestConfig) {
        return SensorSocketApiFp(this.configuration).sensorSocketListClientsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SensorSocketApiSensorSocketSendCommandPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorSocketApi
     */
    public sensorSocketSendCommandPost(requestParameters: SensorSocketApiSensorSocketSendCommandPostRequest = {}, options?: AxiosRequestConfig) {
        return SensorSocketApiFp(this.configuration).sensorSocketSendCommandPost(requestParameters.sensorSocketSendCommandModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SensorSocketApiSensorSocketTurnOffPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorSocketApi
     */
    public sensorSocketTurnOffPost(requestParameters: SensorSocketApiSensorSocketTurnOffPostRequest = {}, options?: AxiosRequestConfig) {
        return SensorSocketApiFp(this.configuration).sensorSocketTurnOffPost(requestParameters.sensorSocketOperateModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SensorSocketApiSensorSocketTurnOnPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorSocketApi
     */
    public sensorSocketTurnOnPost(requestParameters: SensorSocketApiSensorSocketTurnOnPostRequest = {}, options?: AxiosRequestConfig) {
        return SensorSocketApiFp(this.configuration).sensorSocketTurnOnPost(requestParameters.sensorSocketOperateModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StoreRecordApi - axios parameter creator
 * @export
 */
export const StoreRecordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeRecordFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('storeRecordFindGet', 'id', id)
            const localVarPath = `/StoreRecord/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {StoreRecordSaveParams} [storeRecordSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeRecordSavePost: async (storeRecordSaveParams?: StoreRecordSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/StoreRecord/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(storeRecordSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {StoreRecordType} [type] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeRecordSearchGet: async (pi: number, ps: number, type?: StoreRecordType, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('storeRecordSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('storeRecordSearchGet', 'ps', ps)
            const localVarPath = `/StoreRecord/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StoreRecordApi - functional programming interface
 * @export
 */
export const StoreRecordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StoreRecordApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeRecordFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoreRecordDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeRecordFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {StoreRecordSaveParams} [storeRecordSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeRecordSavePost(storeRecordSaveParams?: StoreRecordSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoreRecordDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeRecordSavePost(storeRecordSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {StoreRecordType} [type] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeRecordSearchGet(pi: number, ps: number, type?: StoreRecordType, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoreRecordDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeRecordSearchGet(pi, ps, type, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StoreRecordApi - factory interface
 * @export
 */
export const StoreRecordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StoreRecordApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeRecordFindGet(id: number, options?: any): AxiosPromise<StoreRecordDto> {
            return localVarFp.storeRecordFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StoreRecordSaveParams} [storeRecordSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeRecordSavePost(storeRecordSaveParams?: StoreRecordSaveParams, options?: any): AxiosPromise<StoreRecordDto> {
            return localVarFp.storeRecordSavePost(storeRecordSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {StoreRecordType} [type] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeRecordSearchGet(pi: number, ps: number, type?: StoreRecordType, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<StoreRecordDtoSearchResponseDto> {
            return localVarFp.storeRecordSearchGet(pi, ps, type, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for storeRecordFindGet operation in StoreRecordApi.
 * @export
 * @interface StoreRecordApiStoreRecordFindGetRequest
 */
export interface StoreRecordApiStoreRecordFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof StoreRecordApiStoreRecordFindGet
     */
    readonly id: number
}

/**
 * Request parameters for storeRecordSavePost operation in StoreRecordApi.
 * @export
 * @interface StoreRecordApiStoreRecordSavePostRequest
 */
export interface StoreRecordApiStoreRecordSavePostRequest {
    /**
     * 
     * @type {StoreRecordSaveParams}
     * @memberof StoreRecordApiStoreRecordSavePost
     */
    readonly storeRecordSaveParams?: StoreRecordSaveParams
}

/**
 * Request parameters for storeRecordSearchGet operation in StoreRecordApi.
 * @export
 * @interface StoreRecordApiStoreRecordSearchGetRequest
 */
export interface StoreRecordApiStoreRecordSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof StoreRecordApiStoreRecordSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof StoreRecordApiStoreRecordSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {StoreRecordType}
     * @memberof StoreRecordApiStoreRecordSearchGet
     */
    readonly type?: StoreRecordType

    /**
     * 
     * @type {string}
     * @memberof StoreRecordApiStoreRecordSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof StoreRecordApiStoreRecordSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof StoreRecordApiStoreRecordSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * StoreRecordApi - object-oriented interface
 * @export
 * @class StoreRecordApi
 * @extends {BaseAPI}
 */
export class StoreRecordApi extends BaseAPI {
    /**
     * 
     * @param {StoreRecordApiStoreRecordFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreRecordApi
     */
    public storeRecordFindGet(requestParameters: StoreRecordApiStoreRecordFindGetRequest, options?: AxiosRequestConfig) {
        return StoreRecordApiFp(this.configuration).storeRecordFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StoreRecordApiStoreRecordSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreRecordApi
     */
    public storeRecordSavePost(requestParameters: StoreRecordApiStoreRecordSavePostRequest = {}, options?: AxiosRequestConfig) {
        return StoreRecordApiFp(this.configuration).storeRecordSavePost(requestParameters.storeRecordSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StoreRecordApiStoreRecordSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreRecordApi
     */
    public storeRecordSearchGet(requestParameters: StoreRecordApiStoreRecordSearchGetRequest, options?: AxiosRequestConfig) {
        return StoreRecordApiFp(this.configuration).storeRecordSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.type, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TestApi - axios parameter creator
 * @export
 */
export const TestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testExecGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Test/Exec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testExecGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testExecGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testExecGet(options?: any): AxiosPromise<string> {
            return localVarFp.testExecGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
export class TestApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public testExecGet(options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).testExecGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userFindGet', 'id', id)
            const localVarPath = `/User/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserSaveParams} [userSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSavePost: async (userSaveParams?: UserSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/User/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [username] 
         * @param {string} [name] 
         * @param {UserRole} [role] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSearchGet: async (pi: number, ps: number, username?: string, name?: string, role?: UserRole, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('userSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('userSearchGet', 'ps', ps)
            const localVarPath = `/User/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['Username'] = username;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (role !== undefined) {
                localVarQueryParameter['Role'] = role;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserSaveParams} [userSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSavePost(userSaveParams?: UserSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userSavePost(userSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [username] 
         * @param {string} [name] 
         * @param {UserRole} [role] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSearchGet(pi: number, ps: number, username?: string, name?: string, role?: UserRole, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userSearchGet(pi, ps, username, name, role, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userFindGet(id: number, options?: any): AxiosPromise<UserDto> {
            return localVarFp.userFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserSaveParams} [userSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSavePost(userSaveParams?: UserSaveParams, options?: any): AxiosPromise<UserDto> {
            return localVarFp.userSavePost(userSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [username] 
         * @param {string} [name] 
         * @param {UserRole} [role] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSearchGet(pi: number, ps: number, username?: string, name?: string, role?: UserRole, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<UserDtoSearchResponseDto> {
            return localVarFp.userSearchGet(pi, ps, username, name, role, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for userFindGet operation in UserApi.
 * @export
 * @interface UserApiUserFindGetRequest
 */
export interface UserApiUserFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof UserApiUserFindGet
     */
    readonly id: number
}

/**
 * Request parameters for userSavePost operation in UserApi.
 * @export
 * @interface UserApiUserSavePostRequest
 */
export interface UserApiUserSavePostRequest {
    /**
     * 
     * @type {UserSaveParams}
     * @memberof UserApiUserSavePost
     */
    readonly userSaveParams?: UserSaveParams
}

/**
 * Request parameters for userSearchGet operation in UserApi.
 * @export
 * @interface UserApiUserSearchGetRequest
 */
export interface UserApiUserSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof UserApiUserSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof UserApiUserSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {string}
     * @memberof UserApiUserSearchGet
     */
    readonly username?: string

    /**
     * 
     * @type {string}
     * @memberof UserApiUserSearchGet
     */
    readonly name?: string

    /**
     * 
     * @type {UserRole}
     * @memberof UserApiUserSearchGet
     */
    readonly role?: UserRole

    /**
     * 
     * @type {string}
     * @memberof UserApiUserSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof UserApiUserSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof UserApiUserSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {UserApiUserFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userFindGet(requestParameters: UserApiUserFindGetRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiUserSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userSavePost(requestParameters: UserApiUserSavePostRequest = {}, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userSavePost(requestParameters.userSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiUserSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userSearchGet(requestParameters: UserApiUserSearchGetRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.username, requestParameters.name, requestParameters.role, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserGroupApi - axios parameter creator
 * @export
 */
export const UserGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGroupFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userGroupFindGet', 'id', id)
            const localVarPath = `/UserGroup/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserGroupSaveParams} [userGroupSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGroupSavePost: async (userGroupSaveParams?: UserGroupSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/UserGroup/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userGroupSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [name] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGroupSearchGet: async (pi: number, ps: number, name?: string, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('userGroupSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('userGroupSearchGet', 'ps', ps)
            const localVarPath = `/UserGroup/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserGroupApi - functional programming interface
 * @export
 */
export const UserGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userGroupFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userGroupFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserGroupSaveParams} [userGroupSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userGroupSavePost(userGroupSaveParams?: UserGroupSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGroupDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userGroupSavePost(userGroupSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [name] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userGroupSearchGet(pi: number, ps: number, name?: string, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGroupDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userGroupSearchGet(pi, ps, name, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserGroupApi - factory interface
 * @export
 */
export const UserGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserGroupApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGroupFindGet(id: number, options?: any): AxiosPromise<UserGroupDto> {
            return localVarFp.userGroupFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserGroupSaveParams} [userGroupSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGroupSavePost(userGroupSaveParams?: UserGroupSaveParams, options?: any): AxiosPromise<UserGroupDto> {
            return localVarFp.userGroupSavePost(userGroupSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [name] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGroupSearchGet(pi: number, ps: number, name?: string, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<UserGroupDtoSearchResponseDto> {
            return localVarFp.userGroupSearchGet(pi, ps, name, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for userGroupFindGet operation in UserGroupApi.
 * @export
 * @interface UserGroupApiUserGroupFindGetRequest
 */
export interface UserGroupApiUserGroupFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof UserGroupApiUserGroupFindGet
     */
    readonly id: number
}

/**
 * Request parameters for userGroupSavePost operation in UserGroupApi.
 * @export
 * @interface UserGroupApiUserGroupSavePostRequest
 */
export interface UserGroupApiUserGroupSavePostRequest {
    /**
     * 
     * @type {UserGroupSaveParams}
     * @memberof UserGroupApiUserGroupSavePost
     */
    readonly userGroupSaveParams?: UserGroupSaveParams
}

/**
 * Request parameters for userGroupSearchGet operation in UserGroupApi.
 * @export
 * @interface UserGroupApiUserGroupSearchGetRequest
 */
export interface UserGroupApiUserGroupSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof UserGroupApiUserGroupSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof UserGroupApiUserGroupSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {string}
     * @memberof UserGroupApiUserGroupSearchGet
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof UserGroupApiUserGroupSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof UserGroupApiUserGroupSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof UserGroupApiUserGroupSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * UserGroupApi - object-oriented interface
 * @export
 * @class UserGroupApi
 * @extends {BaseAPI}
 */
export class UserGroupApi extends BaseAPI {
    /**
     * 
     * @param {UserGroupApiUserGroupFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    public userGroupFindGet(requestParameters: UserGroupApiUserGroupFindGetRequest, options?: AxiosRequestConfig) {
        return UserGroupApiFp(this.configuration).userGroupFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserGroupApiUserGroupSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    public userGroupSavePost(requestParameters: UserGroupApiUserGroupSavePostRequest = {}, options?: AxiosRequestConfig) {
        return UserGroupApiFp(this.configuration).userGroupSavePost(requestParameters.userGroupSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserGroupApiUserGroupSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    public userGroupSearchGet(requestParameters: UserGroupApiUserGroupSearchGetRequest, options?: AxiosRequestConfig) {
        return UserGroupApiFp(this.configuration).userGroupSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.name, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WaterAlertRuleApi - axios parameter creator
 * @export
 */
export const WaterAlertRuleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        waterAlertRuleFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('waterAlertRuleFindGet', 'id', id)
            const localVarPath = `/WaterAlertRule/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WaterAlertRuleSaveParams} [waterAlertRuleSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        waterAlertRuleSavePost: async (waterAlertRuleSaveParams?: WaterAlertRuleSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WaterAlertRule/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(waterAlertRuleSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [cultureRuleId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        waterAlertRuleSearchGet: async (pi: number, ps: number, cultureRuleId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('waterAlertRuleSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('waterAlertRuleSearchGet', 'ps', ps)
            const localVarPath = `/WaterAlertRule/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cultureRuleId !== undefined) {
                localVarQueryParameter['CultureRuleId'] = cultureRuleId;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WaterAlertRuleApi - functional programming interface
 * @export
 */
export const WaterAlertRuleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WaterAlertRuleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async waterAlertRuleFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WaterAlertRuleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.waterAlertRuleFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WaterAlertRuleSaveParams} [waterAlertRuleSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async waterAlertRuleSavePost(waterAlertRuleSaveParams?: WaterAlertRuleSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WaterAlertRuleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.waterAlertRuleSavePost(waterAlertRuleSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [cultureRuleId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async waterAlertRuleSearchGet(pi: number, ps: number, cultureRuleId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WaterAlertRuleDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.waterAlertRuleSearchGet(pi, ps, cultureRuleId, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WaterAlertRuleApi - factory interface
 * @export
 */
export const WaterAlertRuleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WaterAlertRuleApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        waterAlertRuleFindGet(id: number, options?: any): AxiosPromise<WaterAlertRuleDto> {
            return localVarFp.waterAlertRuleFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WaterAlertRuleSaveParams} [waterAlertRuleSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        waterAlertRuleSavePost(waterAlertRuleSaveParams?: WaterAlertRuleSaveParams, options?: any): AxiosPromise<WaterAlertRuleDto> {
            return localVarFp.waterAlertRuleSavePost(waterAlertRuleSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {number} [cultureRuleId] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        waterAlertRuleSearchGet(pi: number, ps: number, cultureRuleId?: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<WaterAlertRuleDtoSearchResponseDto> {
            return localVarFp.waterAlertRuleSearchGet(pi, ps, cultureRuleId, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for waterAlertRuleFindGet operation in WaterAlertRuleApi.
 * @export
 * @interface WaterAlertRuleApiWaterAlertRuleFindGetRequest
 */
export interface WaterAlertRuleApiWaterAlertRuleFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof WaterAlertRuleApiWaterAlertRuleFindGet
     */
    readonly id: number
}

/**
 * Request parameters for waterAlertRuleSavePost operation in WaterAlertRuleApi.
 * @export
 * @interface WaterAlertRuleApiWaterAlertRuleSavePostRequest
 */
export interface WaterAlertRuleApiWaterAlertRuleSavePostRequest {
    /**
     * 
     * @type {WaterAlertRuleSaveParams}
     * @memberof WaterAlertRuleApiWaterAlertRuleSavePost
     */
    readonly waterAlertRuleSaveParams?: WaterAlertRuleSaveParams
}

/**
 * Request parameters for waterAlertRuleSearchGet operation in WaterAlertRuleApi.
 * @export
 * @interface WaterAlertRuleApiWaterAlertRuleSearchGetRequest
 */
export interface WaterAlertRuleApiWaterAlertRuleSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof WaterAlertRuleApiWaterAlertRuleSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof WaterAlertRuleApiWaterAlertRuleSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {number}
     * @memberof WaterAlertRuleApiWaterAlertRuleSearchGet
     */
    readonly cultureRuleId?: number

    /**
     * 
     * @type {string}
     * @memberof WaterAlertRuleApiWaterAlertRuleSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof WaterAlertRuleApiWaterAlertRuleSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof WaterAlertRuleApiWaterAlertRuleSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * WaterAlertRuleApi - object-oriented interface
 * @export
 * @class WaterAlertRuleApi
 * @extends {BaseAPI}
 */
export class WaterAlertRuleApi extends BaseAPI {
    /**
     * 
     * @param {WaterAlertRuleApiWaterAlertRuleFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WaterAlertRuleApi
     */
    public waterAlertRuleFindGet(requestParameters: WaterAlertRuleApiWaterAlertRuleFindGetRequest, options?: AxiosRequestConfig) {
        return WaterAlertRuleApiFp(this.configuration).waterAlertRuleFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WaterAlertRuleApiWaterAlertRuleSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WaterAlertRuleApi
     */
    public waterAlertRuleSavePost(requestParameters: WaterAlertRuleApiWaterAlertRuleSavePostRequest = {}, options?: AxiosRequestConfig) {
        return WaterAlertRuleApiFp(this.configuration).waterAlertRuleSavePost(requestParameters.waterAlertRuleSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WaterAlertRuleApiWaterAlertRuleSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WaterAlertRuleApi
     */
    public waterAlertRuleSearchGet(requestParameters: WaterAlertRuleApiWaterAlertRuleSearchGetRequest, options?: AxiosRequestConfig) {
        return WaterAlertRuleApiFp(this.configuration).waterAlertRuleSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.cultureRuleId, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WorkScheduleApi - axios parameter creator
 * @export
 */
export const WorkScheduleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {WorkScheduleAutoCreateParams} [workScheduleAutoCreateParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleAutoCreatePost: async (workScheduleAutoCreateParams?: WorkScheduleAutoCreateParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WorkSchedule/AutoCreate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workScheduleAutoCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkScheduleBatchFinishFeedParam} [workScheduleBatchFinishFeedParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleBatchFinishFeedPost: async (workScheduleBatchFinishFeedParam?: WorkScheduleBatchFinishFeedParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WorkSchedule/BatchFinishFeed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workScheduleBatchFinishFeedParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkScheduleFinishParams} [workScheduleFinishParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleCommonFinishPost: async (workScheduleFinishParams?: WorkScheduleFinishParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WorkSchedule/CommonFinish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workScheduleFinishParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('workScheduleFindGet', 'id', id)
            const localVarPath = `/WorkSchedule/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkScheduleFinishCheckParam} [workScheduleFinishCheckParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishCheckPost: async (workScheduleFinishCheckParam?: WorkScheduleFinishCheckParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WorkSchedule/FinishCheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workScheduleFinishCheckParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkScheduleFinishDeathReportParam} [workScheduleFinishDeathReportParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishDeathReportPost: async (workScheduleFinishDeathReportParam?: WorkScheduleFinishDeathReportParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WorkSchedule/FinishDeathReport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workScheduleFinishDeathReportParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkScheduleFinishDeliverWaterInspectParam} [workScheduleFinishDeliverWaterInspectParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishDeliverWaterInspectPost: async (workScheduleFinishDeliverWaterInspectParam?: WorkScheduleFinishDeliverWaterInspectParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WorkSchedule/FinishDeliverWaterInspect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workScheduleFinishDeliverWaterInspectParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkScheduleFinishFeedParam} [workScheduleFinishFeedParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishFeedPost: async (workScheduleFinishFeedParam?: WorkScheduleFinishFeedParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WorkSchedule/FinishFeed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workScheduleFinishFeedParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkScheduleFinishFryParam} [workScheduleFinishFryParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishFryPost: async (workScheduleFinishFryParam?: WorkScheduleFinishFryParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WorkSchedule/FinishFry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workScheduleFinishFryParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkScheduleFinishLarvaeWeightParam} [workScheduleFinishLarvaeWeightParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishLarvaeWeightPost: async (workScheduleFinishLarvaeWeightParam?: WorkScheduleFinishLarvaeWeightParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WorkSchedule/FinishLarvaeWeight`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workScheduleFinishLarvaeWeightParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkScheduleFinishPlantMeasureParam} [workScheduleFinishPlantMeasureParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishPlantMeasurePost: async (workScheduleFinishPlantMeasureParam?: WorkScheduleFinishPlantMeasureParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WorkSchedule/FinishPlantMeasure`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workScheduleFinishPlantMeasureParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkScheduleFinishPondSplitParam} [workScheduleFinishPondSplitParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishPondSplitPost: async (workScheduleFinishPondSplitParam?: WorkScheduleFinishPondSplitParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WorkSchedule/FinishPondSplit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workScheduleFinishPondSplitParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkScheduleFinishSewageParam} [workScheduleFinishSewageParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishSewagePost: async (workScheduleFinishSewageParam?: WorkScheduleFinishSewageParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WorkSchedule/FinishSewage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workScheduleFinishSewageParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkScheduleFinishSproutParam} [workScheduleFinishSproutParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishSproutPost: async (workScheduleFinishSproutParam?: WorkScheduleFinishSproutParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WorkSchedule/FinishSprout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workScheduleFinishSproutParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkScheduleWaterInspectParam} [workScheduleWaterInspectParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishWaterInspectPost: async (workScheduleWaterInspectParam?: WorkScheduleWaterInspectParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WorkSchedule/FinishWaterInspect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workScheduleWaterInspectParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkScheduleFinishWeightParam} [workScheduleFinishWeightParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishWeightPost: async (workScheduleFinishWeightParam?: WorkScheduleFinishWeightParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WorkSchedule/FinishWeight`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workScheduleFinishWeightParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkScheduleRemoveParams} [workScheduleRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleRemovePost: async (workScheduleRemoveParams?: WorkScheduleRemoveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WorkSchedule/Remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workScheduleRemoveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkScheduleSaveParams} [workScheduleSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleSavePost: async (workScheduleSaveParams?: WorkScheduleSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WorkSchedule/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workScheduleSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [scheduleTimeFrom] 
         * @param {string} [scheduleTimeTo] 
         * @param {string} [finishTimeFrom] 
         * @param {string} [finishTimeTo] 
         * @param {number} [cultureBatchId] 
         * @param {number} [pondId] 
         * @param {WorkType} [type] 
         * @param {number} [workerId] 
         * @param {number} [pondGroupId] 
         * @param {Array<WorkScheduleStatus>} [statusList] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleSearchGet: async (pi: number, ps: number, scheduleTimeFrom?: string, scheduleTimeTo?: string, finishTimeFrom?: string, finishTimeTo?: string, cultureBatchId?: number, pondId?: number, type?: WorkType, workerId?: number, pondGroupId?: number, statusList?: Array<WorkScheduleStatus>, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('workScheduleSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('workScheduleSearchGet', 'ps', ps)
            const localVarPath = `/WorkSchedule/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (scheduleTimeFrom !== undefined) {
                localVarQueryParameter['ScheduleTimeFrom'] = (scheduleTimeFrom as any instanceof Date) ?
                    (scheduleTimeFrom as any).toISOString() :
                    scheduleTimeFrom;
            }

            if (scheduleTimeTo !== undefined) {
                localVarQueryParameter['ScheduleTimeTo'] = (scheduleTimeTo as any instanceof Date) ?
                    (scheduleTimeTo as any).toISOString() :
                    scheduleTimeTo;
            }

            if (finishTimeFrom !== undefined) {
                localVarQueryParameter['FinishTimeFrom'] = (finishTimeFrom as any instanceof Date) ?
                    (finishTimeFrom as any).toISOString() :
                    finishTimeFrom;
            }

            if (finishTimeTo !== undefined) {
                localVarQueryParameter['FinishTimeTo'] = (finishTimeTo as any instanceof Date) ?
                    (finishTimeTo as any).toISOString() :
                    finishTimeTo;
            }

            if (cultureBatchId !== undefined) {
                localVarQueryParameter['CultureBatchId'] = cultureBatchId;
            }

            if (pondId !== undefined) {
                localVarQueryParameter['PondId'] = pondId;
            }

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (workerId !== undefined) {
                localVarQueryParameter['WorkerId'] = workerId;
            }

            if (pondGroupId !== undefined) {
                localVarQueryParameter['PondGroupId'] = pondGroupId;
            }

            if (statusList) {
                localVarQueryParameter['StatusList'] = statusList;
            }

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkScheduleApi - functional programming interface
 * @export
 */
export const WorkScheduleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkScheduleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {WorkScheduleAutoCreateParams} [workScheduleAutoCreateParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workScheduleAutoCreatePost(workScheduleAutoCreateParams?: WorkScheduleAutoCreateParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperateResultDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workScheduleAutoCreatePost(workScheduleAutoCreateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WorkScheduleBatchFinishFeedParam} [workScheduleBatchFinishFeedParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workScheduleBatchFinishFeedPost(workScheduleBatchFinishFeedParam?: WorkScheduleBatchFinishFeedParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workScheduleBatchFinishFeedPost(workScheduleBatchFinishFeedParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WorkScheduleFinishParams} [workScheduleFinishParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workScheduleCommonFinishPost(workScheduleFinishParams?: WorkScheduleFinishParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workScheduleCommonFinishPost(workScheduleFinishParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workScheduleFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workScheduleFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WorkScheduleFinishCheckParam} [workScheduleFinishCheckParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workScheduleFinishCheckPost(workScheduleFinishCheckParam?: WorkScheduleFinishCheckParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workScheduleFinishCheckPost(workScheduleFinishCheckParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WorkScheduleFinishDeathReportParam} [workScheduleFinishDeathReportParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workScheduleFinishDeathReportPost(workScheduleFinishDeathReportParam?: WorkScheduleFinishDeathReportParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workScheduleFinishDeathReportPost(workScheduleFinishDeathReportParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WorkScheduleFinishDeliverWaterInspectParam} [workScheduleFinishDeliverWaterInspectParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workScheduleFinishDeliverWaterInspectPost(workScheduleFinishDeliverWaterInspectParam?: WorkScheduleFinishDeliverWaterInspectParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workScheduleFinishDeliverWaterInspectPost(workScheduleFinishDeliverWaterInspectParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WorkScheduleFinishFeedParam} [workScheduleFinishFeedParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workScheduleFinishFeedPost(workScheduleFinishFeedParam?: WorkScheduleFinishFeedParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workScheduleFinishFeedPost(workScheduleFinishFeedParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WorkScheduleFinishFryParam} [workScheduleFinishFryParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workScheduleFinishFryPost(workScheduleFinishFryParam?: WorkScheduleFinishFryParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workScheduleFinishFryPost(workScheduleFinishFryParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WorkScheduleFinishLarvaeWeightParam} [workScheduleFinishLarvaeWeightParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workScheduleFinishLarvaeWeightPost(workScheduleFinishLarvaeWeightParam?: WorkScheduleFinishLarvaeWeightParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workScheduleFinishLarvaeWeightPost(workScheduleFinishLarvaeWeightParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WorkScheduleFinishPlantMeasureParam} [workScheduleFinishPlantMeasureParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workScheduleFinishPlantMeasurePost(workScheduleFinishPlantMeasureParam?: WorkScheduleFinishPlantMeasureParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workScheduleFinishPlantMeasurePost(workScheduleFinishPlantMeasureParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WorkScheduleFinishPondSplitParam} [workScheduleFinishPondSplitParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workScheduleFinishPondSplitPost(workScheduleFinishPondSplitParam?: WorkScheduleFinishPondSplitParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workScheduleFinishPondSplitPost(workScheduleFinishPondSplitParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WorkScheduleFinishSewageParam} [workScheduleFinishSewageParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workScheduleFinishSewagePost(workScheduleFinishSewageParam?: WorkScheduleFinishSewageParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workScheduleFinishSewagePost(workScheduleFinishSewageParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WorkScheduleFinishSproutParam} [workScheduleFinishSproutParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workScheduleFinishSproutPost(workScheduleFinishSproutParam?: WorkScheduleFinishSproutParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workScheduleFinishSproutPost(workScheduleFinishSproutParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WorkScheduleWaterInspectParam} [workScheduleWaterInspectParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workScheduleFinishWaterInspectPost(workScheduleWaterInspectParam?: WorkScheduleWaterInspectParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workScheduleFinishWaterInspectPost(workScheduleWaterInspectParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WorkScheduleFinishWeightParam} [workScheduleFinishWeightParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workScheduleFinishWeightPost(workScheduleFinishWeightParam?: WorkScheduleFinishWeightParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workScheduleFinishWeightPost(workScheduleFinishWeightParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WorkScheduleRemoveParams} [workScheduleRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workScheduleRemovePost(workScheduleRemoveParams?: WorkScheduleRemoveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workScheduleRemovePost(workScheduleRemoveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WorkScheduleSaveParams} [workScheduleSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workScheduleSavePost(workScheduleSaveParams?: WorkScheduleSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workScheduleSavePost(workScheduleSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [scheduleTimeFrom] 
         * @param {string} [scheduleTimeTo] 
         * @param {string} [finishTimeFrom] 
         * @param {string} [finishTimeTo] 
         * @param {number} [cultureBatchId] 
         * @param {number} [pondId] 
         * @param {WorkType} [type] 
         * @param {number} [workerId] 
         * @param {number} [pondGroupId] 
         * @param {Array<WorkScheduleStatus>} [statusList] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workScheduleSearchGet(pi: number, ps: number, scheduleTimeFrom?: string, scheduleTimeTo?: string, finishTimeFrom?: string, finishTimeTo?: string, cultureBatchId?: number, pondId?: number, type?: WorkType, workerId?: number, pondGroupId?: number, statusList?: Array<WorkScheduleStatus>, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkScheduleDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workScheduleSearchGet(pi, ps, scheduleTimeFrom, scheduleTimeTo, finishTimeFrom, finishTimeTo, cultureBatchId, pondId, type, workerId, pondGroupId, statusList, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkScheduleApi - factory interface
 * @export
 */
export const WorkScheduleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkScheduleApiFp(configuration)
    return {
        /**
         * 
         * @param {WorkScheduleAutoCreateParams} [workScheduleAutoCreateParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleAutoCreatePost(workScheduleAutoCreateParams?: WorkScheduleAutoCreateParams, options?: any): AxiosPromise<OperateResultDto> {
            return localVarFp.workScheduleAutoCreatePost(workScheduleAutoCreateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkScheduleBatchFinishFeedParam} [workScheduleBatchFinishFeedParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleBatchFinishFeedPost(workScheduleBatchFinishFeedParam?: WorkScheduleBatchFinishFeedParam, options?: any): AxiosPromise<WorkScheduleDto> {
            return localVarFp.workScheduleBatchFinishFeedPost(workScheduleBatchFinishFeedParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkScheduleFinishParams} [workScheduleFinishParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleCommonFinishPost(workScheduleFinishParams?: WorkScheduleFinishParams, options?: any): AxiosPromise<WorkScheduleDto> {
            return localVarFp.workScheduleCommonFinishPost(workScheduleFinishParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFindGet(id: number, options?: any): AxiosPromise<WorkScheduleDto> {
            return localVarFp.workScheduleFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkScheduleFinishCheckParam} [workScheduleFinishCheckParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishCheckPost(workScheduleFinishCheckParam?: WorkScheduleFinishCheckParam, options?: any): AxiosPromise<WorkScheduleDto> {
            return localVarFp.workScheduleFinishCheckPost(workScheduleFinishCheckParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkScheduleFinishDeathReportParam} [workScheduleFinishDeathReportParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishDeathReportPost(workScheduleFinishDeathReportParam?: WorkScheduleFinishDeathReportParam, options?: any): AxiosPromise<WorkScheduleDto> {
            return localVarFp.workScheduleFinishDeathReportPost(workScheduleFinishDeathReportParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkScheduleFinishDeliverWaterInspectParam} [workScheduleFinishDeliverWaterInspectParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishDeliverWaterInspectPost(workScheduleFinishDeliverWaterInspectParam?: WorkScheduleFinishDeliverWaterInspectParam, options?: any): AxiosPromise<WorkScheduleDto> {
            return localVarFp.workScheduleFinishDeliverWaterInspectPost(workScheduleFinishDeliverWaterInspectParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkScheduleFinishFeedParam} [workScheduleFinishFeedParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishFeedPost(workScheduleFinishFeedParam?: WorkScheduleFinishFeedParam, options?: any): AxiosPromise<WorkScheduleDto> {
            return localVarFp.workScheduleFinishFeedPost(workScheduleFinishFeedParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkScheduleFinishFryParam} [workScheduleFinishFryParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishFryPost(workScheduleFinishFryParam?: WorkScheduleFinishFryParam, options?: any): AxiosPromise<WorkScheduleDto> {
            return localVarFp.workScheduleFinishFryPost(workScheduleFinishFryParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkScheduleFinishLarvaeWeightParam} [workScheduleFinishLarvaeWeightParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishLarvaeWeightPost(workScheduleFinishLarvaeWeightParam?: WorkScheduleFinishLarvaeWeightParam, options?: any): AxiosPromise<WorkScheduleDto> {
            return localVarFp.workScheduleFinishLarvaeWeightPost(workScheduleFinishLarvaeWeightParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkScheduleFinishPlantMeasureParam} [workScheduleFinishPlantMeasureParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishPlantMeasurePost(workScheduleFinishPlantMeasureParam?: WorkScheduleFinishPlantMeasureParam, options?: any): AxiosPromise<WorkScheduleDto> {
            return localVarFp.workScheduleFinishPlantMeasurePost(workScheduleFinishPlantMeasureParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkScheduleFinishPondSplitParam} [workScheduleFinishPondSplitParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishPondSplitPost(workScheduleFinishPondSplitParam?: WorkScheduleFinishPondSplitParam, options?: any): AxiosPromise<WorkScheduleDto> {
            return localVarFp.workScheduleFinishPondSplitPost(workScheduleFinishPondSplitParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkScheduleFinishSewageParam} [workScheduleFinishSewageParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishSewagePost(workScheduleFinishSewageParam?: WorkScheduleFinishSewageParam, options?: any): AxiosPromise<WorkScheduleDto> {
            return localVarFp.workScheduleFinishSewagePost(workScheduleFinishSewageParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkScheduleFinishSproutParam} [workScheduleFinishSproutParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishSproutPost(workScheduleFinishSproutParam?: WorkScheduleFinishSproutParam, options?: any): AxiosPromise<WorkScheduleDto> {
            return localVarFp.workScheduleFinishSproutPost(workScheduleFinishSproutParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkScheduleWaterInspectParam} [workScheduleWaterInspectParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishWaterInspectPost(workScheduleWaterInspectParam?: WorkScheduleWaterInspectParam, options?: any): AxiosPromise<WorkScheduleDto> {
            return localVarFp.workScheduleFinishWaterInspectPost(workScheduleWaterInspectParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkScheduleFinishWeightParam} [workScheduleFinishWeightParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleFinishWeightPost(workScheduleFinishWeightParam?: WorkScheduleFinishWeightParam, options?: any): AxiosPromise<WorkScheduleDto> {
            return localVarFp.workScheduleFinishWeightPost(workScheduleFinishWeightParam, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkScheduleRemoveParams} [workScheduleRemoveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleRemovePost(workScheduleRemoveParams?: WorkScheduleRemoveParams, options?: any): AxiosPromise<WorkScheduleDto> {
            return localVarFp.workScheduleRemovePost(workScheduleRemoveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkScheduleSaveParams} [workScheduleSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleSavePost(workScheduleSaveParams?: WorkScheduleSaveParams, options?: any): AxiosPromise<WorkScheduleDto> {
            return localVarFp.workScheduleSavePost(workScheduleSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [scheduleTimeFrom] 
         * @param {string} [scheduleTimeTo] 
         * @param {string} [finishTimeFrom] 
         * @param {string} [finishTimeTo] 
         * @param {number} [cultureBatchId] 
         * @param {number} [pondId] 
         * @param {WorkType} [type] 
         * @param {number} [workerId] 
         * @param {number} [pondGroupId] 
         * @param {Array<WorkScheduleStatus>} [statusList] 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workScheduleSearchGet(pi: number, ps: number, scheduleTimeFrom?: string, scheduleTimeTo?: string, finishTimeFrom?: string, finishTimeTo?: string, cultureBatchId?: number, pondId?: number, type?: WorkType, workerId?: number, pondGroupId?: number, statusList?: Array<WorkScheduleStatus>, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<WorkScheduleDtoSearchResponseDto> {
            return localVarFp.workScheduleSearchGet(pi, ps, scheduleTimeFrom, scheduleTimeTo, finishTimeFrom, finishTimeTo, cultureBatchId, pondId, type, workerId, pondGroupId, statusList, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for workScheduleAutoCreatePost operation in WorkScheduleApi.
 * @export
 * @interface WorkScheduleApiWorkScheduleAutoCreatePostRequest
 */
export interface WorkScheduleApiWorkScheduleAutoCreatePostRequest {
    /**
     * 
     * @type {WorkScheduleAutoCreateParams}
     * @memberof WorkScheduleApiWorkScheduleAutoCreatePost
     */
    readonly workScheduleAutoCreateParams?: WorkScheduleAutoCreateParams
}

/**
 * Request parameters for workScheduleBatchFinishFeedPost operation in WorkScheduleApi.
 * @export
 * @interface WorkScheduleApiWorkScheduleBatchFinishFeedPostRequest
 */
export interface WorkScheduleApiWorkScheduleBatchFinishFeedPostRequest {
    /**
     * 
     * @type {WorkScheduleBatchFinishFeedParam}
     * @memberof WorkScheduleApiWorkScheduleBatchFinishFeedPost
     */
    readonly workScheduleBatchFinishFeedParam?: WorkScheduleBatchFinishFeedParam
}

/**
 * Request parameters for workScheduleCommonFinishPost operation in WorkScheduleApi.
 * @export
 * @interface WorkScheduleApiWorkScheduleCommonFinishPostRequest
 */
export interface WorkScheduleApiWorkScheduleCommonFinishPostRequest {
    /**
     * 
     * @type {WorkScheduleFinishParams}
     * @memberof WorkScheduleApiWorkScheduleCommonFinishPost
     */
    readonly workScheduleFinishParams?: WorkScheduleFinishParams
}

/**
 * Request parameters for workScheduleFindGet operation in WorkScheduleApi.
 * @export
 * @interface WorkScheduleApiWorkScheduleFindGetRequest
 */
export interface WorkScheduleApiWorkScheduleFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleApiWorkScheduleFindGet
     */
    readonly id: number
}

/**
 * Request parameters for workScheduleFinishCheckPost operation in WorkScheduleApi.
 * @export
 * @interface WorkScheduleApiWorkScheduleFinishCheckPostRequest
 */
export interface WorkScheduleApiWorkScheduleFinishCheckPostRequest {
    /**
     * 
     * @type {WorkScheduleFinishCheckParam}
     * @memberof WorkScheduleApiWorkScheduleFinishCheckPost
     */
    readonly workScheduleFinishCheckParam?: WorkScheduleFinishCheckParam
}

/**
 * Request parameters for workScheduleFinishDeathReportPost operation in WorkScheduleApi.
 * @export
 * @interface WorkScheduleApiWorkScheduleFinishDeathReportPostRequest
 */
export interface WorkScheduleApiWorkScheduleFinishDeathReportPostRequest {
    /**
     * 
     * @type {WorkScheduleFinishDeathReportParam}
     * @memberof WorkScheduleApiWorkScheduleFinishDeathReportPost
     */
    readonly workScheduleFinishDeathReportParam?: WorkScheduleFinishDeathReportParam
}

/**
 * Request parameters for workScheduleFinishDeliverWaterInspectPost operation in WorkScheduleApi.
 * @export
 * @interface WorkScheduleApiWorkScheduleFinishDeliverWaterInspectPostRequest
 */
export interface WorkScheduleApiWorkScheduleFinishDeliverWaterInspectPostRequest {
    /**
     * 
     * @type {WorkScheduleFinishDeliverWaterInspectParam}
     * @memberof WorkScheduleApiWorkScheduleFinishDeliverWaterInspectPost
     */
    readonly workScheduleFinishDeliverWaterInspectParam?: WorkScheduleFinishDeliverWaterInspectParam
}

/**
 * Request parameters for workScheduleFinishFeedPost operation in WorkScheduleApi.
 * @export
 * @interface WorkScheduleApiWorkScheduleFinishFeedPostRequest
 */
export interface WorkScheduleApiWorkScheduleFinishFeedPostRequest {
    /**
     * 
     * @type {WorkScheduleFinishFeedParam}
     * @memberof WorkScheduleApiWorkScheduleFinishFeedPost
     */
    readonly workScheduleFinishFeedParam?: WorkScheduleFinishFeedParam
}

/**
 * Request parameters for workScheduleFinishFryPost operation in WorkScheduleApi.
 * @export
 * @interface WorkScheduleApiWorkScheduleFinishFryPostRequest
 */
export interface WorkScheduleApiWorkScheduleFinishFryPostRequest {
    /**
     * 
     * @type {WorkScheduleFinishFryParam}
     * @memberof WorkScheduleApiWorkScheduleFinishFryPost
     */
    readonly workScheduleFinishFryParam?: WorkScheduleFinishFryParam
}

/**
 * Request parameters for workScheduleFinishLarvaeWeightPost operation in WorkScheduleApi.
 * @export
 * @interface WorkScheduleApiWorkScheduleFinishLarvaeWeightPostRequest
 */
export interface WorkScheduleApiWorkScheduleFinishLarvaeWeightPostRequest {
    /**
     * 
     * @type {WorkScheduleFinishLarvaeWeightParam}
     * @memberof WorkScheduleApiWorkScheduleFinishLarvaeWeightPost
     */
    readonly workScheduleFinishLarvaeWeightParam?: WorkScheduleFinishLarvaeWeightParam
}

/**
 * Request parameters for workScheduleFinishPlantMeasurePost operation in WorkScheduleApi.
 * @export
 * @interface WorkScheduleApiWorkScheduleFinishPlantMeasurePostRequest
 */
export interface WorkScheduleApiWorkScheduleFinishPlantMeasurePostRequest {
    /**
     * 
     * @type {WorkScheduleFinishPlantMeasureParam}
     * @memberof WorkScheduleApiWorkScheduleFinishPlantMeasurePost
     */
    readonly workScheduleFinishPlantMeasureParam?: WorkScheduleFinishPlantMeasureParam
}

/**
 * Request parameters for workScheduleFinishPondSplitPost operation in WorkScheduleApi.
 * @export
 * @interface WorkScheduleApiWorkScheduleFinishPondSplitPostRequest
 */
export interface WorkScheduleApiWorkScheduleFinishPondSplitPostRequest {
    /**
     * 
     * @type {WorkScheduleFinishPondSplitParam}
     * @memberof WorkScheduleApiWorkScheduleFinishPondSplitPost
     */
    readonly workScheduleFinishPondSplitParam?: WorkScheduleFinishPondSplitParam
}

/**
 * Request parameters for workScheduleFinishSewagePost operation in WorkScheduleApi.
 * @export
 * @interface WorkScheduleApiWorkScheduleFinishSewagePostRequest
 */
export interface WorkScheduleApiWorkScheduleFinishSewagePostRequest {
    /**
     * 
     * @type {WorkScheduleFinishSewageParam}
     * @memberof WorkScheduleApiWorkScheduleFinishSewagePost
     */
    readonly workScheduleFinishSewageParam?: WorkScheduleFinishSewageParam
}

/**
 * Request parameters for workScheduleFinishSproutPost operation in WorkScheduleApi.
 * @export
 * @interface WorkScheduleApiWorkScheduleFinishSproutPostRequest
 */
export interface WorkScheduleApiWorkScheduleFinishSproutPostRequest {
    /**
     * 
     * @type {WorkScheduleFinishSproutParam}
     * @memberof WorkScheduleApiWorkScheduleFinishSproutPost
     */
    readonly workScheduleFinishSproutParam?: WorkScheduleFinishSproutParam
}

/**
 * Request parameters for workScheduleFinishWaterInspectPost operation in WorkScheduleApi.
 * @export
 * @interface WorkScheduleApiWorkScheduleFinishWaterInspectPostRequest
 */
export interface WorkScheduleApiWorkScheduleFinishWaterInspectPostRequest {
    /**
     * 
     * @type {WorkScheduleWaterInspectParam}
     * @memberof WorkScheduleApiWorkScheduleFinishWaterInspectPost
     */
    readonly workScheduleWaterInspectParam?: WorkScheduleWaterInspectParam
}

/**
 * Request parameters for workScheduleFinishWeightPost operation in WorkScheduleApi.
 * @export
 * @interface WorkScheduleApiWorkScheduleFinishWeightPostRequest
 */
export interface WorkScheduleApiWorkScheduleFinishWeightPostRequest {
    /**
     * 
     * @type {WorkScheduleFinishWeightParam}
     * @memberof WorkScheduleApiWorkScheduleFinishWeightPost
     */
    readonly workScheduleFinishWeightParam?: WorkScheduleFinishWeightParam
}

/**
 * Request parameters for workScheduleRemovePost operation in WorkScheduleApi.
 * @export
 * @interface WorkScheduleApiWorkScheduleRemovePostRequest
 */
export interface WorkScheduleApiWorkScheduleRemovePostRequest {
    /**
     * 
     * @type {WorkScheduleRemoveParams}
     * @memberof WorkScheduleApiWorkScheduleRemovePost
     */
    readonly workScheduleRemoveParams?: WorkScheduleRemoveParams
}

/**
 * Request parameters for workScheduleSavePost operation in WorkScheduleApi.
 * @export
 * @interface WorkScheduleApiWorkScheduleSavePostRequest
 */
export interface WorkScheduleApiWorkScheduleSavePostRequest {
    /**
     * 
     * @type {WorkScheduleSaveParams}
     * @memberof WorkScheduleApiWorkScheduleSavePost
     */
    readonly workScheduleSaveParams?: WorkScheduleSaveParams
}

/**
 * Request parameters for workScheduleSearchGet operation in WorkScheduleApi.
 * @export
 * @interface WorkScheduleApiWorkScheduleSearchGetRequest
 */
export interface WorkScheduleApiWorkScheduleSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof WorkScheduleApiWorkScheduleSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof WorkScheduleApiWorkScheduleSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {string}
     * @memberof WorkScheduleApiWorkScheduleSearchGet
     */
    readonly scheduleTimeFrom?: string

    /**
     * 
     * @type {string}
     * @memberof WorkScheduleApiWorkScheduleSearchGet
     */
    readonly scheduleTimeTo?: string

    /**
     * 
     * @type {string}
     * @memberof WorkScheduleApiWorkScheduleSearchGet
     */
    readonly finishTimeFrom?: string

    /**
     * 
     * @type {string}
     * @memberof WorkScheduleApiWorkScheduleSearchGet
     */
    readonly finishTimeTo?: string

    /**
     * 
     * @type {number}
     * @memberof WorkScheduleApiWorkScheduleSearchGet
     */
    readonly cultureBatchId?: number

    /**
     * 
     * @type {number}
     * @memberof WorkScheduleApiWorkScheduleSearchGet
     */
    readonly pondId?: number

    /**
     * 
     * @type {WorkType}
     * @memberof WorkScheduleApiWorkScheduleSearchGet
     */
    readonly type?: WorkType

    /**
     * 
     * @type {number}
     * @memberof WorkScheduleApiWorkScheduleSearchGet
     */
    readonly workerId?: number

    /**
     * 
     * @type {number}
     * @memberof WorkScheduleApiWorkScheduleSearchGet
     */
    readonly pondGroupId?: number

    /**
     * 
     * @type {Array<WorkScheduleStatus>}
     * @memberof WorkScheduleApiWorkScheduleSearchGet
     */
    readonly statusList?: Array<WorkScheduleStatus>

    /**
     * 
     * @type {string}
     * @memberof WorkScheduleApiWorkScheduleSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof WorkScheduleApiWorkScheduleSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof WorkScheduleApiWorkScheduleSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * WorkScheduleApi - object-oriented interface
 * @export
 * @class WorkScheduleApi
 * @extends {BaseAPI}
 */
export class WorkScheduleApi extends BaseAPI {
    /**
     * 
     * @param {WorkScheduleApiWorkScheduleAutoCreatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkScheduleApi
     */
    public workScheduleAutoCreatePost(requestParameters: WorkScheduleApiWorkScheduleAutoCreatePostRequest = {}, options?: AxiosRequestConfig) {
        return WorkScheduleApiFp(this.configuration).workScheduleAutoCreatePost(requestParameters.workScheduleAutoCreateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkScheduleApiWorkScheduleBatchFinishFeedPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkScheduleApi
     */
    public workScheduleBatchFinishFeedPost(requestParameters: WorkScheduleApiWorkScheduleBatchFinishFeedPostRequest = {}, options?: AxiosRequestConfig) {
        return WorkScheduleApiFp(this.configuration).workScheduleBatchFinishFeedPost(requestParameters.workScheduleBatchFinishFeedParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkScheduleApiWorkScheduleCommonFinishPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkScheduleApi
     */
    public workScheduleCommonFinishPost(requestParameters: WorkScheduleApiWorkScheduleCommonFinishPostRequest = {}, options?: AxiosRequestConfig) {
        return WorkScheduleApiFp(this.configuration).workScheduleCommonFinishPost(requestParameters.workScheduleFinishParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkScheduleApiWorkScheduleFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkScheduleApi
     */
    public workScheduleFindGet(requestParameters: WorkScheduleApiWorkScheduleFindGetRequest, options?: AxiosRequestConfig) {
        return WorkScheduleApiFp(this.configuration).workScheduleFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkScheduleApiWorkScheduleFinishCheckPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkScheduleApi
     */
    public workScheduleFinishCheckPost(requestParameters: WorkScheduleApiWorkScheduleFinishCheckPostRequest = {}, options?: AxiosRequestConfig) {
        return WorkScheduleApiFp(this.configuration).workScheduleFinishCheckPost(requestParameters.workScheduleFinishCheckParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkScheduleApiWorkScheduleFinishDeathReportPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkScheduleApi
     */
    public workScheduleFinishDeathReportPost(requestParameters: WorkScheduleApiWorkScheduleFinishDeathReportPostRequest = {}, options?: AxiosRequestConfig) {
        return WorkScheduleApiFp(this.configuration).workScheduleFinishDeathReportPost(requestParameters.workScheduleFinishDeathReportParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkScheduleApiWorkScheduleFinishDeliverWaterInspectPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkScheduleApi
     */
    public workScheduleFinishDeliverWaterInspectPost(requestParameters: WorkScheduleApiWorkScheduleFinishDeliverWaterInspectPostRequest = {}, options?: AxiosRequestConfig) {
        return WorkScheduleApiFp(this.configuration).workScheduleFinishDeliverWaterInspectPost(requestParameters.workScheduleFinishDeliverWaterInspectParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkScheduleApiWorkScheduleFinishFeedPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkScheduleApi
     */
    public workScheduleFinishFeedPost(requestParameters: WorkScheduleApiWorkScheduleFinishFeedPostRequest = {}, options?: AxiosRequestConfig) {
        return WorkScheduleApiFp(this.configuration).workScheduleFinishFeedPost(requestParameters.workScheduleFinishFeedParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkScheduleApiWorkScheduleFinishFryPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkScheduleApi
     */
    public workScheduleFinishFryPost(requestParameters: WorkScheduleApiWorkScheduleFinishFryPostRequest = {}, options?: AxiosRequestConfig) {
        return WorkScheduleApiFp(this.configuration).workScheduleFinishFryPost(requestParameters.workScheduleFinishFryParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkScheduleApiWorkScheduleFinishLarvaeWeightPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkScheduleApi
     */
    public workScheduleFinishLarvaeWeightPost(requestParameters: WorkScheduleApiWorkScheduleFinishLarvaeWeightPostRequest = {}, options?: AxiosRequestConfig) {
        return WorkScheduleApiFp(this.configuration).workScheduleFinishLarvaeWeightPost(requestParameters.workScheduleFinishLarvaeWeightParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkScheduleApiWorkScheduleFinishPlantMeasurePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkScheduleApi
     */
    public workScheduleFinishPlantMeasurePost(requestParameters: WorkScheduleApiWorkScheduleFinishPlantMeasurePostRequest = {}, options?: AxiosRequestConfig) {
        return WorkScheduleApiFp(this.configuration).workScheduleFinishPlantMeasurePost(requestParameters.workScheduleFinishPlantMeasureParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkScheduleApiWorkScheduleFinishPondSplitPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkScheduleApi
     */
    public workScheduleFinishPondSplitPost(requestParameters: WorkScheduleApiWorkScheduleFinishPondSplitPostRequest = {}, options?: AxiosRequestConfig) {
        return WorkScheduleApiFp(this.configuration).workScheduleFinishPondSplitPost(requestParameters.workScheduleFinishPondSplitParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkScheduleApiWorkScheduleFinishSewagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkScheduleApi
     */
    public workScheduleFinishSewagePost(requestParameters: WorkScheduleApiWorkScheduleFinishSewagePostRequest = {}, options?: AxiosRequestConfig) {
        return WorkScheduleApiFp(this.configuration).workScheduleFinishSewagePost(requestParameters.workScheduleFinishSewageParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkScheduleApiWorkScheduleFinishSproutPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkScheduleApi
     */
    public workScheduleFinishSproutPost(requestParameters: WorkScheduleApiWorkScheduleFinishSproutPostRequest = {}, options?: AxiosRequestConfig) {
        return WorkScheduleApiFp(this.configuration).workScheduleFinishSproutPost(requestParameters.workScheduleFinishSproutParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkScheduleApiWorkScheduleFinishWaterInspectPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkScheduleApi
     */
    public workScheduleFinishWaterInspectPost(requestParameters: WorkScheduleApiWorkScheduleFinishWaterInspectPostRequest = {}, options?: AxiosRequestConfig) {
        return WorkScheduleApiFp(this.configuration).workScheduleFinishWaterInspectPost(requestParameters.workScheduleWaterInspectParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkScheduleApiWorkScheduleFinishWeightPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkScheduleApi
     */
    public workScheduleFinishWeightPost(requestParameters: WorkScheduleApiWorkScheduleFinishWeightPostRequest = {}, options?: AxiosRequestConfig) {
        return WorkScheduleApiFp(this.configuration).workScheduleFinishWeightPost(requestParameters.workScheduleFinishWeightParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkScheduleApiWorkScheduleRemovePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkScheduleApi
     */
    public workScheduleRemovePost(requestParameters: WorkScheduleApiWorkScheduleRemovePostRequest = {}, options?: AxiosRequestConfig) {
        return WorkScheduleApiFp(this.configuration).workScheduleRemovePost(requestParameters.workScheduleRemoveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkScheduleApiWorkScheduleSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkScheduleApi
     */
    public workScheduleSavePost(requestParameters: WorkScheduleApiWorkScheduleSavePostRequest = {}, options?: AxiosRequestConfig) {
        return WorkScheduleApiFp(this.configuration).workScheduleSavePost(requestParameters.workScheduleSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkScheduleApiWorkScheduleSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkScheduleApi
     */
    public workScheduleSearchGet(requestParameters: WorkScheduleApiWorkScheduleSearchGetRequest, options?: AxiosRequestConfig) {
        return WorkScheduleApiFp(this.configuration).workScheduleSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.scheduleTimeFrom, requestParameters.scheduleTimeTo, requestParameters.finishTimeFrom, requestParameters.finishTimeTo, requestParameters.cultureBatchId, requestParameters.pondId, requestParameters.type, requestParameters.workerId, requestParameters.pondGroupId, requestParameters.statusList, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WorkShopApi - axios parameter creator
 * @export
 */
export const WorkShopApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workShopFindGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('workShopFindGet', 'id', id)
            const localVarPath = `/WorkShop/Find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkShopSaveParams} [workShopSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workShopSavePost: async (workShopSaveParams?: WorkShopSaveParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WorkShop/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workShopSaveParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workShopSearchGet: async (pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pi' is not null or undefined
            assertParamExists('workShopSearchGet', 'pi', pi)
            // verify required parameter 'ps' is not null or undefined
            assertParamExists('workShopSearchGet', 'ps', ps)
            const localVarPath = `/WorkShop/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pi !== undefined) {
                localVarQueryParameter['Pi'] = pi;
            }

            if (ps !== undefined) {
                localVarQueryParameter['Ps'] = ps;
            }

            if (sorterKey !== undefined) {
                localVarQueryParameter['SorterKey'] = sorterKey;
            }

            if (sorterOrder !== undefined) {
                localVarQueryParameter['SorterOrder'] = sorterOrder;
            }

            if (isDelete !== undefined) {
                localVarQueryParameter['IsDelete'] = isDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WorkShopUpdatePondGroupParams} [workShopUpdatePondGroupParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workShopUpdatePondGroupPost: async (workShopUpdatePondGroupParams?: WorkShopUpdatePondGroupParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/WorkShop/UpdatePondGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workShopUpdatePondGroupParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkShopApi - functional programming interface
 * @export
 */
export const WorkShopApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkShopApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workShopFindGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkShopDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workShopFindGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WorkShopSaveParams} [workShopSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workShopSavePost(workShopSaveParams?: WorkShopSaveParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkShopDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workShopSavePost(workShopSaveParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workShopSearchGet(pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkShopDtoSearchResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workShopSearchGet(pi, ps, sorterKey, sorterOrder, isDelete, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WorkShopUpdatePondGroupParams} [workShopUpdatePondGroupParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workShopUpdatePondGroupPost(workShopUpdatePondGroupParams?: WorkShopUpdatePondGroupParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkShopDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workShopUpdatePondGroupPost(workShopUpdatePondGroupParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkShopApi - factory interface
 * @export
 */
export const WorkShopApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkShopApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workShopFindGet(id: number, options?: any): AxiosPromise<WorkShopDto> {
            return localVarFp.workShopFindGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkShopSaveParams} [workShopSaveParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workShopSavePost(workShopSaveParams?: WorkShopSaveParams, options?: any): AxiosPromise<WorkShopDto> {
            return localVarFp.workShopSavePost(workShopSaveParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pi 
         * @param {number} ps 
         * @param {string} [sorterKey] 
         * @param {SorterOrder} [sorterOrder] 
         * @param {boolean} [isDelete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workShopSearchGet(pi: number, ps: number, sorterKey?: string, sorterOrder?: SorterOrder, isDelete?: boolean, options?: any): AxiosPromise<WorkShopDtoSearchResponseDto> {
            return localVarFp.workShopSearchGet(pi, ps, sorterKey, sorterOrder, isDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WorkShopUpdatePondGroupParams} [workShopUpdatePondGroupParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workShopUpdatePondGroupPost(workShopUpdatePondGroupParams?: WorkShopUpdatePondGroupParams, options?: any): AxiosPromise<WorkShopDto> {
            return localVarFp.workShopUpdatePondGroupPost(workShopUpdatePondGroupParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for workShopFindGet operation in WorkShopApi.
 * @export
 * @interface WorkShopApiWorkShopFindGetRequest
 */
export interface WorkShopApiWorkShopFindGetRequest {
    /**
     * 
     * @type {number}
     * @memberof WorkShopApiWorkShopFindGet
     */
    readonly id: number
}

/**
 * Request parameters for workShopSavePost operation in WorkShopApi.
 * @export
 * @interface WorkShopApiWorkShopSavePostRequest
 */
export interface WorkShopApiWorkShopSavePostRequest {
    /**
     * 
     * @type {WorkShopSaveParams}
     * @memberof WorkShopApiWorkShopSavePost
     */
    readonly workShopSaveParams?: WorkShopSaveParams
}

/**
 * Request parameters for workShopSearchGet operation in WorkShopApi.
 * @export
 * @interface WorkShopApiWorkShopSearchGetRequest
 */
export interface WorkShopApiWorkShopSearchGetRequest {
    /**
     * 
     * @type {number}
     * @memberof WorkShopApiWorkShopSearchGet
     */
    readonly pi: number

    /**
     * 
     * @type {number}
     * @memberof WorkShopApiWorkShopSearchGet
     */
    readonly ps: number

    /**
     * 
     * @type {string}
     * @memberof WorkShopApiWorkShopSearchGet
     */
    readonly sorterKey?: string

    /**
     * 
     * @type {SorterOrder}
     * @memberof WorkShopApiWorkShopSearchGet
     */
    readonly sorterOrder?: SorterOrder

    /**
     * 
     * @type {boolean}
     * @memberof WorkShopApiWorkShopSearchGet
     */
    readonly isDelete?: boolean
}

/**
 * Request parameters for workShopUpdatePondGroupPost operation in WorkShopApi.
 * @export
 * @interface WorkShopApiWorkShopUpdatePondGroupPostRequest
 */
export interface WorkShopApiWorkShopUpdatePondGroupPostRequest {
    /**
     * 
     * @type {WorkShopUpdatePondGroupParams}
     * @memberof WorkShopApiWorkShopUpdatePondGroupPost
     */
    readonly workShopUpdatePondGroupParams?: WorkShopUpdatePondGroupParams
}

/**
 * WorkShopApi - object-oriented interface
 * @export
 * @class WorkShopApi
 * @extends {BaseAPI}
 */
export class WorkShopApi extends BaseAPI {
    /**
     * 
     * @param {WorkShopApiWorkShopFindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkShopApi
     */
    public workShopFindGet(requestParameters: WorkShopApiWorkShopFindGetRequest, options?: AxiosRequestConfig) {
        return WorkShopApiFp(this.configuration).workShopFindGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkShopApiWorkShopSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkShopApi
     */
    public workShopSavePost(requestParameters: WorkShopApiWorkShopSavePostRequest = {}, options?: AxiosRequestConfig) {
        return WorkShopApiFp(this.configuration).workShopSavePost(requestParameters.workShopSaveParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkShopApiWorkShopSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkShopApi
     */
    public workShopSearchGet(requestParameters: WorkShopApiWorkShopSearchGetRequest, options?: AxiosRequestConfig) {
        return WorkShopApiFp(this.configuration).workShopSearchGet(requestParameters.pi, requestParameters.ps, requestParameters.sorterKey, requestParameters.sorterOrder, requestParameters.isDelete, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WorkShopApiWorkShopUpdatePondGroupPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkShopApi
     */
    public workShopUpdatePondGroupPost(requestParameters: WorkShopApiWorkShopUpdatePondGroupPostRequest = {}, options?: AxiosRequestConfig) {
        return WorkShopApiFp(this.configuration).workShopUpdatePondGroupPost(requestParameters.workShopUpdatePondGroupParams, options).then((request) => request(this.axios, this.basePath));
    }
}


